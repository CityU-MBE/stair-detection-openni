!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABSTRACT_HISTOGRAM__H_	include/pcl/histogram/abstract_histogram.h	9;"	d
ANGLE_THRESHHOLD	include/pcl/types/plane3d.h	/^      const static float ANGLE_THRESHHOLD = 15;$/;"	m	class:pcl::Plane3D
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	193;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	196;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	199;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	206;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	181;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
AbstractHistogram	include/pcl/histogram/abstract_histogram.h	/^    class AbstractHistogram$/;"	c	namespace:pcl
Alloc	include/pcl/apps/stairdetectiondemo.h	/^      typedef Eigen::aligned_allocator<PointIn> Alloc;$/;"	t	class:pcl::StairDetectionDemo
Alloc	include/pcl/apps/stairdetectionlocal.h	/^      typedef Eigen::aligned_allocator<PointIn> Alloc;$/;"	t	class:pcl::StairDetectionLocal
Alloc	include/pcl/apps/stairdetector.h	/^      typedef Eigen::aligned_allocator<PointT> Alloc;$/;"	t	class:pcl::StairDetector
Alloc	include/pcl/histogram/abstract_histogram.h	/^      typedef Eigen::aligned_allocator<T> Alloc;$/;"	t	struct:pcl::Bin
Alloc	include/pcl/histogram/linesegment3dhistogram.h	/^      typedef Eigen::aligned_allocator<LineSegment3D<PointT> > Alloc;$/;"	t	class:pcl::LineSegment3DHistogram
Alloc	include/pcl/histogram/linesegmenthistogram.h	/^      typedef Eigen::aligned_allocator<PointT> Alloc;$/;"	t	class:pcl::LineSegmentBin
Alloc	include/pcl/histogram/linesegmenthistogram.h	/^      typedef Eigen::aligned_allocator<PointT> Alloc;$/;"	t	class:pcl::LineSegmentHistogram
Alloc	include/pcl/histogram/planehistogram.h	/^      typedef Eigen::aligned_allocator<Plane3D<PointT> > Alloc;$/;"	t	class:pcl::PlaneHistogram
Alloc	include/pcl/io/globfitwriter.h	/^        typedef Eigen::aligned_allocator<PointT> Alloc;$/;"	t	class:pcl::io::GlobfitWriter
Alloc	include/pcl/models/globalmodel.h	/^      typedef Eigen::aligned_allocator<PointT> Alloc;$/;"	t	class:pcl::GlobalModel
Alloc	include/pcl/models/localmodel.h	/^      typedef Eigen::aligned_allocator<PointT> Alloc;$/;"	t	class:pcl::LocalModel
Alloc	include/pcl/models/localmodelfactory.h	/^      typedef Eigen::aligned_allocator<PointT> Alloc;$/;"	t	class:pcl::LocalModelFactory
Alloc	include/pcl/models/modelsampler.h	/^      typedef Eigen::aligned_allocator<PointT> Alloc;$/;"	t	class:pcl::ModelSampler
Alloc	include/pcl/opencv/linesegment2d.h	/^    typedef Eigen::aligned_allocator<cv::Vec2i> Alloc;$/;"	t	class:pcl::LineSegment2D
Alloc	include/pcl/segmentation/planesegmentation.h	/^      typedef Eigen::aligned_allocator<PointOut> Alloc;$/;"	t	class:pcl::PlaneSegmentation
Alloc	include/pcl/types/linesegment3d.h	/^      typedef Eigen::aligned_allocator<PointT> Alloc;$/;"	t	class:pcl::LineSegment3D
Alloc	tests/test_fpe.cpp	/^typedef Eigen::aligned_allocator<XYZD> Alloc;$/;"	t	file:
AllocOut	include/pcl/apps/stairdetectiondemo.h	/^      typedef Eigen::aligned_allocator<PointOut> AllocOut;$/;"	t	class:pcl::StairDetectionDemo
AllocOut	include/pcl/apps/stairdetectionlocal.h	/^      typedef Eigen::aligned_allocator<PointOut> AllocOut;$/;"	t	class:pcl::StairDetectionLocal
AllocRGBNormal	tests/test_fpe.cpp	/^typedef Eigen::aligned_allocator<pcl::PointXYZRGBNormal> AllocRGBNormal;$/;"	t	file:
ApproximatePlaneRegionSegmentation	include/pcl/segmentation/region_segmentation.h	/^        ApproximatePlaneRegionSegmentation () :$/;"	f	class:pcl::segmentation::ApproximatePlaneRegionSegmentation
ApproximatePlaneRegionSegmentation	include/pcl/segmentation/region_segmentation.h	/^    class ApproximatePlaneRegionSegmentation : public RegionSegmentation<PointT>$/;"	c	namespace:pcl::segmentation
AverageNormalRegionSegmentation	include/pcl/segmentation/region_segmentation.h	/^        AverageNormalRegionSegmentation ()$/;"	f	class:pcl::segmentation::AverageNormalRegionSegmentation
AverageNormalRegionSegmentation	include/pcl/segmentation/region_segmentation.h	/^    class AverageNormalRegionSegmentation : public RegionSegmentation<PointT>$/;"	c	namespace:pcl::segmentation
BOUNDINGBOX_H_	include/pcl/types/boundingbox.h	9;"	d
BaseClass	include/pcl/kdtree/fixed_neighbors.h	/^	typedef ::pcl::search::Search<PointT> BaseClass;$/;"	t	class:pcl::FixedNeighbors
BasePCLBase	include/pcl/segmentation/region_segmentation.h	/^        typedef PCLBase<PointT> BasePCLBase;$/;"	t	class:pcl::segmentation::PlanePolygonalization
BasePCLBase	include/pcl/segmentation/region_segmentation.h	/^        typedef PCLBase<PointT> BasePCLBase;$/;"	t	class:pcl::segmentation::RegionSegmentation
Bin	include/pcl/histogram/abstract_histogram.h	/^      Bin () :$/;"	f	struct:pcl::Bin
Bin	include/pcl/histogram/abstract_histogram.h	/^      Bin (const Bin<T, 0>& bin) :$/;"	f	struct:pcl::Bin
Bin	include/pcl/histogram/abstract_histogram.h	/^      Bin (const Bin<T, nest>& bin) :$/;"	f	struct:pcl::Bin
Bin	include/pcl/histogram/abstract_histogram.h	/^      Bin (int index, float rangeMin, float rangeMax) :$/;"	f	struct:pcl::Bin
Bin	include/pcl/histogram/abstract_histogram.h	/^    struct Bin : public _IBin$/;"	s	namespace:pcl
Bin	include/pcl/histogram/abstract_histogram.h	/^    struct Bin<T, 0> : public _IBin$/;"	s	namespace:pcl
BinsMatrix	include/pcl/opencv/edgesdetector.h	/^        typedef std::vector<RowBin> BinsMatrix;$/;"	t	class:pcl::opencv::EdgeDetector
BinsMatrix	include/pcl/opencv/linesegment2dhistogram.h	/^    typedef std::vector<RowBin> BinsMatrix;$/;"	t	class:pcl::LineSegment2DHistogram
BinsVector	include/pcl/histogram/linesegment3dhistogram.h	/^      typedef std::vector<Bin<LineSegment3D<PointT> , 4> , Alloc> BinsVector;$/;"	t	class:pcl::LineSegment3DHistogram
BinsVector	include/pcl/histogram/linesegmenthistogram.h	/^      typedef std::vector<LineSegmentBin<PointT> , Alloc> BinsVector;$/;"	t	class:pcl::LineSegmentHistogram
BinsVector	include/pcl/histogram/planehistogram.h	/^      typedef std::vector<Bin<T, 0>, Alloc> BinsVector;$/;"	t	class:pcl::PlaneHistogram
BoundingBox	include/pcl/types/boundingbox.h	/^      BoundingBox (const BoundingBox<PointT>& bbox)$/;"	f	class:pcl::BoundingBox
BoundingBox	include/pcl/types/boundingbox.h	/^      BoundingBox(){}$/;"	f	class:pcl::BoundingBox
BoundingBox	include/pcl/types/boundingbox.h	/^    class BoundingBox$/;"	c	namespace:pcl
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/ramlab\/catkin_ws\/src\/stair_perception\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/ramlab\/catkin_ws\/src\/stair_perception$/;"	m
COMMONS_H_	include/pcl/common/commons.h	9;"	d
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	10;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	13;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	22;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	25;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	34;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	36;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	40;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	43;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	49;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	52;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	55;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	58;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	61;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	77;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	86;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	92;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	12;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	18;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	30;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	34;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	36;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	45;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	48;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	54;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	57;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	60;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	68;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	77;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	9;"	d	file:
CUSTOM_REPROJECT	tests/opencv_reproject_image_pcl.cpp	42;"	d	file:
CVUTILS_H_	include/pcl/opencv/cvutils.h	9;"	d
Centroid	include/pcl/opencv/linesegment2d.h	/^    cv::Vec2i Centroid;$/;"	m	class:pcl::LineSegment2D
ClusterIndices	include/pcl/segmentation/region_segmentation.h	/^    typedef pcl::PointIndices ClusterIndices;$/;"	t	namespace:pcl::segmentation
ColumnBin	include/pcl/opencv/linesegment2dhistogram.h	/^    ColumnBin ()$/;"	f	class:pcl::ColumnBin
ColumnBin	include/pcl/opencv/linesegment2dhistogram.h	/^    ColumnBin (const ColumnBin& bin)$/;"	f	class:pcl::ColumnBin
ColumnBin	include/pcl/opencv/linesegment2dhistogram.h	/^    ColumnBin (int id, float min, float max)$/;"	f	class:pcl::ColumnBin
ColumnBin	include/pcl/opencv/linesegment2dhistogram.h	/^  class ColumnBin$/;"	c	namespace:pcl
ColumnBins	include/pcl/opencv/edgesdetector.h	/^        typedef std::vector<ColumnBin> ColumnBins;$/;"	t	class:pcl::opencv::EdgeDetector
ColumnBins	include/pcl/opencv/linesegment2dhistogram.h	/^    typedef std::vector<ColumnBin> ColumnBins;$/;"	t	class:pcl::LineSegment2DHistogram
ColumnBins	include/pcl/opencv/linesegment2dhistogram.h	/^    typedef std::vector<ColumnBin> ColumnBins;$/;"	t	class:pcl::RowBin
Comparator	include/pcl/apps/stairdetector.h	/^        Comparator (int compIndex)$/;"	f	struct:pcl::StairDetector::Comparator
Comparator	include/pcl/apps/stairdetector.h	/^      struct Comparator$/;"	s	class:pcl::StairDetector
Comparator	include/pcl/segmentation/planesegmentation.h	/^          Comparator (int compIndex)$/;"	f	struct:pcl::PlaneSegmentation::Comparator
Comparator	include/pcl/segmentation/planesegmentation.h	/^      struct Comparator$/;"	s	class:pcl::PlaneSegmentation
ComputeDirection	include/pcl/common/linesegment2d_common.h	/^    ComputeDirection (double xi, double yi, double xj, double yj, double xk, double yk)$/;"	f	namespace:pcl::common
ConcaveLine	include/pcl/types/linesegment3d.h	/^    ConvexLine, ConcaveLine$/;"	e	enum:pcl::ContourForm
ConstPtr	include/pcl/common/noise_model.h	/^      typedef boost::shared_ptr< const NoiseModel<PointT> > ConstPtr;$/;"	t	class:pcl::NoiseModel
ConstPtr	include/pcl/common/noise_model.h	/^      typedef boost::shared_ptr< const QuadraticIsotropicNoise<PointT> > ConstPtr;$/;"	t	class:pcl::QuadraticIsotropicNoise
ConstPtr	include/pcl/kdtree/fixed_neighbors.h	/^	typedef boost::shared_ptr<const FixedNeighbors<PointT> > ConstPtr;$/;"	t	class:pcl::FixedNeighbors
ConstPtr	include/pcl/models/localmodel.h	/^      typedef boost::shared_ptr<LocalModel<const PointT> > ConstPtr;$/;"	t	class:pcl::LocalModel
ContourForm	include/pcl/types/linesegment3d.h	/^  enum ContourForm$/;"	g	namespace:pcl
ConvexLine	include/pcl/types/linesegment3d.h	/^    ConvexLine, ConcaveLine$/;"	e	enum:pcl::ContourForm
Correspondences	include/pcl/registration/registration_dirk.h	/^  typedef pcl::registration::Correspondences Correspondences;$/;"	t	namespace:pcl
CorrespondencesPtr	include/pcl/registration/registration_dirk.h	/^  typedef pcl::registration::CorrespondencesPtr CorrespondencesPtr;$/;"	t	namespace:pcl
DIR_POINT	include/pcl/opencv/lswms.h	/^}DIR_POINT;$/;"	t	typeref:struct:_DIR_POINT
DIVIDEBY1000	tests/test_fpe.cpp	/^  static const bool DIVIDEBY1000 = true;$/;"	m	class:Test_FPE	file:
DO_EVERY	include/pcl/common/time.h	146;"	d
DO_EVERY_TS	include/pcl/common/time.h	130;"	d
DistanceType	include/pcl/common/mesh_utilities.h	/^  typedef float DistanceType;$/;"	t	namespace:pcl
EDGES2PLANESFACTORY_H_	include/pcl/models/edges2planesfactory.h	9;"	d
EDGESDETECTOR_H_	include/pcl/opencv/edgesdetector.h	9;"	d
EDGES_COMMON_H_	include/pcl/common/edges_common.h	9;"	d
EDGE_DETECTION_UTILS_H_	include/pcl/opencv/edge_detection_utils.h	9;"	d
EdgeDetector	include/pcl/opencv/edgesdetector.h	/^    class EdgeDetector : public pcl::PCLBase<PointIn>$/;"	c	namespace:pcl::opencv
Edges2PlanesFactory	include/pcl/models/edges2planesfactory.h	/^      Edges2PlanesFactory() {$/;"	f	class:pcl::Edges2PlanesFactory
Edges2PlanesFactory	include/pcl/models/edges2planesfactory.h	/^    class Edges2PlanesFactory$/;"	c	namespace:pcl
EdgesVector	tests/test_fpe.cpp	/^typedef std::vector<pcl::Edge<XYZD>, Alloc> EdgesVector;$/;"	t	file:
FHG_PCL_COMMONN_H_	include/pcl/common/point_common.h	2;"	d
FHG_PCL_POINTTYPES_H_	include/pcl/common/fhg_point_types.h	2;"	d
FHG_PCL_TYPES_H_	include/pcl/types/types.h	2;"	d
FHG_POINT_TYPES_HPP_	include/pcl/common/impl/fhg_point_types.hpp	9;"	d
FastMeshing	include/pcl/apps/fast_meshing.h	/^      FastMeshing(){};$/;"	f	class:pcl::FastMeshing
FastMeshing	include/pcl/apps/fast_meshing.h	/^  class FastMeshing$/;"	c	namespace:pcl
FixedNeighbors	include/pcl/kdtree/fixed_neighbors.h	/^	FixedNeighbors() :$/;"	f	class:pcl::FixedNeighbors
FixedNeighbors	include/pcl/kdtree/fixed_neighbors.h	/^class FixedNeighbors: public ::pcl::search::Search<PointT> {$/;"	c	namespace:pcl
GLOBALMODEL_H_	include/pcl/models/globalmodel.h	9;"	d
GLOBFITWRITER_H_	include/pcl/io/globfitwriter.h	9;"	d
GlobalModel	include/pcl/models/globalmodel.h	/^      GlobalModel ()$/;"	f	class:pcl::GlobalModel
GlobalModel	include/pcl/models/globalmodel.h	/^  class GlobalModel : public LocalModel<PointT>$/;"	c	namespace:pcl
GlobfitWriter	include/pcl/io/globfitwriter.h	/^    class GlobfitWriter$/;"	c	namespace:pcl::io
ICP	include/pcl/registration/registration_dirk.h	/^      ICP($/;"	f	namespace:pcl::registration
ICP_H_	include/pcl/registration/icp_dirk.h	9;"	d
ID_VOID_MAIN	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
IMAGECONCAT_H_	include/pcl/opencv/imageconcat.h	11;"	d
INVALID_CLUSTER	include/pcl/segmentation/region_segmentation.h	/^        static const int INVALID_CLUSTER = -2;$/;"	m	class:pcl::segmentation::RegionSegmentation
ImageConcatenator	include/pcl/opencv/imageconcat.h	/^        ImageConcatenator () :$/;"	f	class:pcl::opencv::ImageConcatenator
ImageConcatenator	include/pcl/opencv/imageconcat.h	/^    class ImageConcatenator$/;"	c	namespace:pcl::opencv
IncrementalPlaneFitting	include/pcl/common/incremental_plane_fitting.h	/^  class IncrementalPlaneFitting$/;"	c	namespace:pcl
IndicesConstPtr	include/pcl/common/noise_model.h	/^      typedef boost::shared_ptr <const std::vector<int> > IndicesConstPtr;$/;"	t	class:pcl::NoiseModel
IndicesConstPtr	include/pcl/kdtree/fixed_neighbors.h	/^	typedef boost::shared_ptr<const std::vector<int> > IndicesConstPtr;$/;"	t	class:pcl::FixedNeighbors
IndicesPtr	include/pcl/common/noise_model.h	/^      typedef boost::shared_ptr <std::vector<int> > IndicesPtr;$/;"	t	class:pcl::NoiseModel
IndicesPtr	include/pcl/kdtree/fixed_neighbors.h	/^	typedef boost::shared_ptr<std::vector<int> > IndicesPtr;$/;"	t	class:pcl::FixedNeighbors
InitialNormalRegionSegmentation	include/pcl/segmentation/region_segmentation.h	/^        InitialNormalRegionSegmentation ()$/;"	f	class:pcl::segmentation::InitialNormalRegionSegmentation
InitialNormalRegionSegmentation	include/pcl/segmentation/region_segmentation.h	/^    class InitialNormalRegionSegmentation : public RegionSegmentation<PointT>$/;"	c	namespace:pcl::segmentation
IntAlloc	include/pcl/segmentation/planesegmentation.h	/^      typedef Eigen::aligned_allocator<int> IntAlloc;$/;"	t	class:pcl::PlaneSegmentation
IsOnSegment	include/pcl/common/linesegment2d_common.h	/^    IsOnSegment (double xi, double yi, double xj, double yj, double xk, double yk)$/;"	f	namespace:pcl::common
KdTree	include/pcl/segmentation/region_segmentation.h	/^        typedef pcl::search::Search<PointT> KdTree;$/;"	t	class:pcl::segmentation::RegionSegmentation
KdTreePtr	include/pcl/segmentation/region_segmentation.h	/^        typedef typename pcl::search::Search<PointT>::Ptr KdTreePtr;$/;"	t	class:pcl::segmentation::RegionSegmentation
LINESEGMENT2D_HISTOGRAM_H_	include/pcl/opencv/linesegment2dhistogram.h	9;"	d
LINESEGMENT2D_H_	include/pcl/opencv/linesegment2d.h	9;"	d
LINESEGMENT2D_UTILS_H_	include/pcl/common/linesegment2d_common.h	9;"	d
LINESEGMENT3DHISTOGRAM_H_	include/pcl/histogram/linesegment3dhistogram.h	9;"	d
LINESEGMENT3D_COMMON_H_	include/pcl/common/linesegment3d_common.h	9;"	d
LINESEGMENT3D_HPP_	include/pcl/types/impl/linesegment3d.hpp	9;"	d
LINESEGMENT3D_H_	include/pcl/types/linesegment3d.h	9;"	d
LINESEGMENT_HISTOGRAM_H_	include/pcl/histogram/linesegmenthistogram.h	10;"	d
LOCALMODELFACTORY_H_	include/pcl/models/localmodelfactory.h	9;"	d
LOCALMODE_H_	include/pcl/models/localmodel.h	9;"	d
LSEG	include/pcl/opencv/lswms.h	/^typedef std::vector<cv::Point> LSEG;$/;"	t
LSWMS	include/pcl/opencv/lswms.h	/^class LSWMS$/;"	c
LastNormalRegionSegmentation	include/pcl/segmentation/region_segmentation.h	/^        LastNormalRegionSegmentation ()$/;"	f	class:pcl::segmentation::LastNormalRegionSegmentation
LastNormalRegionSegmentation	include/pcl/segmentation/region_segmentation.h	/^    class LastNormalRegionSegmentation : public RegionSegmentation<PointT>$/;"	c	namespace:pcl::segmentation
Line	include/pcl/opencv/linesegment2d.h	/^    typedef std::vector<cv::Vec2i, Alloc> Line;$/;"	t	class:pcl::LineSegment2D
LineSegment	include/pcl/types/types.h	/^      LineSegment ()$/;"	f	class:pcl::LineSegment
LineSegment	include/pcl/types/types.h	/^      LineSegment (PointT p1, PointT p2)$/;"	f	class:pcl::LineSegment
LineSegment	include/pcl/types/types.h	/^      LineSegment(const LineSegment& l) {$/;"	f	class:pcl::LineSegment
LineSegment	include/pcl/types/types.h	/^    class LineSegment$/;"	c	namespace:pcl
LineSegment	tests/test_fpe.cpp	/^typedef pcl::LineSegment<XYZD> LineSegment;$/;"	t	file:
LineSegment2D	include/pcl/opencv/linesegment2d.h	/^    LineSegment2D ()$/;"	f	class:pcl::LineSegment2D
LineSegment2D	include/pcl/opencv/linesegment2d.h	/^    LineSegment2D (const LineSegment2D& line)$/;"	f	class:pcl::LineSegment2D
LineSegment2D	include/pcl/opencv/linesegment2d.h	/^    LineSegment2D (int id)$/;"	f	class:pcl::LineSegment2D
LineSegment2D	include/pcl/opencv/linesegment2d.h	/^  class LineSegment2D$/;"	c	namespace:pcl
LineSegment2DHistogram	include/pcl/opencv/linesegment2dhistogram.h	/^    LineSegment2DHistogram ()$/;"	f	class:pcl::LineSegment2DHistogram
LineSegment2DHistogram	include/pcl/opencv/linesegment2dhistogram.h	/^  class LineSegment2DHistogram$/;"	c	namespace:pcl
LineSegment2DVector	include/pcl/opencv/edgesdetector.h	/^        typedef std::vector<LineSegment2D> LineSegment2DVector;$/;"	t	class:pcl::opencv::EdgeDetector
LineSegment3D	include/pcl/types/impl/linesegment3d.hpp	/^pcl::LineSegment3D<PointT>::LineSegment3D (const LineSegment3D<PointT>& line)$/;"	f	class:pcl::LineSegment3D
LineSegment3D	include/pcl/types/impl/linesegment3d.hpp	/^pcl::LineSegment3D<PointT>::LineSegment3D (float distance_threshold, float max_iterations)$/;"	f	class:pcl::LineSegment3D
LineSegment3D	include/pcl/types/impl/linesegment3d.hpp	/^pcl::LineSegment3D<PointT>::LineSegment3D (int id, const PointT& p1, const PointT& p2)$/;"	f	class:pcl::LineSegment3D
LineSegment3D	include/pcl/types/impl/linesegment3d.hpp	/^pcl::LineSegment3D<PointT>::LineSegment3D (int id, float distance_threshold, float max_iterations )$/;"	f	class:pcl::LineSegment3D
LineSegment3D	include/pcl/types/linesegment3d.h	/^      LineSegment3D (const LineSegment3D<PointT>& line)$/;"	f	class:pcl::LineSegment3D
LineSegment3D	include/pcl/types/linesegment3d.h	/^      LineSegment3D (float distance_threshold = 0.7, float max_iterations = 100)$/;"	f	class:pcl::LineSegment3D
LineSegment3D	include/pcl/types/linesegment3d.h	/^      LineSegment3D (int id, const PointT& p1, const PointT& p2)$/;"	f	class:pcl::LineSegment3D
LineSegment3D	include/pcl/types/linesegment3d.h	/^      LineSegment3D (int id, float distance_threshold = 0.7, float max_iterations = 100)$/;"	f	class:pcl::LineSegment3D
LineSegment3D	include/pcl/types/linesegment3d.h	/^    class LineSegment3D$/;"	c	namespace:pcl
LineSegment3DHistogram	include/pcl/histogram/linesegment3dhistogram.h	/^      LineSegment3DHistogram (int compareIndex = 2)$/;"	f	class:pcl::LineSegment3DHistogram
LineSegment3DHistogram	include/pcl/histogram/linesegment3dhistogram.h	/^    class LineSegment3DHistogram : public AbstractHistogram<LineSegment3D<PointT> , 4>$/;"	c	namespace:pcl
LineSegment3DVector	include/pcl/apps/stairdetectiondemo.h	/^      typedef std::vector<pcl::LineSegment3D<PointOut>, Eigen::aligned_allocator<PointOut> > LineSegment3DVector;$/;"	t	class:pcl::StairDetectionDemo
LineSegment3DVector	include/pcl/apps/stairdetectionlocal.h	/^      typedef std::vector<pcl::LineSegment3D<PointOut>, Eigen::aligned_allocator<PointOut> > LineSegment3DVector;$/;"	t	class:pcl::StairDetectionLocal
LineSegment3DVector	include/pcl/models/localmodel.h	/^      typedef std::vector<pcl::LineSegment3D<PointT>, Alloc> LineSegment3DVector;$/;"	t	class:pcl::LocalModel
LineSegment3DVector	include/pcl/models/modelsampler.h	/^      typedef std::vector<pcl::LineSegment3D<PointT>, Alloc> LineSegment3DVector;$/;"	t	class:pcl::ModelSampler
LineSegment3DVector	include/pcl/opencv/edgesdetector.h	/^        typedef std::vector<pcl::LineSegment3D<PointOut>, Eigen::aligned_allocator<PointOut> > LineSegment3DVector;$/;"	t	class:pcl::opencv::EdgeDetector
LineSegmentBin	include/pcl/histogram/linesegmenthistogram.h	/^      LineSegmentBin (const LineSegmentBin<PointT>& bin)$/;"	f	class:pcl::LineSegmentBin
LineSegmentBin	include/pcl/histogram/linesegmenthistogram.h	/^      LineSegmentBin (int id, float rangeMin, float rangeMax)$/;"	f	class:pcl::LineSegmentBin
LineSegmentBin	include/pcl/histogram/linesegmenthistogram.h	/^    class LineSegmentBin$/;"	c	namespace:pcl
LineSegmentHistogram	include/pcl/histogram/linesegmenthistogram.h	/^      LineSegmentHistogram ()$/;"	f	class:pcl::LineSegmentHistogram
LineSegmentHistogram	include/pcl/histogram/linesegmenthistogram.h	/^    class LineSegmentHistogram$/;"	c	namespace:pcl
LineSegmentVtr	tests/test_fpe.cpp	/^typedef std::vector<LineSegment, Alloc> LineSegmentVtr;$/;"	t	file:
LineSegmentVtrVtr	tests/test_fpe.cpp	/^typedef std::vector<LineSegmentVtr, Alloc> LineSegmentVtrVtr;$/;"	t	file:
LineVector	include/pcl/histogram/linesegment3dhistogram.h	/^      typedef std::vector<LineSegment3D<PointT> , Alloc> LineVector;$/;"	t	class:pcl::LineSegment3DHistogram
LineVector	include/pcl/histogram/linesegmenthistogram.h	/^      typedef std::vector<LineSegment3D<PointT> , Alloc> LineVector;$/;"	t	class:pcl::LineSegmentBin
LineVector	include/pcl/histogram/linesegmenthistogram.h	/^      typedef std::vector<LineSegment3D<PointT> , Alloc> LineVector;$/;"	t	class:pcl::LineSegmentHistogram
LineVector	include/pcl/opencv/linesegment2dhistogram.h	/^    typedef std::vector<LineSegment2D> LineVector;$/;"	t	class:pcl::ColumnBin
LineVector	include/pcl/opencv/linesegment2dhistogram.h	/^    typedef std::vector<LineSegment2D> LineVector;$/;"	t	class:pcl::LineSegment2DHistogram
LinesComparator	include/pcl/models/model_utils.h	/^    struct LinesComparator$/;"	s	namespace:pcl::model
LocalModel	include/pcl/models/localmodel.h	/^      LocalModel ()$/;"	f	class:pcl::LocalModel
LocalModel	include/pcl/models/localmodel.h	/^      LocalModel (const LocalModel<PointT>& model)$/;"	f	class:pcl::LocalModel
LocalModel	include/pcl/models/localmodel.h	/^  class LocalModel$/;"	c	namespace:pcl
LocalModelFactory	include/pcl/models/localmodelfactory.h	/^      LocalModelFactory ()$/;"	f	class:pcl::LocalModelFactory
LocalModelFactory	include/pcl/models/localmodelfactory.h	/^  class LocalModelFactory$/;"	c	namespace:pcl
MATH_H_	include/pcl/common/math.h	9;"	d
MAXDEVIATIONSTEPS	include/pcl/models/globalmodel.h	/^      const static float MAXDEVIATIONSTEPS = 0.15;$/;"	m	class:pcl::GlobalModel
MAXMSE	tests/test_fpe.cpp	/^  double MAXMSE;int NN;int MINNUMPOINTSPERPLANE;$/;"	m	class:Test_FPE	file:
MAXNUMMODELS	include/pcl/models/globalmodel.h	/^      const static size_t MINNUMMODELS = 5, MAXNUMMODELS = 10;$/;"	m	class:pcl::GlobalModel
MAXPLANEDISTANCE	tests/test_fpe.cpp	/^  double MAXPLANEDISTANCE, maxAngleDeviation;$/;"	m	class:Test_FPE	file:
MAXPOINTDIST	tests/test_fpe.cpp	/^  double MAXPOINTDIST;$/;"	m	class:Test_FPE	file:
MAXSEGMENTDISTANCE	tests/test_fpe.cpp	/^  double MAXSEGMENTDISTANCE;$/;"	m	class:Test_FPE	file:
MAX_ANGLE_BET_LINES	include/pcl/histogram/linesegment3dhistogram.h	/^      static const float MAX_ANGLE_BET_LINES = 10;$/;"	m	class:pcl::LineSegment3DHistogram
MAX_DIFF_BBOX_POINTS	include/pcl/types/plane3d.h	/^      const static float MAX_DIFF_BBOX_POINTS = 0.05;$/;"	m	class:pcl::Plane3D
MAX_DIST_BET_FRAMES	include/pcl/models/globalmodel.h	/^      const static float MAX_DIST_BET_FRAMES = 0.15;$/;"	m	class:pcl::GlobalModel
MAX_DIST_LINES	include/pcl/histogram/linesegment3dhistogram.h	/^      static const float MAX_DIST_LINES = 0.04;$/;"	m	class:pcl::LineSegment3DHistogram
MAX_KERNEL_LENGTH	src/pcl/apps/smooth.cpp	/^int MAX_KERNEL_LENGTH = 31;$/;"	v
MAX_SLOPE_LENGTH_X	include/pcl/types/plane3d.h	/^      const static float MAX_SLOPE_LENGTH_X = 0.15;$/;"	m	class:pcl::Plane3D
MAX_SLOPE_LENGTH_Z	include/pcl/types/plane3d.h	/^      const static float MAX_SLOPE_LENGTH_Z = 0.17;$/;"	m	class:pcl::Plane3D
MEASURE_FUNCTION_TIME	include/pcl/common/time.h	117;"	d
METHOD_P	include/pcl/opencv/linesegment2dhistogram.h	112;"	d
METHOD_STANDARD	include/pcl/opencv/linesegment2dhistogram.h	111;"	d
MINNUMMODELS	include/pcl/models/globalmodel.h	/^      const static size_t MINNUMMODELS = 5, MAXNUMMODELS = 10;$/;"	m	class:pcl::GlobalModel
MINNUMPOINTSPERPLANE	tests/test_fpe.cpp	/^  double MAXMSE;int NN;int MINNUMPOINTSPERPLANE;$/;"	m	class:Test_FPE	file:
MINSEGLENGTH	tests/test_fpe.cpp	/^  double MINSEGLENGTH;$/;"	m	class:Test_FPE	file:
MODELSAMPLER_H_	include/pcl/models/modelsampler.h	10;"	d
MODEL_UTILS_H_	include/pcl/models/model_utils.h	9;"	d
MOPCD_IO_H_	include/pcl/io/mopcd_io.h	9;"	d
MOPOINTTYPES	src/fhg_bindings.cpp	19;"	d	file:
MO_IO_HPP_	include/pcl/io/impl/mo_io.hpp	9;"	d
MO_IO_H_	include/pcl/io/mo_io.h	9;"	d
MSECUTOFF	tests/test_fpe.cpp	/^  double MSECUTOFF;$/;"	m	class:Test_FPE	file:
Match	include/pcl/models/globalmodel.h	/^          Match ()$/;"	f	struct:pcl::GlobalModel::Match
Match	include/pcl/models/globalmodel.h	/^          Match (const Match<PointT>& match)$/;"	f	struct:pcl::GlobalModel::Match
Match	include/pcl/models/globalmodel.h	/^      struct Match$/;"	s	class:pcl::GlobalModel
ModelSampler	include/pcl/models/modelsampler.h	/^  class ModelSampler$/;"	c	namespace:pcl
MyICP	include/pcl/registration/myicp.h	/^  class PCL_EXPORTS MyICP : public IterativeClosestPointWithNormals<PointSource, PointTarget>$/;"	c	namespace:pcl
MyICPNonLinear	include/pcl/registration/myicp.h	/^  class MyICPNonLinear : public IterativeClosestPointNonLinear<PointSource, PointTarget>$/;"	c	namespace:pcl
MyPointRepresentation	tests/icp_vis.cpp	/^    MyPointRepresentation ()$/;"	f	class:MyPointRepresentation
MyPointRepresentation	tests/icp_vis.cpp	/^class MyPointRepresentation : public pcl::PointRepresentation<PointNormalT>$/;"	c	file:
NN	tests/test_fpe.cpp	/^  double MAXMSE;int NN;int MINNUMPOINTSPERPLANE;$/;"	m	class:Test_FPE	file:
NeighborDistances	include/pcl/common/mesh_utilities.h	/^  typedef std::vector<DistanceType> NeighborDistances;$/;"	t	namespace:pcl
NeighborDistancesVector	include/pcl/common/mesh_utilities.h	/^  typedef std::vector<NeighborDistances> NeighborDistancesVector;$/;"	t	namespace:pcl
NeighborDistancesVectorConstPtr	include/pcl/common/mesh_utilities.h	/^  typedef boost::shared_ptr< const NeighborDistancesVector > NeighborDistancesVectorConstPtr;$/;"	t	namespace:pcl
NeighborDistancesVectorPtr	include/pcl/common/mesh_utilities.h	/^  typedef boost::shared_ptr< NeighborDistancesVector > NeighborDistancesVectorPtr;$/;"	t	namespace:pcl
NeighborType	include/pcl/common/mesh_utilities.h	/^  typedef int NeighborType;$/;"	t	namespace:pcl
Neighborhood	include/pcl/common/mesh_utilities.h	/^  typedef std::vector<NeighborType> Neighborhood;$/;"	t	namespace:pcl
NeighborhoodVector	include/pcl/common/mesh_utilities.h	/^  typedef std::vector<Neighborhood> NeighborhoodVector;$/;"	t	namespace:pcl
NeighborhoodVectorConstPtr	include/pcl/common/mesh_utilities.h	/^  typedef boost::shared_ptr< const NeighborhoodVector > NeighborhoodVectorConstPtr;$/;"	t	namespace:pcl
NeighborhoodVectorPtr	include/pcl/common/mesh_utilities.h	/^  typedef boost::shared_ptr< NeighborhoodVector > NeighborhoodVectorPtr;$/;"	t	namespace:pcl
NoiseModel	include/pcl/common/noise_model.h	/^      NoiseModel(){};$/;"	f	class:pcl::NoiseModel
NoiseModel	include/pcl/common/noise_model.h	/^  class NoiseModel$/;"	c	namespace:pcl
NoiseModel	include/pcl/segmentation/region_segmentation.h	/^        typedef typename pcl::NoiseModel<PointT> NoiseModel;$/;"	t	class:pcl::segmentation::RegionSegmentation
NoiseModelPtr	include/pcl/segmentation/region_segmentation.h	/^        typedef typename pcl::NoiseModel<PointT>::Ptr NoiseModelPtr;$/;"	t	class:pcl::segmentation::RegionSegmentation
PCD	tests/icp_vis.cpp	/^    PCD () :$/;"	f	struct:PCD
PCD	tests/icp_vis.cpp	/^struct PCD$/;"	s	file:
PCDComparator	tests/icp_vis.cpp	/^struct PCDComparator$/;"	s	file:
PCLEuclideanRegionSegmentation	include/pcl/segmentation/region_segmentation.h	/^        PCLEuclideanRegionSegmentation ()$/;"	f	class:pcl::segmentation::PCLEuclideanRegionSegmentation
PCLEuclideanRegionSegmentation	include/pcl/segmentation/region_segmentation.h	/^    class PCLEuclideanRegionSegmentation : public RegionSegmentation<PointT>$/;"	c	namespace:pcl::segmentation
PCL_ADD_NORMAL4D	include/pcl/common/fhg_point_types.h	/^        PCL_ADD_NORMAL4D; \/\/ This adds the member normal[3] which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointMoXYZRGBNormal
PCL_ADD_NORMAL4D	include/pcl/common/impl/fhg_point_types.hpp	/^      PCL_ADD_NORMAL4D; \/\/ This adds the member normal[3] which can also be accessed using the point (which is float[4])$/;"	m	struct:_PointMoXYZRGBNormal
PCL_ADD_POINT4D	include/pcl/common/fhg_point_types.h	/^        PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointMoXYZRGBNormal
PCL_ADD_POINT4D	include/pcl/common/fhg_point_types.h	/^      PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointMoXYZRGB
PCL_ADD_POINT4D	include/pcl/common/impl/fhg_point_types.hpp	/^      PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:_PointMoXYZRGBNormal
PCL_ADD_POINT4D	include/pcl/common/impl/fhg_point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:_PointMoXYZRGB
PCL_APPS_FAST_MESHING_H_	include/pcl/apps/fast_meshing.h	39;"	d
PCL_COMMONS_H_	include/pcl/common/pcl_commons.h	9;"	d
PCL_COMMON_COLOR_H_	include/pcl/common/color.h	39;"	d
PCL_COMMON_INCREMENTAL_PLANE_FITTING_H_	include/pcl/common/incremental_plane_fitting.h	39;"	d
PCL_COMMON_NEIGHBORS_FROM_MESH_H_	include/pcl/common/mesh_utilities.h	39;"	d
PCL_COMMON_NOISE_MODEL_H_	include/pcl/common/noise_model.h	39;"	d
PCL_INSTANTIATE_ApproximatePlaneRegionSegmentation	include/pcl/segmentation/region_segmentation.h	959;"	d
PCL_INSTANTIATE_AverageNormalRegionSegmentation	include/pcl/segmentation/region_segmentation.h	958;"	d
PCL_INSTANTIATE_BoundingBox	include/pcl/types/boundingbox.h	41;"	d
PCL_INSTANTIATE_Edges2PlanesFactory	include/pcl/models/edges2planesfactory.h	132;"	d
PCL_INSTANTIATE_FastMeshing	include/pcl/apps/fast_meshing.h	173;"	d
PCL_INSTANTIATE_FixedNeighbors	include/pcl/kdtree/impl/fixed_neighbors.hpp	190;"	d
PCL_INSTANTIATE_GlobalModel	include/pcl/models/globalmodel.h	933;"	d
PCL_INSTANTIATE_GlobfitWriter	include/pcl/io/globfitwriter.h	237;"	d
PCL_INSTANTIATE_InitialNormalRegionSegmentation	include/pcl/segmentation/region_segmentation.h	956;"	d
PCL_INSTANTIATE_LastNormalRegionSegmentation	include/pcl/segmentation/region_segmentation.h	957;"	d
PCL_INSTANTIATE_LineSegment	include/pcl/types/types.h	92;"	d
PCL_INSTANTIATE_LineSegment3D	include/pcl/types/linesegment3d.h	357;"	d
PCL_INSTANTIATE_LineSegment3DHistogram	include/pcl/histogram/linesegment3dhistogram.h	310;"	d
PCL_INSTANTIATE_LineSegmentBin	include/pcl/histogram/linesegmenthistogram.h	307;"	d
PCL_INSTANTIATE_LineSegmentHistogram	include/pcl/histogram/linesegmenthistogram.h	308;"	d
PCL_INSTANTIATE_LocalModel	include/pcl/models/localmodel.h	309;"	d
PCL_INSTANTIATE_LocalModelFactory	include/pcl/models/localmodelfactory.h	641;"	d
PCL_INSTANTIATE_ModelSampler	include/pcl/models/modelsampler.h	370;"	d
PCL_INSTANTIATE_MyICP	include/pcl/registration/myicp.h	37;"	d
PCL_INSTANTIATE_MyICPNonLinear	include/pcl/registration/myicp.h	38;"	d
PCL_INSTANTIATE_PCLEuclideanRegionSegmentation	include/pcl/segmentation/region_segmentation.h	961;"	d
PCL_INSTANTIATE_Plane3D	include/pcl/types/plane3d.h	913;"	d
PCL_INSTANTIATE_PlanePolygonalization	include/pcl/segmentation/region_segmentation.h	955;"	d
PCL_INSTANTIATE_PlaneSegmentation	include/pcl/segmentation/planesegmentation.h	894;"	d
PCL_INSTANTIATE_ProbabilisticPlaneRegionSegmentation	include/pcl/segmentation/region_segmentation.h	960;"	d
PCL_INSTANTIATE_Riser	include/pcl/types/riser.h	80;"	d
PCL_INSTANTIATE_StairDetectionDemo	include/pcl/apps/impl/stairdetectiondemo.hpp	13;"	d
PCL_INSTANTIATE_StairDetectionDemo	include/pcl/apps/stairdetectiondemo.h	355;"	d
PCL_INSTANTIATE_StairDetectionLocal	include/pcl/apps/stairdetectionlocal.h	240;"	d
PCL_INSTANTIATE_Step	include/pcl/types/step.h	251;"	d
PCL_INSTANTIATE_Tread	include/pcl/types/tread.h	101;"	d
PCL_KDTREE_FIXED_NEIGHBORS_H_	include/pcl/kdtree/fixed_neighbors.h	39;"	d
PCL_KDTREE_KDTREE_IMPL_FIXED_NEIGHBORS_H_	include/pcl/kdtree/impl/fixed_neighbors.hpp	39;"	d
PCL_MYICP_H_	include/pcl/registration/myicp.h	2;"	d
PCL_NORMAL_INTEGRALIMG	include/pcl/opencv/cvutils.h	22;"	d
PCL_NORMAL_MP	include/pcl/opencv/cvutils.h	21;"	d
PCL_REGISTRATION_DIRK_H_	include/pcl/registration/registration_dirk.h	2;"	d
PCL_REGISTRATION_VISUALIZER_H_	include/pcl/visualization/registration_visualizer2.h	39;"	d
PCL_SEGMENTATION_REGION_SEGMENTATION_H_	include/pcl/segmentation/region_segmentation.h	46;"	d
PCL_SURFACE_FUNCTIONS_H_	include/pcl/surface/surface_functions.h	39;"	d
PCL_TIME_H_	include/pcl/common/time.h	37;"	d
PI_2	include/pcl/opencv/lswms.h	12;"	d
PLANE3D_H_	include/pcl/types/plane3d.h	11;"	d
PLANE3D_UTILS_H_	include/pcl/types/plane3d_utils.h	9;"	d
PLANEHISTOGRAM_H_	include/pcl/histogram/planehistogram.h	9;"	d
PLANESEGMENTATION_H_	include/pcl/segmentation/planesegmentation.h	11;"	d
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	104;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	116;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	122;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	131;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	146;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	149;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	164;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	167;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	176;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	179;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	107;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	116;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	128;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	134;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	143;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	158;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	92;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	95;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
POINTCLOUD_UTILS_H_	include/pcl/utils/pointcloud_utils.h	9;"	d
Plane3D	include/pcl/types/plane3d.h	/^      Plane3D ()$/;"	f	class:pcl::Plane3D
Plane3D	include/pcl/types/plane3d.h	/^      Plane3D (const Plane3D<PointT>& plane3d) :$/;"	f	class:pcl::Plane3D
Plane3D	include/pcl/types/plane3d.h	/^      Plane3D (size_t id)$/;"	f	class:pcl::Plane3D
Plane3D	include/pcl/types/plane3d.h	/^  class Plane3D : public pcl::PCLBase<PointT>$/;"	c	namespace:pcl
Plane3DComparator	include/pcl/types/plane3d_utils.h	/^        Plane3DComparator (int index)$/;"	f	struct:pcl::utils::Plane3DComparator
Plane3DComparator	include/pcl/types/plane3d_utils.h	/^    struct Plane3DComparator$/;"	s	namespace:pcl::utils
Plane3DVector	include/pcl/apps/stairdetectiondemo.h	/^      typedef std::vector<pcl::Plane3D<PointOut>, AllocOut> Plane3DVector;$/;"	t	class:pcl::StairDetectionDemo
Plane3DVector	include/pcl/apps/stairdetectionlocal.h	/^      typedef std::vector<pcl::Plane3D<PointOut>, AllocOut> Plane3DVector;$/;"	t	class:pcl::StairDetectionLocal
Plane3DVector	include/pcl/apps/stairdetector.h	/^      typedef std::vector<Plane3D<PointT> , Alloc> Plane3DVector;$/;"	t	class:pcl::StairDetector
Plane3DVector	include/pcl/io/globfitwriter.h	/^        typedef std::vector<pcl::Plane3D<PointT>, Alloc> Plane3DVector;$/;"	t	class:pcl::io::GlobfitWriter
Plane3DVector	include/pcl/models/globalmodel.h	/^      typedef std::vector<pcl::Plane3D<PointT>, Alloc> Plane3DVector;$/;"	t	class:pcl::GlobalModel
Plane3DVector	include/pcl/models/localmodel.h	/^      typedef std::vector<pcl::Plane3D<PointT>, Alloc> Plane3DVector;$/;"	t	class:pcl::LocalModel
Plane3DVector	include/pcl/models/localmodelfactory.h	/^      typedef std::vector<Plane3D<PointT>, Alloc> Plane3DVector;$/;"	t	class:pcl::LocalModelFactory
Plane3DVector	include/pcl/segmentation/planesegmentation.h	/^      typedef std::vector<Plane3D<PointOut>, Alloc> Plane3DVector;$/;"	t	class:pcl::PlaneSegmentation
PlaneAlloc	include/pcl/segmentation/planesegmentation.h	/^      typedef Eigen::aligned_allocator<Plane3D<PointOut> > PlaneAlloc;$/;"	t	class:pcl::PlaneSegmentation
PlaneBin	include/pcl/histogram/planehistogram.h	/^      typedef Bin<T, 0> PlaneBin;$/;"	t	class:pcl::PlaneHistogram
PlaneHistogram	include/pcl/histogram/planehistogram.h	/^      PlaneHistogram (int compareIndex)$/;"	f	class:pcl::PlaneHistogram
PlaneHistogram	include/pcl/histogram/planehistogram.h	/^  class PlaneHistogram : public AbstractHistogram<T, 1>$/;"	c	namespace:pcl
PlaneList	tests/test_fpe.cpp	/^typedef std::list<SmartPlane3D, Alloc> PlaneList;$/;"	t	file:
PlaneModel	include/pcl/common/incremental_plane_fitting.h	/^      PlaneModel() : normal (1,0,0), distance (0.0f) {}$/;"	f	class:pcl::PlaneModel
PlaneModel	include/pcl/common/incremental_plane_fitting.h	/^      PlaneModel(const Eigen::Vector3f& arg_normal, const float& arg_distance) : normal (arg_normal), distance (arg_distance) {}$/;"	f	class:pcl::PlaneModel
PlaneModel	include/pcl/common/incremental_plane_fitting.h	/^      PlaneModel(const Eigen::Vector3f& centroid, const Eigen::Matrix3f& covariance)$/;"	f	class:pcl::PlaneModel
PlaneModel	include/pcl/common/incremental_plane_fitting.h	/^      PlaneModel(const Eigen::Vector3f& normal, const Eigen::Vector3f& centroid)$/;"	f	class:pcl::PlaneModel
PlaneModel	include/pcl/common/incremental_plane_fitting.h	/^  class PlaneModel$/;"	c	namespace:pcl
PlaneModelIncremental	include/pcl/common/incremental_plane_fitting.h	/^      PlaneModelIncremental ()$/;"	f	class:pcl::PlaneModelIncremental
PlaneModelIncremental	include/pcl/common/incremental_plane_fitting.h	/^  class PlaneModelIncremental$/;"	c	namespace:pcl
PlanePolygonalization	include/pcl/segmentation/region_segmentation.h	/^        PlanePolygonalization ()$/;"	f	class:pcl::segmentation::PlanePolygonalization
PlanePolygonalization	include/pcl/segmentation/region_segmentation.h	/^    class PlanePolygonalization : public PCLBase<PointT>$/;"	c	namespace:pcl::segmentation
PlaneSegmentation	include/pcl/segmentation/planesegmentation.h	/^  class PCL_EXPORTS PlaneSegmentation : public pcl::PCLBase<PointT>$/;"	c	namespace:pcl
PlaneVector	tests/test_fpe.cpp	/^typedef std::vector<SmartPlane3D, Alloc> PlaneVector;$/;"	t	file:
PlanesVector	include/pcl/histogram/planehistogram.h	/^      typedef std::vector<T, Alloc> PlanesVector;$/;"	t	class:pcl::PlaneHistogram
PointCloud	include/pcl/apps/fast_meshing.h	/^      typedef pcl::PointCloud<PointInT> PointCloud;$/;"	t	class:pcl::FastMeshing
PointCloud	include/pcl/common/noise_model.h	/^      typedef pcl::PointCloud<PointT> PointCloud;$/;"	t	class:pcl::NoiseModel
PointCloud	include/pcl/common/noise_model.h	/^    typedef pcl::PointCloud<PointT> PointCloud;$/;"	t	class:pcl::QuadraticIsotropicNoise
PointCloud	include/pcl/kdtree/fixed_neighbors.h	/^	typedef typename ::pcl::search::Search<PointT>::PointCloud PointCloud;$/;"	t	class:pcl::FixedNeighbors
PointCloud	include/pcl/opencv/edgesdetector.h	/^        typedef pcl::PointCloud<PointIn> PointCloud;$/;"	t	class:pcl::opencv::EdgeDetector
PointCloud	include/pcl/segmentation/region_segmentation.h	/^        typedef pcl::PointCloud<PointT> PointCloud;$/;"	t	class:pcl::segmentation::PlanePolygonalization
PointCloud	include/pcl/segmentation/region_segmentation.h	/^        typedef pcl::PointCloud<PointT> PointCloud;$/;"	t	class:pcl::segmentation::RegionSegmentation
PointCloud	include/pcl/types/plane3d.h	/^      typedef pcl::PointCloud<PointT> PointCloud;$/;"	t	class:pcl::Plane3D
PointCloud	include/pcl/types/riser.h	/^      typedef pcl::PointCloud<PointT> PointCloud;$/;"	t	class:pcl::Riser
PointCloud	tests/icp_vis.cpp	/^typedef pcl::PointCloud<PointT> PointCloud;$/;"	t	file:
PointCloudConstPtr	include/pcl/apps/fast_meshing.h	/^      typedef typename PointCloud::ConstPtr PointCloudConstPtr;$/;"	t	class:pcl::FastMeshing
PointCloudConstPtr	include/pcl/common/noise_model.h	/^      typedef typename PointCloud::ConstPtr PointCloudConstPtr;$/;"	t	class:pcl::NoiseModel
PointCloudConstPtr	include/pcl/common/noise_model.h	/^    typedef typename PointCloud::ConstPtr PointCloudConstPtr;$/;"	t	class:pcl::QuadraticIsotropicNoise
PointCloudConstPtr	include/pcl/kdtree/fixed_neighbors.h	/^	typedef typename ::pcl::search::Search<PointT>::PointCloudConstPtr PointCloudConstPtr;$/;"	t	class:pcl::FixedNeighbors
PointCloudConstPtr	include/pcl/opencv/edgesdetector.h	/^        typedef typename PointCloud::ConstPtr PointCloudConstPtr;$/;"	t	class:pcl::opencv::EdgeDetector
PointCloudConstPtr	include/pcl/segmentation/planesegmentation.h	/^      typedef typename pcl::PointCloud<PointT>::ConstPtr PointCloudConstPtr;$/;"	t	class:pcl::PlaneSegmentation
PointCloudConstPtr	include/pcl/segmentation/region_segmentation.h	/^        typedef typename PointCloud::ConstPtr PointCloudConstPtr;$/;"	t	class:pcl::segmentation::PlanePolygonalization
PointCloudConstPtr	include/pcl/segmentation/region_segmentation.h	/^        typedef typename PointCloud::ConstPtr PointCloudConstPtr;$/;"	t	class:pcl::segmentation::RegionSegmentation
PointCloudConstPtr	include/pcl/types/plane3d.h	/^      typedef typename PointCloud::ConstPtr PointCloudConstPtr;$/;"	t	class:pcl::Plane3D
PointCloudConstPtr	include/pcl/types/riser.h	/^      typedef typename PointCloud::ConstPtr PointCloudConstPtr;$/;"	t	class:pcl::Riser
PointCloudConstPtr	include/pcl/types/tread.h	/^      typedef typename PointCloud<PointT>::ConstPtr PointCloudConstPtr;$/;"	t	class:pcl::Tread
PointCloudPtr	include/pcl/apps/fast_meshing.h	/^      typedef typename PointCloud::Ptr PointCloudPtr;$/;"	t	class:pcl::FastMeshing
PointCloudPtr	include/pcl/common/noise_model.h	/^      typedef typename PointCloud::Ptr PointCloudPtr;$/;"	t	class:pcl::NoiseModel
PointCloudPtr	include/pcl/common/noise_model.h	/^    typedef typename PointCloud::Ptr PointCloudPtr;$/;"	t	class:pcl::QuadraticIsotropicNoise
PointCloudPtr	include/pcl/segmentation/region_segmentation.h	/^        typedef typename PointCloud::Ptr PointCloudPtr;$/;"	t	class:pcl::segmentation::PlanePolygonalization
PointCloudPtr	include/pcl/segmentation/region_segmentation.h	/^        typedef typename PointCloud::Ptr PointCloudPtr;$/;"	t	class:pcl::segmentation::RegionSegmentation
PointCloudWithNormals	tests/icp_vis.cpp	/^typedef pcl::PointCloud<PointNormalT> PointCloudWithNormals;$/;"	t	file:
PointComparator	include/pcl/common/point_common.h	/^      PointComparator (int axis)$/;"	f	struct:pcl::PointComparator
PointComparator	include/pcl/common/point_common.h	/^  struct PointComparator$/;"	s	namespace:pcl
PointIn	src/pcl/apps/normalsvis.cpp	/^typedef pcl::PointXYZRGB PointIn;$/;"	t	file:
PointIn	src/pcl/apps/pcd_to_rgb.cpp	/^typedef pcl::PointXYZRGB PointIn;$/;"	t	file:
PointIn	src/pcl/apps/pdd.cpp	/^typedef pcl::PointXYZRGB PointIn;$/;"	t	file:
PointIn	src/pcl/apps/stairdetectorlocalXtion.cpp	/^typedef pcl::PointMoXYZRGB PointIn;$/;"	t	file:
PointIn	src/pcl/apps/stairdetectorlocalpcds.cpp	/^typedef pcl::PointMoXYZRGB PointIn;$/;"	t	file:
PointIn	src/pcl/apps/stairdetectorpcds.cpp	/^typedef pcl::PointMoXYZRGB PointIn;$/;"	t	file:
PointIn	tests/binding_test.cpp	/^typedef pcl::PointMoXYZRGB PointIn;$/;"	t	file:
PointIndicesConstPtr	include/pcl/segmentation/region_segmentation.h	/^        typedef PointIndices::ConstPtr PointIndicesConstPtr;$/;"	t	class:pcl::segmentation::RegionSegmentation
PointIndicesPtr	include/pcl/segmentation/region_segmentation.h	/^        typedef PointIndices::Ptr PointIndicesPtr;$/;"	t	class:pcl::segmentation::RegionSegmentation
PointMoTypes	include/pcl/common/fhg_point_types.h	147;"	d
PointMoXYZRGB	include/pcl/common/fhg_point_types.h	/^      inline PointMoXYZRGB ()$/;"	f	struct:pcl::PointMoXYZRGB
PointMoXYZRGB	include/pcl/common/fhg_point_types.h	/^      inline PointMoXYZRGB (uint8_t _r, uint8_t _g, uint8_t _b)$/;"	f	struct:pcl::PointMoXYZRGB
PointMoXYZRGB	include/pcl/common/fhg_point_types.h	/^    struct EIGEN_ALIGN16 PointMoXYZRGB : public _PointMoXYZRGB$/;"	s	namespace:pcl
PointMoXYZRGB	include/pcl/common/impl/fhg_point_types.hpp	/^    inline PointMoXYZRGB ()$/;"	f	struct:PointMoXYZRGB
PointMoXYZRGB	include/pcl/common/impl/fhg_point_types.hpp	/^    inline PointMoXYZRGB (uint8_t _r, uint8_t _g, uint8_t _b)$/;"	f	struct:PointMoXYZRGB
PointMoXYZRGB	include/pcl/common/impl/fhg_point_types.hpp	/^  struct EIGEN_ALIGN16 PointMoXYZRGB : public _PointMoXYZRGB$/;"	s
PointMoXYZRGBNormal	include/pcl/common/fhg_point_types.h	/^        PointMoXYZRGBNormal ()$/;"	f	struct:pcl::PointMoXYZRGBNormal
PointMoXYZRGBNormal	include/pcl/common/fhg_point_types.h	/^      struct PointMoXYZRGBNormal : public _PointMoXYZRGBNormal$/;"	s	namespace:pcl
PointMoXYZRGBNormal	include/pcl/common/impl/fhg_point_types.hpp	/^      PointMoXYZRGBNormal ()$/;"	f	struct:PointMoXYZRGBNormal
PointMoXYZRGBNormal	include/pcl/common/impl/fhg_point_types.hpp	/^    struct PointMoXYZRGBNormal : public _PointMoXYZRGBNormal$/;"	s
PointNormalT	tests/icp_vis.cpp	/^typedef pcl::PointNormal PointNormalT;$/;"	t	file:
PointOut	src/pcl/apps/pdd.cpp	/^typedef pcl::PointXYZRGBNormal PointOut;$/;"	t	file:
PointOut	src/pcl/apps/stairdetectorlocalXtion.cpp	/^typedef pcl::PointMoXYZRGBNormal PointOut;$/;"	t	file:
PointOut	src/pcl/apps/stairdetectorlocalpcds.cpp	/^typedef pcl::PointMoXYZRGBNormal PointOut;$/;"	t	file:
PointOut	src/pcl/apps/stairdetectorpcds.cpp	/^typedef pcl::PointMoXYZRGBNormal PointOut;$/;"	t	file:
PointOutPtr	include/pcl/segmentation/planesegmentation.h	/^      typedef typename pcl::PointCloud<PointOut>::Ptr PointOutPtr;$/;"	t	class:pcl::PlaneSegmentation
PointT	tests/icp_vis.cpp	/^typedef pcl::PointXYZ PointT;$/;"	t	file:
PointsDequeue	include/pcl/models/globalmodel.h	/^      typedef std::deque<PointT, Alloc> PointsDequeue;$/;"	t	class:pcl::GlobalModel
PointsVector	include/pcl/models/globalmodel.h	/^      typedef std::vector<PointT, Alloc> PointsVector;$/;"	t	class:pcl::GlobalModel
PointsVector	include/pcl/segmentation/planesegmentation.h	/^      typedef std::vector<PointT, Eigen::aligned_allocator<PointT> > PointsVector;$/;"	t	class:pcl::PlaneSegmentation
PointsVector	include/pcl/types/plane3d.h	/^      typedef std::vector<PointT, Eigen::aligned_allocator<PointT> > PointsVector;$/;"	t	class:pcl::Plane3D
PointsVector	tests/test_fpe.cpp	/^typedef std::vector<XYZD, Alloc> PointsVector;$/;"	t	file:
ProbabilisticPlaneRegionSegmentation	include/pcl/segmentation/region_segmentation.h	/^        ProbabilisticPlaneRegionSegmentation () :$/;"	f	class:pcl::segmentation::ProbabilisticPlaneRegionSegmentation
ProbabilisticPlaneRegionSegmentation	include/pcl/segmentation/region_segmentation.h	/^    class ProbabilisticPlaneRegionSegmentation : public RegionSegmentation<PointT>$/;"	c	namespace:pcl::segmentation
Ptr	include/pcl/common/noise_model.h	/^      typedef boost::shared_ptr< NoiseModel<PointT> > Ptr;$/;"	t	class:pcl::NoiseModel
Ptr	include/pcl/common/noise_model.h	/^      typedef boost::shared_ptr< QuadraticIsotropicNoise<PointT> > Ptr;$/;"	t	class:pcl::QuadraticIsotropicNoise
Ptr	include/pcl/kdtree/fixed_neighbors.h	/^	typedef boost::shared_ptr<FixedNeighbors<PointT> > Ptr;$/;"	t	class:pcl::FixedNeighbors
Ptr	include/pcl/models/localmodel.h	/^      typedef boost::shared_ptr<LocalModel<PointT> > Ptr;$/;"	t	class:pcl::LocalModel
Ptr	include/pcl/types/plane3d.h	/^      typedef boost::shared_ptr<Plane3D<PointT> > Ptr;$/;"	t	class:pcl::Plane3D
Ptr	include/pcl/types/riser.h	/^      typedef boost::shared_ptr<Riser<PointT> > Ptr;$/;"	t	class:pcl::Riser
Ptr	include/pcl/types/tread.h	/^      typedef boost::shared_ptr<Tread<PointT> > Ptr;$/;"	t	class:pcl::Tread
QuadraticIsotropicNoise	include/pcl/common/noise_model.h	/^      QuadraticIsotropicNoise() : a_(0.0f), b_(0.0f), c_(0.0f) {}$/;"	f	class:pcl::QuadraticIsotropicNoise
QuadraticIsotropicNoise	include/pcl/common/noise_model.h	/^      QuadraticIsotropicNoise(const float& a, const float& b, const float& c) : a_(a), b_(b), c_(c) {}$/;"	f	class:pcl::QuadraticIsotropicNoise
QuadraticIsotropicNoise	include/pcl/common/noise_model.h	/^  class QuadraticIsotropicNoise : public NoiseModel<PointT>$/;"	c	namespace:pcl
REGION_SEGMENTATION_HPP_	include/pcl/segmentation/impl/region_segmentation.hpp	9;"	d
RET_ERROR	include/pcl/opencv/lswms.h	/^enum {RET_OK, RET_ERROR};$/;"	e	enum:__anon1
RET_OK	include/pcl/opencv/lswms.h	/^enum {RET_OK, RET_ERROR};$/;"	e	enum:__anon1
RHO_STEP	include/pcl/opencv/linesegment2dhistogram.h	/^    float RHO_STEP;$/;"	m	class:pcl::LineSegment2DHistogram
RISER_H_	include/pcl/types/riser.h	9;"	d
RM	build/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RegionSegmentation	include/pcl/segmentation/region_segmentation.h	/^        RegionSegmentation () :$/;"	f	class:pcl::segmentation::RegionSegmentation
RegionSegmentation	include/pcl/segmentation/region_segmentation.h	/^    class RegionSegmentation : public PCLBase<PointT>$/;"	c	namespace:pcl::segmentation
RegionSegmentationBase	include/pcl/segmentation/region_segmentation.h	/^        typedef RegionSegmentation<PointT> RegionSegmentationBase;$/;"	t	class:pcl::segmentation::ApproximatePlaneRegionSegmentation
RegionSegmentationBase	include/pcl/segmentation/region_segmentation.h	/^        typedef RegionSegmentation<PointT> RegionSegmentationBase;$/;"	t	class:pcl::segmentation::AverageNormalRegionSegmentation
RegionSegmentationBase	include/pcl/segmentation/region_segmentation.h	/^        typedef RegionSegmentation<PointT> RegionSegmentationBase;$/;"	t	class:pcl::segmentation::InitialNormalRegionSegmentation
RegionSegmentationBase	include/pcl/segmentation/region_segmentation.h	/^        typedef RegionSegmentation<PointT> RegionSegmentationBase;$/;"	t	class:pcl::segmentation::LastNormalRegionSegmentation
RegionSegmentationBase	include/pcl/segmentation/region_segmentation.h	/^        typedef RegionSegmentation<PointT> RegionSegmentationBase;$/;"	t	class:pcl::segmentation::PCLEuclideanRegionSegmentation
RegionSegmentationBase	include/pcl/segmentation/region_segmentation.h	/^        typedef RegionSegmentation<PointT> RegionSegmentationBase;$/;"	t	class:pcl::segmentation::ProbabilisticPlaneRegionSegmentation
RegistrationVisualizer2	include/pcl/visualization/registration_visualizer2.h	/^      RegistrationVisualizer2 () :$/;"	f	class:pcl::RegistrationVisualizer2
RegistrationVisualizer2	include/pcl/visualization/registration_visualizer2.h	/^  class RegistrationVisualizer2$/;"	c	namespace:pcl
Riser	include/pcl/types/riser.h	/^      Riser ()$/;"	f	class:pcl::Riser
Riser	include/pcl/types/riser.h	/^      Riser (const Riser<PointT>& riser) :$/;"	f	class:pcl::Riser
Riser	include/pcl/types/riser.h	/^      Riser (int id) :$/;"	f	class:pcl::Riser
Riser	include/pcl/types/riser.h	/^    class Riser : public Plane3D<PointT>$/;"	c	namespace:pcl
RowBin	include/pcl/opencv/linesegment2dhistogram.h	/^    RowBin ()$/;"	f	class:pcl::RowBin
RowBin	include/pcl/opencv/linesegment2dhistogram.h	/^    RowBin (const RowBin& bin)$/;"	f	class:pcl::RowBin
RowBin	include/pcl/opencv/linesegment2dhistogram.h	/^    RowBin (int id, float min, float max)$/;"	f	class:pcl::RowBin
RowBin	include/pcl/opencv/linesegment2dhistogram.h	/^  class RowBin$/;"	c	namespace:pcl
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SMALL_NUM	include/pcl/common/linesegment2d_common.h	15;"	d
STAIRDETECTIONDEMO_HPP_	include/pcl/apps/impl/stairdetectiondemo.hpp	9;"	d
STAIRDETECTIONDEMO_H_	include/pcl/apps/stairdetectiondemo.h	9;"	d
STAIRDETECTIONDEMO_H_	include/pcl/apps/stairdetectionlocal.h	9;"	d
STAIRDETECTOR_H_	include/pcl/apps/stairdetector.h	9;"	d
STEP_H_	include/pcl/types/step.h	9;"	d
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
SURFACE_UTILS_H_	include/pcl/surface/surface_utils.h	9;"	d
ScopeTime	include/pcl/common/time.h	/^      inline ScopeTime (const char* title)$/;"	f	class:pcl::ScopeTime
ScopeTime	include/pcl/common/time.h	/^  class ScopeTime : public StopWatch$/;"	c	namespace:pcl
SearchTree	include/pcl/apps/fast_meshing.h	/^      typedef typename pcl::KdTree<PointInT> SearchTree;$/;"	t	class:pcl::FastMeshing
SimpleOpenNIViewer	src/pcl/apps/stairdetectorlocalXtion.cpp	/^                SimpleOpenNIViewer () : viewer ("PCL OpenNI Viewer"),frame_id(0),inCloud(new pcl::PointCloud<pcl::PointXYZRGB>),inCloud_(new pcl::PointCloud<pcl::PointXYZRGB>){tmr.reset();}$/;"	f	class:SimpleOpenNIViewer
SimpleOpenNIViewer	src/pcl/apps/stairdetectorlocalXtion.cpp	/^class SimpleOpenNIViewer$/;"	c	file:
SmartLine3D	tests/test_fpe.cpp	/^typedef pcl::SmartLine3D<XYZD> SmartLine3D;$/;"	t	file:
SmartLineVector	tests/test_fpe.cpp	/^typedef std::vector<SmartLine3D, Alloc> SmartLineVector;$/;"	t	file:
SmartPlane3D	tests/test_fpe.cpp	/^typedef pcl::SmartPlane3D<XYZD> SmartPlane3D;$/;"	t	file:
StairDetectionDemo	include/pcl/apps/stairdetectiondemo.h	/^      StairDetectionDemo() {$/;"	f	class:pcl::StairDetectionDemo
StairDetectionDemo	include/pcl/apps/stairdetectiondemo.h	/^  class StairDetectionDemo$/;"	c	namespace:pcl
StairDetectionLocal	include/pcl/apps/stairdetectionlocal.h	/^      StairDetectionLocal() {$/;"	f	class:pcl::StairDetectionLocal
StairDetectionLocal	include/pcl/apps/stairdetectionlocal.h	/^  class StairDetectionLocal$/;"	c	namespace:pcl
StairDetector	include/pcl/apps/stairdetector.h	/^    class StairDetector$/;"	c	namespace:pcl
Step	include/pcl/types/step.h	/^      Step ()$/;"	f	class:pcl::Step
Step	include/pcl/types/step.h	/^      Step (const Step<PointT>& step)$/;"	f	class:pcl::Step
Step	include/pcl/types/step.h	/^      Step (size_t id)$/;"	f	class:pcl::Step
Step	include/pcl/types/step.h	/^  class Step$/;"	c	namespace:pcl
StepsVector	include/pcl/apps/stairdetector.h	/^      typedef std::vector<Step<PointT> , Alloc> StepsVector;$/;"	t	class:pcl::StairDetector
StepsVector	include/pcl/io/globfitwriter.h	/^        typedef std::vector<Step<PointT>, Alloc> StepsVector;$/;"	t	class:pcl::io::GlobfitWriter
StepsVector	include/pcl/models/globalmodel.h	/^      typedef std::vector<Step<PointT>, Alloc> StepsVector;$/;"	t	class:pcl::GlobalModel
StepsVector	include/pcl/models/localmodel.h	/^      typedef std::vector<Step<PointT>, Alloc> StepsVector;$/;"	t	class:pcl::LocalModel
StepsVector	include/pcl/models/localmodelfactory.h	/^      typedef std::vector<Step<PointT>, Alloc> StepsVector;$/;"	t	class:pcl::LocalModelFactory
StepsVector	include/pcl/models/modelsampler.h	/^      typedef std::vector<Step<PointT>, Alloc> StepsVector;$/;"	t	class:pcl::ModelSampler
StopWatch	include/pcl/common/time.h	/^      StopWatch()$/;"	f	class:pcl::StopWatch
StopWatch	include/pcl/common/time.h	/^  class StopWatch$/;"	c	namespace:pcl
THETA_STEP	include/pcl/opencv/linesegment2dhistogram.h	/^    float THETA_STEP;$/;"	m	class:pcl::LineSegment2DHistogram
TIME_H_	include/pcl/common/motime.h	9;"	d
TREAD_H_	include/pcl/types/tread.h	9;"	d
Test_FPE	tests/test_fpe.cpp	/^class Test_FPE$/;"	c	file:
Timer	src/pcl/apps/stairdetectorlocalXtion.cpp	/^    Timer() { clock_gettime(CLOCK_REALTIME, &beg_); }$/;"	f	class:Timer
Timer	src/pcl/apps/stairdetectorlocalXtion.cpp	/^class Timer$/;"	c	file:
Tread	include/pcl/types/tread.h	/^      Tread () :$/;"	f	class:pcl::Tread
Tread	include/pcl/types/tread.h	/^      Tread (const Tread<PointT>& tread) :$/;"	f	class:pcl::Tread
Tread	include/pcl/types/tread.h	/^      Tread (int id) :$/;"	f	class:pcl::Tread
Tread	include/pcl/types/tread.h	/^    class Tread : public Plane3D<PointT>$/;"	c	namespace:pcl
UNASSIGNED	include/pcl/segmentation/region_segmentation.h	/^        static const int UNASSIGNED = -1;$/;"	m	class:pcl::segmentation::RegionSegmentation
VectorClusterIndices	include/pcl/segmentation/region_segmentation.h	/^    typedef std::vector<ClusterIndices> VectorClusterIndices;$/;"	t	namespace:pcl::segmentation
XYZD	tests/test_fpe.cpp	/^typedef pcl::PointXYZ XYZD;$/;"	t	file:
_DIR_POINT	include/pcl/opencv/lswms.h	/^	_DIR_POINT()$/;"	f	struct:_DIR_POINT
_DIR_POINT	include/pcl/opencv/lswms.h	/^	_DIR_POINT(cv::Point _pt, float _vx, float _vy)$/;"	f	struct:_DIR_POINT
_DIR_POINT	include/pcl/opencv/lswms.h	/^typedef struct _DIR_POINT$/;"	s
_IBin	include/pcl/histogram/abstract_histogram.h	/^    _IBin ()$/;"	f	struct:pcl::_IBin
_IBin	include/pcl/histogram/abstract_histogram.h	/^    _IBin (const _IBin& bin)$/;"	f	struct:pcl::_IBin
_IBin	include/pcl/histogram/abstract_histogram.h	/^    _IBin (int index, float rangeMin, float rangeMax)$/;"	f	struct:pcl::_IBin
_IBin	include/pcl/histogram/abstract_histogram.h	/^  struct _IBin$/;"	s	namespace:pcl
_PointMoXYZRGB	include/pcl/common/fhg_point_types.h	/^  struct EIGEN_ALIGN16 _PointMoXYZRGB$/;"	s	namespace:pcl
_PointMoXYZRGB	include/pcl/common/impl/fhg_point_types.hpp	/^struct EIGEN_ALIGN16 _PointMoXYZRGB$/;"	s
_PointMoXYZRGBNormal	include/pcl/common/fhg_point_types.h	/^    struct EIGEN_ALIGN16 _PointMoXYZRGBNormal$/;"	s	namespace:pcl
_PointMoXYZRGBNormal	include/pcl/common/impl/fhg_point_types.hpp	/^  struct EIGEN_ALIGN16 _PointMoXYZRGBNormal$/;"	s
__A	include/pcl/opencv/lswms.h	/^	cv::Mat __A;			\/\/ Map of angles$/;"	m	class:LSWMS
__G	include/pcl/opencv/lswms.h	/^	cv::Mat __G, __Gx, __Gy;	\/\/ Map of probability of line segments$/;"	m	class:LSWMS
__Gx	include/pcl/opencv/lswms.h	/^	cv::Mat __G, __Gx, __Gy;	\/\/ Map of probability of line segments$/;"	m	class:LSWMS
__Gy	include/pcl/opencv/lswms.h	/^	cv::Mat __G, __Gx, __Gy;	\/\/ Map of probability of line segments$/;"	m	class:LSWMS
__LSWMS_H__	include/pcl/opencv/lswms.h	2;"	d
__M	include/pcl/opencv/lswms.h	/^	cv::Mat __M;			\/\/ Map of visited pixels$/;"	m	class:LSWMS
__N	include/pcl/opencv/lswms.h	/^	int __R, __N;$/;"	m	class:LSWMS
__R	include/pcl/opencv/lswms.h	/^	int __R, __N;$/;"	m	class:LSWMS
__imAux	include/pcl/opencv/lswms.h	/^	cv::Mat __imAux;		\/\/ For debugging$/;"	m	class:LSWMS
__imHeight	include/pcl/opencv/lswms.h	/^	int __imWidth, __imHeight;$/;"	m	class:LSWMS
__imPadSize	include/pcl/opencv/lswms.h	/^	cv::Size __imSize, __imPadSize;$/;"	m	class:LSWMS
__imSize	include/pcl/opencv/lswms.h	/^	cv::Size __imSize, __imPadSize;$/;"	m	class:LSWMS
__imWidth	include/pcl/opencv/lswms.h	/^	int __imWidth, __imHeight;$/;"	m	class:LSWMS
__img	include/pcl/opencv/lswms.h	/^	cv::Mat __img, __imgPad;$/;"	m	class:LSWMS
__imgPad	include/pcl/opencv/lswms.h	/^	cv::Mat __img, __imgPad;$/;"	m	class:LSWMS
__imgPadROI	include/pcl/opencv/lswms.h	/^	cv::Mat __imgPadROI;$/;"	m	class:LSWMS
__lSeg	include/pcl/opencv/lswms.h	/^	LSEG __lSeg;$/;"	m	class:LSWMS
__margin	include/pcl/opencv/lswms.h	/^	float __margin;$/;"	m	class:LSWMS
__meanG	include/pcl/opencv/lswms.h	/^	int __meanG;$/;"	m	class:LSWMS
__numMaxLSegs	include/pcl/opencv/lswms.h	/^	int __numMaxLSegs;$/;"	m	class:LSWMS
__roiRect	include/pcl/opencv/lswms.h	/^	cv::Rect __roiRect;$/;"	m	class:LSWMS
__sampleIterator	include/pcl/opencv/lswms.h	/^	std::vector<int> __sampleIterator;$/;"	m	class:LSWMS
__seeds	include/pcl/opencv/lswms.h	/^	std::vector<cv::Point> __seeds;$/;"	m	class:LSWMS
__verbose	include/pcl/opencv/lswms.h	/^	bool __verbose;	$/;"	m	class:LSWMS
_unused	include/pcl/common/fhg_point_types.h	/^                uint8_t _unused;$/;"	m	struct:pcl::_PointMoXYZRGBNormal::__anon12::__anon13::__anon14::__anon15
_unused	include/pcl/common/fhg_point_types.h	/^            uint8_t _unused;$/;"	m	struct:pcl::_PointMoXYZRGB::__anon9::__anon10::__anon11
_unused	include/pcl/common/impl/fhg_point_types.hpp	/^              uint8_t _unused;$/;"	m	struct:_PointMoXYZRGBNormal::__anon5::__anon6::__anon7::__anon8
_unused	include/pcl/common/impl/fhg_point_types.hpp	/^          uint8_t _unused;$/;"	m	struct:_PointMoXYZRGB::__anon2::__anon3::__anon4
a_	include/pcl/common/noise_model.h	/^      float a_, b_, c_;$/;"	m	class:pcl::QuadraticIsotropicNoise
addData	include/pcl/histogram/planehistogram.h	/^      void addData ()$/;"	f	class:pcl::PlaneHistogram
addDiscardedPoints	include/pcl/segmentation/planesegmentation.h	/^      void addDiscardedPoints(Plane3DVector& vec) {$/;"	f	class:pcl::PlaneSegmentation
addImage	include/pcl/opencv/imageconcat.h	/^        inline void addImage (const cv::Mat& img)$/;"	f	class:pcl::opencv::ImageConcatenator
addLine	include/pcl/histogram/linesegment3dhistogram.h	/^      addLine (LineSegment3D<PointT>& line)$/;"	f	class:pcl::LineSegment3DHistogram
addLine	include/pcl/histogram/linesegmenthistogram.h	/^      addLine (LineSegment3D<PointT> line)$/;"	f	class:pcl::LineSegmentBin
addLine	include/pcl/histogram/linesegmenthistogram.h	/^      addLine (LineSegment3D<PointT> line)$/;"	f	class:pcl::LineSegmentHistogram
addLine	include/pcl/opencv/linesegment2dhistogram.h	/^    addLine (LineSegment2D line)$/;"	f	class:pcl::ColumnBin
addLine	include/pcl/opencv/linesegment2dhistogram.h	/^    addLine (LineSegment2D line)$/;"	f	class:pcl::LineSegment2DHistogram
addLines	include/pcl/histogram/linesegment3dhistogram.h	/^      addLines (LineVector& inLines)$/;"	f	class:pcl::LineSegment3DHistogram
addLines	include/pcl/histogram/linesegmenthistogram.h	/^      addLines (LineVector lines)$/;"	f	class:pcl::LineSegmentHistogram
addLines	include/pcl/opencv/linesegment2dhistogram.h	/^    addLines (LineVector lines)$/;"	f	class:pcl::LineSegment2DHistogram
addLinesToHistogram	include/pcl/histogram/linesegment3dhistogram.h	/^      addLinesToHistogram ()$/;"	f	class:pcl::LineSegment3DHistogram
addLinesToHistogram	include/pcl/histogram/linesegmenthistogram.h	/^      addLinesToHistogram ()$/;"	f	class:pcl::LineSegmentHistogram
addLinesToHistogram	include/pcl/opencv/linesegment2dhistogram.h	/^    addLinesToHistogram ()$/;"	f	class:pcl::LineSegment2DHistogram
addLocalModel	include/pcl/models/globalmodel.h	/^      void addLocalModel (LocalModel<PointT> localModel)$/;"	f	class:pcl::GlobalModel
addMissingPlanes	include/pcl/models/localmodelfactory.h	/^      void addMissingPlanes (LocalModel<PointT>& model)$/;"	f	class:pcl::LocalModelFactory
addNeighbor	include/pcl/common/mesh_utilities.h	/^  addNeighbor(pcl::Neighborhood& neighborhood, const int& neighbor)$/;"	f	namespace:pcl
addNeighborAllowingDuplicates	include/pcl/common/mesh_utilities.h	/^  addNeighborAllowingDuplicates(pcl::Neighborhood& neighborhood, const int& neighbor)$/;"	f	namespace:pcl
addPlane	include/pcl/apps/stairdetector.h	/^      addPlane (Plane3D<PointT>& inPlane)$/;"	f	class:pcl::StairDetector
addPlane	include/pcl/histogram/planehistogram.h	/^      void addPlane (const T& plane)$/;"	f	class:pcl::PlaneHistogram
addPlaneToCloud	tests/test_fpe.cpp	/^  addPlaneToCloud (pcl::PointCloud<pcl::PointXYZRGB>& cloud, SmartPlane3D plane, float color, bool divideby1000)$/;"	f	class:Test_FPE
addPlanes	include/pcl/apps/stairdetector.h	/^      addPlanes (Plane3DVector& inPlanes)$/;"	f	class:pcl::StairDetector
addPlanes	include/pcl/histogram/planehistogram.h	/^      void addPlanes (PlanesVector planes)$/;"	f	class:pcl::PlaneHistogram
addPlanes	include/pcl/models/localmodelfactory.h	/^      void addPlanes (Plane3DVector planes)$/;"	f	class:pcl::LocalModelFactory
addPoint	include/pcl/common/incremental_plane_fitting.h	/^      addPoint (const PointT& point, float weight = 1.0f)$/;"	f	class:pcl::PlaneModelIncremental
addPoint	include/pcl/common/incremental_plane_fitting.h	/^      addPoint (const float& x, const float& y, const float& z, float weight = 1.0f )$/;"	f	class:pcl::PlaneModelIncremental
addStep	include/pcl/models/localmodel.h	/^      void addStep (const Step<PointT>& step)$/;"	f	class:pcl::LocalModel
addWalls	include/pcl/models/localmodelfactory.h	/^      void addWalls (const Plane3DVector& walls)$/;"	f	class:pcl::LocalModelFactory
allowMultiAssignments	include/pcl/segmentation/region_segmentation.h	/^        inline void allowMultiAssignments (bool allow_multi_assignments)$/;"	f	class:pcl::segmentation::RegionSegmentation
allow_multi_assignments_	include/pcl/segmentation/region_segmentation.h	/^        bool allow_multi_assignments_;$/;"	m	class:pcl::segmentation::RegionSegmentation
angle	include/pcl/segmentation/planesegmentation.h	/^      float angle;$/;"	m	class:pcl::PlaneSegmentation
angle_tolerance_	include/pcl/segmentation/region_segmentation.h	/^        float angle_tolerance_;$/;"	m	class:pcl::segmentation::RegionSegmentation
areCloseNeighbors	include/pcl/histogram/planehistogram.h	/^      bool areCloseNeighbors (const Plane3D<PointT>& plane1, const Plane3D<PointT>& plane2)$/;"	f	class:pcl::PlaneHistogram
areParallel	include/pcl/common/linesegment3d_common.h	/^    areParallel (const LineSegment3D<PointT>& line1, const LineSegment3D<PointT>& line2, float toleranceAngle = 10)$/;"	f	namespace:pcl
areParallel	include/pcl/common/math.h	/^  areParallel (const Eigen::Vector3f &v1, const Eigen::Vector3f &v2, float toleranceAngle)$/;"	f	namespace:pcl
avgTranslation	include/pcl/models/globalmodel.h	/^      PointsDequeue avgTranslation;$/;"	m	class:pcl::GlobalModel
axis	include/pcl/common/point_common.h	/^      int axis;$/;"	m	struct:pcl::PointComparator
b	include/pcl/common/fhg_point_types.h	/^                uint8_t b;$/;"	m	struct:pcl::_PointMoXYZRGBNormal::__anon12::__anon13::__anon14::__anon15
b	include/pcl/common/fhg_point_types.h	/^            uint8_t b;$/;"	m	struct:pcl::_PointMoXYZRGB::__anon9::__anon10::__anon11
b	include/pcl/common/impl/fhg_point_types.hpp	/^              uint8_t b;$/;"	m	struct:_PointMoXYZRGBNormal::__anon5::__anon6::__anon7::__anon8
b	include/pcl/common/impl/fhg_point_types.hpp	/^          uint8_t b;$/;"	m	struct:_PointMoXYZRGB::__anon2::__anon3::__anon4
b_	include/pcl/common/noise_model.h	/^      float a_, b_, c_;$/;"	m	class:pcl::QuadraticIsotropicNoise
bbox	include/pcl/types/plane3d.h	/^      BoundingBox<PointT> bbox;$/;"	m	class:pcl::Plane3D
beg_	src/pcl/apps/stairdetectorlocalXtion.cpp	/^    timespec beg_, end_;$/;"	m	class:Timer	file:
bins	include/pcl/histogram/abstract_histogram.h	/^      std::vector<Bin<T, (nest - 1)> , Alloc> bins;$/;"	m	struct:pcl::Bin
bins	include/pcl/histogram/abstract_histogram.h	/^      std::vector<Bin<T, dimension> > bins;$/;"	m	class:pcl::AbstractHistogram
bins	include/pcl/histogram/linesegmenthistogram.h	/^      BinsVector bins;$/;"	m	class:pcl::LineSegmentHistogram
bottomLeft	include/pcl/types/boundingbox.h	/^      PointT topLeft, topRight, bottomLeft, bottomRight;$/;"	m	class:pcl::BoundingBox
bottomRight	include/pcl/types/boundingbox.h	/^      PointT topLeft, topRight, bottomLeft, bottomRight;$/;"	m	class:pcl::BoundingBox
buildStairCase	include/pcl/models/localmodelfactory.h	/^      StepsVector buildStairCase (StepsVector steps)$/;"	f	class:pcl::LocalModelFactory
buildWalls	include/pcl/models/model_utils.h	/^      buildWalls (const std::vector<pcl::LineSegment3D<PointT>, Eigen::aligned_allocator<PointT> >& inlines)$/;"	f	namespace:pcl::model
c_	include/pcl/common/noise_model.h	/^      float a_, b_, c_;$/;"	m	class:pcl::QuadraticIsotropicNoise
calcAbsoluteAngle	include/pcl/common/point_common.h	/^  inline double calcAbsoluteAngle (Eigen::Vector3d vec1, Eigen::Vector3d vec2)$/;"	f	namespace:pcl
calcAbsoluteAngle	include/pcl/common/point_common.h	/^  inline double calcAbsoluteAngle (Eigen::Vector3f vec1, Eigen::Vector3f vec2)$/;"	f	namespace:pcl
calcAngle2D	include/pcl/common/math.h	/^  calcAngle2D (const Eigen::Vector2f &v1, const Eigen::Vector2f &v2)$/;"	f	namespace:pcl
calcAngle2DDegree	include/pcl/common/math.h	/^  calcAngle2DDegree (const Eigen::Vector2f &v1, const Eigen::Vector2f &v2)$/;"	f	namespace:pcl
calcAngle3D	include/pcl/common/math.h	/^  calcAngle3D (const Eigen::Vector3f &v1, const Eigen::Vector3f &v2)$/;"	f	namespace:pcl
calcAngle3DDegree	include/pcl/common/math.h	/^  calcAngle3DDegree (const Eigen::Vector3f &v1, const Eigen::Vector3f &v2)$/;"	f	namespace:pcl
calcAnglebetweenVectors	include/pcl/common/point_common.h	/^  inline double calcAnglebetweenVectors (Eigen::Vector3d vec1, Eigen::Vector3d vec2)$/;"	f	namespace:pcl
calcAnglebetweenVectors	include/pcl/common/point_common.h	/^  inline double calcAnglebetweenVectors (Eigen::Vector3f vec1, Eigen::Vector3f vec2)$/;"	f	namespace:pcl
calcAvgCenters	include/pcl/types/plane3d_utils.h	/^    Eigen::Vector3f calcAvgCenters (const std::vector<Plane3D<PointT>, Eigen::aligned_allocator<PointT> >& planes)$/;"	f	namespace:pcl::utils
calcBBox	include/pcl/types/plane3d.h	/^      inline void calcBBox ()$/;"	f	class:pcl::Plane3D
calcConvexHull	include/pcl/common/pcl_commons.h	/^    calcConvexHull (const typename pcl::PointCloud<PointT>::ConstPtr input)$/;"	f	class:pcl::std
calcDistance	include/pcl/common/commons.h	/^    calcDistance (PointT p1, PointT p2)$/;"	f	namespace:pcl
calcLineModel	include/pcl/types/impl/linesegment3d.hpp	/^void pcl::LineSegment3D<PointT>::calcLineModel ()$/;"	f	class:pcl::LineSegment3D
calcLineModel	include/pcl/types/linesegment3d.h	/^      calcLineModel ()$/;"	f	class:pcl::LineSegment3D
calculate	include/pcl/histogram/linesegmenthistogram.h	/^      calculate ()$/;"	f	class:pcl::LineSegmentHistogram
calculate	include/pcl/opencv/linesegment2dhistogram.h	/^    calculate ()$/;"	f	class:pcl::LineSegment2DHistogram
calculateAveragePoint	include/pcl/models/globalmodel.h	/^      PointT calculateAveragePoint (const PointsDequeue& points)$/;"	f	class:pcl::GlobalModel
calculateCameraHeight	include/pcl/apps/stairdetectiondemo.h	/^      void calculateCameraHeight (const LocalModel<PointOut>& model)$/;"	f	class:pcl::StairDetectionDemo
calculateCameraHeight	include/pcl/apps/stairdetectionlocal.h	/^      void calculateCameraHeight (const LocalModel<PointOut>& model)$/;"	f	class:pcl::StairDetectionLocal
calculateCenter	include/pcl/types/plane3d.h	/^      void calculateCenter ()$/;"	f	class:pcl::Plane3D
calculateCenter	include/pcl/types/step.h	/^      void calculateCenter ()$/;"	f	class:pcl::Step
calculateCenterOfMass	include/pcl/models/localmodel.h	/^      Eigen::Vector3f calculateCenterOfMass ()$/;"	f	class:pcl::LocalModel
calculateCentroid	include/pcl/opencv/linesegment2d.h	/^    calculateCentroid ()$/;"	f	class:pcl::LineSegment2D
calculateCentroid	include/pcl/types/impl/linesegment3d.hpp	/^void pcl::LineSegment3D<PointT>::calculateCentroid ()$/;"	f	class:pcl::LineSegment3D
calculateCentroid	include/pcl/types/linesegment3d.h	/^      calculateCentroid ()$/;"	f	class:pcl::LineSegment3D
calculateColorFromNormal	include/pcl/opencv/cvutils.h	/^    inline float calculateColorFromNormal (float value)$/;"	f	namespace:pcl::opencv
calculateColorFromNormal	include/pcl/opencv/cvutils.h	/^    inline void calculateColorFromNormal (pcl::Normal normal, float &r, float &g, float &b)$/;"	f	namespace:pcl::opencv
calculateDimensions	include/pcl/types/plane3d.h	/^      inline void calculateDimensions ()$/;"	f	class:pcl::Plane3D
calculateIntensity	include/pcl/opencv/cvutils.h	/^    inline float calculateIntensity (float depth)$/;"	f	namespace:pcl::opencv
calculateIntensity	include/pcl/opencv/cvutils.h	/^    inline float calculateIntensity (float depth, float min, float max)$/;"	f	namespace:pcl::opencv
calculateLineModel	include/pcl/opencv/linesegment2d.h	/^    calculateLineModel ()$/;"	f	class:pcl::LineSegment2D
calculateNormal	include/pcl/opencv/linesegment2d.h	/^    calculateNormal ()$/;"	f	class:pcl::LineSegment2D
calculateNormal	include/pcl/types/impl/linesegment3d.hpp	/^void pcl::LineSegment3D<PointT>::calculateNormal ()$/;"	f	class:pcl::LineSegment3D
calculateNormal	include/pcl/types/linesegment3d.h	/^      calculateNormal ()$/;"	f	class:pcl::LineSegment3D
calculateNormal	include/pcl/types/plane3d.h	/^      void calculateNormal ()$/;"	f	class:pcl::Plane3D
calculateOrientations	include/pcl/opencv/linesegment2dhistogram.h	/^    calculateOrientations ()$/;"	f	class:pcl::LineSegment2DHistogram
calculatePlanes	include/pcl/segmentation/planesegmentation.h	/^      void calculatePlanes (std::vector<std::vector<int, IntAlloc>, IntAlloc> point_to_cluster, Plane3DVector& planes)$/;"	f	class:pcl::PlaneSegmentation
calculateRhoWeight	include/pcl/opencv/linesegment2dhistogram.h	/^    calculateRhoWeight (const RowBin& bin, LineSegment2D& line)$/;"	f	class:pcl::LineSegment2DHistogram
calculateRhoWeights	include/pcl/opencv/linesegment2dhistogram.h	/^    calculateRhoWeights ()$/;"	f	class:pcl::LineSegment2DHistogram
calculateThetaR	include/pcl/opencv/linesegment2d.h	/^    calculateThetaR ()$/;"	f	class:pcl::LineSegment2D
calculateThetaWeight	include/pcl/opencv/linesegment2dhistogram.h	/^    calculateThetaWeight (const ColumnBin& bin, LineSegment2D& line)$/;"	f	class:pcl::LineSegment2DHistogram
calculateThetaWeights	include/pcl/opencv/linesegment2dhistogram.h	/^    calculateThetaWeights ()$/;"	f	class:pcl::LineSegment2DHistogram
calculateWeights	include/pcl/opencv/linesegment2dhistogram.h	/^    calculateWeights (int row, int col)$/;"	f	class:pcl::LineSegment2DHistogram
callback	tests/test_fpe.cpp	/^callback (const sensor_msgs::PointCloud2ConstPtr& cloudBlob)$/;"	f
cameraAngle	include/pcl/apps/stairdetectiondemo.h	/^      float cameraAngle, cameraHeight;$/;"	m	class:pcl::StairDetectionDemo
cameraAngle	include/pcl/apps/stairdetectionlocal.h	/^      float cameraAngle, cameraHeight;$/;"	m	class:pcl::StairDetectionLocal
cameraHeight	include/pcl/apps/stairdetectiondemo.h	/^      float cameraAngle, cameraHeight;$/;"	m	class:pcl::StairDetectionDemo
cameraHeight	include/pcl/apps/stairdetectionlocal.h	/^      float cameraAngle, cameraHeight;$/;"	m	class:pcl::StairDetectionLocal
cameraToworld	include/pcl/types/impl/linesegment3d.hpp	/^void pcl::LineSegment3D<PointT>::cameraToworld ()$/;"	f	class:pcl::LineSegment3D
cameraToworld	include/pcl/types/linesegment3d.h	/^      cameraToworld ()$/;"	f	class:pcl::LineSegment3D
cameraToworld	include/pcl/types/plane3d_utils.h	/^    void cameraToworld (Plane3D<PointT>& plane)$/;"	f	namespace:pcl::utils
cameraToworld	include/pcl/types/plane3d_utils.h	/^    void cameraToworld (std::vector<Plane3D<PointT>, Eigen::aligned_allocator<PointT> >& planes)$/;"	f	namespace:pcl::utils
cameraToworld	include/pcl/utils/pointcloud_utils.h	/^    cameraToworld (pcl::PointCloud<PointT>& cloud)$/;"	f	namespace:pcl
camera_tilt	tests/test_fpe.cpp	/^  pcl::RobotPosition robotPosition;int pos;int camera_tilt;$/;"	m	class:Test_FPE	file:
cdst	src/pcl/apps/smooth.cpp	/^Mat dst, cdst, mat_hom, mat_gauss, mat_median, mat_bi;$/;"	v
center	include/pcl/types/linesegment3d.h	/^      Eigen::Vector3f normal, center;int id;$/;"	m	class:pcl::LineSegment3D
center	include/pcl/types/plane3d.h	/^      Eigen::Vector3f center, normal;$/;"	m	class:pcl::Plane3D
center	include/pcl/types/step.h	/^      Eigen::Vector3f center;$/;"	m	class:pcl::Step
changeImageColor	include/pcl/opencv/cvutils.h	/^    void changeImageColor (cv::Mat& img, int old_r, int old_g, int old_b, int r, int g, int b)$/;"	f	namespace:pcl::opencv
clearLastAddedPoints	include/pcl/models/globalmodel.h	/^      void clearLastAddedPoints ()$/;"	f	class:pcl::GlobalModel
cloud	include/pcl/types/linesegment3d.h	/^      typename pcl::PointCloud<PointT>::Ptr cloud, inputCloud;$/;"	m	class:pcl::LineSegment3D
cloud	src/pcl/apps/stairdetectorlocalXtion.cpp	/^pcl::PointCloud<PointIn> cloud;$/;"	v
cloud	src/pcl/apps/stairdetectorlocalpcds.cpp	/^pcl::PointCloud<PointIn> cloud;$/;"	v
cloud	src/pcl/apps/stairdetectorpcds.cpp	/^pcl::PointCloud<PointIn> cloud;$/;"	v
cloud	tests/icp_vis.cpp	/^    PointCloud::Ptr cloud;$/;"	m	struct:PCD	file:
cloud2	include/pcl/segmentation/planesegmentation.h	/^      typename pcl::PointCloud<PointOut>::Ptr cloud2;$/;"	m	class:pcl::PlaneSegmentation
cloud2DepthJumpMatrix	include/pcl/opencv/edgesdetector.h	/^        void cloud2DepthJumpMatrix (const pcl::PointCloud<PointIn>& cloud, int component, float distThreshold,$/;"	f	class:pcl::opencv::EdgeDetector
cloud2Normals	include/pcl/opencv/cvutils.h	/^    void cloud2Normals (const pcl::PointCloud<PointT> cloud, cv::Mat& image, bool removeBorders = true)$/;"	f	namespace:pcl::opencv
cloud2Normals	src/pcl/apps/pcd_to_normalsimg.cpp	/^  cloud2Normals (const pcl::PointCloud<PointT> cloud, cv::Mat& image, bool removeBorders = true, float depthChangeFactor = 0.02f, float normalSmoothSize = 10.0f)$/;"	f
cloudName	include/pcl/apps/stairdetectiondemo.h	/^      std::string cloudName;$/;"	m	class:pcl::StairDetectionDemo
cloudName	include/pcl/apps/stairdetectionlocal.h	/^      std::string cloudName;$/;"	m	class:pcl::StairDetectionLocal
cloudName	include/pcl/models/globalmodel.h	/^      std::string cloudName;$/;"	m	class:pcl::GlobalModel
cloudSeq	tests/test_fpe.cpp	/^  string outputFolder;int cloudSeq;$/;"	m	class:Test_FPE	file:
cloudToRGB	include/pcl/opencv/cvutils.h	/^    void cloudToRGB (const pcl::PointCloud<PointT>& input, cv::Mat& image)$/;"	f	namespace:pcl::opencv
cloudToRangeGrayscale	include/pcl/opencv/cvutils.h	/^    void cloudToRangeGrayscale (const pcl::PointCloud<PointT> cloud, cv::Mat& image, int compIndex = 0, float min = 0,$/;"	f	namespace:pcl::opencv
cloud_cb_	src/pcl/apps/stairdetectorlocalXtion.cpp	/^                void cloud_cb_ (const pcl::PointCloud<pcl::PointXYZRGBA>::ConstPtr &cloud_) $/;"	f	class:SimpleOpenNIViewer
cloud_intermediate_	include/pcl/visualization/registration_visualizer2.h	/^      pcl::PointCloud<PointSource> cloud_intermediate_;$/;"	m	class:pcl::RegistrationVisualizer2
cloud_intermediate_indices_	include/pcl/visualization/registration_visualizer2.h	/^      std::vector<int> cloud_intermediate_indices_;$/;"	m	class:pcl::RegistrationVisualizer2
cloud_source_	include/pcl/visualization/registration_visualizer2.h	/^      pcl::PointCloud<PointSource> cloud_source_;$/;"	m	class:pcl::RegistrationVisualizer2
cloud_target_	include/pcl/visualization/registration_visualizer2.h	/^      pcl::PointCloud<PointTarget> cloud_target_;$/;"	m	class:pcl::RegistrationVisualizer2
cloud_target_indices_	include/pcl/visualization/registration_visualizer2.h	/^      std::vector<int> cloud_target_indices_;$/;"	m	class:pcl::RegistrationVisualizer2
colBins	include/pcl/opencv/linesegment2dhistogram.h	/^    ColumnBins colBins;$/;"	m	class:pcl::RowBin
collides	include/pcl/types/step.h	/^      bool collides (const Step<PointT>& step)$/;"	f	class:pcl::Step
color	include/pcl/common/color.h	/^  namespace color$/;"	n	namespace:pcl
colorCloud	include/pcl/utils/pointcloud_utils.h	/^    colorCloud (pcl::PointCloud<PointT>& cloud, float color)$/;"	f	namespace:pcl
colorCloud	include/pcl/utils/pointcloud_utils.h	/^    colorCloud (typename pcl::PointCloud<PointT>::Ptr cloud, float color)$/;"	f	namespace:pcl
colorEdges	tests/test_fpe.cpp	/^  bool colorEdges;$/;"	m	class:Test_FPE	file:
colorLines	include/pcl/opencv/edgesdetector.h	/^        LineSegment3DVector colorLines(LineSegment3DVector lines, float color) {$/;"	f	class:pcl::opencv::EdgeDetector
colorPlane	tests/test_fpe.cpp	/^  colorPlane (pcl::PointCloud<pcl::PointXYZRGB> &cloud, SmartPlane3D& plane, float color, bool divideby1000)$/;"	f	class:Test_FPE
colorPoint	tests/test_fpe.cpp	/^  colorPoint (pcl::PointCloud<pcl::PointXYZRGB> &cloud, XYZD point, float color, bool divideby1000)$/;"	f	class:Test_FPE
colorPoints	tests/test_fpe.cpp	/^  colorPoints (pcl::PointCloud<pcl::PointXYZRGB> &cloud, PointsVector points, float color, bool divideby1000)$/;"	f	class:Test_FPE
colorSegPub2	tests/test_fpe.cpp	/^  ros::Publisher colorSegPub2;$/;"	m	class:Test_FPE	file:
colorizeSegments	include/pcl/segmentation/impl/region_segmentation.hpp	/^template<typename PointT> inline void pcl::segmentation::colorizeSegments(pcl::PointCloud<PointT>& cloud,$/;"	f	class:pcl::segmentation
colorizeSegments	include/pcl/segmentation/region_segmentation.h	/^    template<typename PointT> inline void colorizeSegments (pcl::PointCloud<PointT>& cloud,$/;"	f	namespace:pcl::segmentation
cols	include/pcl/opencv/imageconcat.h	/^        int cols;$/;"	m	class:pcl::opencv::ImageConcatenator
common	include/pcl/common/linesegment2d_common.h	/^  namespace common$/;"	n	namespace:pcl
compIndex	include/pcl/apps/stairdetector.h	/^        int compIndex;$/;"	m	struct:pcl::StairDetector::Comparator
compIndex	include/pcl/apps/stairdetector.h	/^      static const int compIndex = 2;$/;"	m	class:pcl::StairDetector
compIndex	include/pcl/models/localmodelfactory.h	/^      static const int compIndex = 2;$/;"	m	class:pcl::LocalModelFactory
compIndex	include/pcl/segmentation/planesegmentation.h	/^          int compIndex;$/;"	m	struct:pcl::PlaneSegmentation::Comparator
compareIndex	include/pcl/histogram/linesegment3dhistogram.h	/^      int compareIndex;$/;"	m	class:pcl::LineSegment3DHistogram
compareIndex	include/pcl/histogram/planehistogram.h	/^      int compareIndex;$/;"	m	class:pcl::PlaneHistogram
comparePointClusters	include/pcl/segmentation/impl/region_segmentation.hpp	/^inline bool pcl::segmentation::comparePointClusters(const pcl::segmentation::ClusterIndices& a, const pcl::segmentation::ClusterIndices& b)$/;"	f	class:pcl::segmentation
comparePointClusters	include/pcl/segmentation/region_segmentation.h	/^    inline bool comparePointClusters (const pcl::segmentation::ClusterIndices& a,$/;"	f	namespace:pcl::segmentation
compute	include/pcl/apps/stairdetectiondemo.h	/^      typename pcl::PointCloud<PointIn>::Ptr compute ()$/;"	f	class:pcl::StairDetectionDemo
compute	include/pcl/apps/stairdetectionlocal.h	/^      typename pcl::PointCloud<PointIn>::Ptr compute ()$/;"	f	class:pcl::StairDetectionLocal
compute	include/pcl/apps/stairdetector.h	/^      compute ()$/;"	f	class:pcl::StairDetector
compute	include/pcl/histogram/planehistogram.h	/^      bool compute ()$/;"	f	class:pcl::PlaneHistogram
compute	include/pcl/segmentation/planesegmentation.h	/^      void compute ()$/;"	f	class:pcl::PlaneSegmentation
computeApproximateCurvature	include/pcl/surface/surface_functions.h	/^    template<typename PointT> inline void computeApproximateCurvature (pcl::PointCloud<PointT>& cloud,$/;"	f	namespace:pcl::surface
computeFromDepthJumps	include/pcl/opencv/edgesdetector.h	/^        LineSegment3DVector computeFromDepthJumps ()$/;"	f	class:pcl::opencv::EdgeDetector
computeFromNormalImg	include/pcl/opencv/edgesdetector.h	/^        LineSegment3DVector computeFromNormalImg ()$/;"	f	class:pcl::opencv::EdgeDetector
computeNormalsAreaWeighted	include/pcl/surface/surface_functions.h	/^    template<typename PointT, typename PointNT> inline void computeNormalsAreaWeighted ($/;"	f	namespace:pcl::surface
computeNormalsAreaWeightedInverse	include/pcl/surface/surface_functions.h	/^    template<typename PointT, typename PointNT> inline void computeNormalsAreaWeightedInverse ($/;"	f	namespace:pcl::surface
computePlaneMSE	include/pcl/common/incremental_plane_fitting.h	/^  inline float computePlaneMSE(const pcl::PointCloud<PointT>& cloud, const std::vector<int>& indices, Eigen::Vector4f& parameters)$/;"	f	namespace:pcl
computePlaneParameters	include/pcl/common/incremental_plane_fitting.h	/^  inline float computePlaneParameters(const Eigen::Vector3f& centroid, const Eigen::Matrix3f& covariance, Eigen::Vector4f& parameters)$/;"	f	namespace:pcl
computePlaneParameters	include/pcl/common/incremental_plane_fitting.h	/^  inline float computePlaneParameters(const pcl::PointCloud<PointT>& cloud, const std::vector<int>& indices, Eigen::Vector4f& parameters)$/;"	f	namespace:pcl
computePlanes	include/pcl/segmentation/planesegmentation.h	/^      void computePlanes (Plane3DVector& vec)$/;"	f	class:pcl::PlaneSegmentation
computeRingNeighborhood	include/pcl/common/mesh_utilities.h	/^  computeRingNeighborhood (const pcl::NeighborhoodVector& vertex_vertex_list, pcl::NeighborhoodVector& ring_neighborhood, const int neighborhood_size = 1)$/;"	f	namespace:pcl
computeSteps	include/pcl/apps/stairdetector.h	/^      computeSteps (Plane3DVector& planes, StepsVector& steps, int compIndex = 2)$/;"	f	class:pcl::StairDetector
conc	include/pcl/opencv/edgesdetector.h	/^        pcl::opencv::ImageConcatenator conc;$/;"	m	class:pcl::opencv::EdgeDetector
concatePointClouds	include/pcl/utils/pointcloud_utils.h	/^    concatePointClouds (const pcl::PointCloud<PointT>& cloud, pcl::PointCloud<PointT>& outCloud)$/;"	f	namespace:pcl
confidence	include/pcl/common/fhg_point_types.h	/^        float confidence;$/;"	m	struct:pcl::_PointMoXYZRGBNormal
confidence	include/pcl/common/fhg_point_types.h	/^      float confidence;$/;"	m	struct:pcl::_PointMoXYZRGB
constructLine	include/pcl/opencv/linesegment2d.h	/^    constructLine ()$/;"	f	class:pcl::LineSegment2D
content	include/pcl/histogram/abstract_histogram.h	/^      std::vector<T, Alloc> content;$/;"	m	struct:pcl::Bin
contourForm	include/pcl/types/linesegment3d.h	/^      ContourForm contourForm;$/;"	m	class:pcl::LineSegment3D
convexHull	include/pcl/types/plane3d.h	/^      std::vector<PointT, Eigen::aligned_allocator<PointT> > convexHull;$/;"	m	class:pcl::Plane3D
copyPointCloud	include/pcl/utils/pointcloud_utils.h	/^    copyPointCloud (const typename pcl::PointCloud<PointIn>::ConstPtr cloudIn, pcl::PointCloud<PointOut>& cloudOut)$/;"	f	namespace:pcl
copyToFloatArray	tests/icp_vis.cpp	/^    virtual void copyToFloatArray (const PointNormalT &p, float * out) const$/;"	f	class:MyPointRepresentation
cos_angle_tolerance_	include/pcl/segmentation/region_segmentation.h	/^        float cos_angle_tolerance_;$/;"	m	class:pcl::segmentation::ApproximatePlaneRegionSegmentation
cos_angle_tolerance_	include/pcl/segmentation/region_segmentation.h	/^        float cos_angle_tolerance_;$/;"	m	class:pcl::segmentation::AverageNormalRegionSegmentation
cos_angle_tolerance_	include/pcl/segmentation/region_segmentation.h	/^        float cos_angle_tolerance_;$/;"	m	class:pcl::segmentation::InitialNormalRegionSegmentation
cos_angle_tolerance_	include/pcl/segmentation/region_segmentation.h	/^        float cos_angle_tolerance_;$/;"	m	class:pcl::segmentation::LastNormalRegionSegmentation
cos_angle_tolerance_	include/pcl/segmentation/region_segmentation.h	/^        float cos_angle_tolerance_;$/;"	m	class:pcl::segmentation::ProbabilisticPlaneRegionSegmentation
counter	include/pcl/models/edges2planesfactory.h	/^      int counter;$/;"	m	class:pcl::Edges2PlanesFactory
createHistogram	include/pcl/histogram/linesegment3dhistogram.h	/^      createHistogram ()$/;"	f	class:pcl::LineSegment3DHistogram
createHistogram	include/pcl/histogram/planehistogram.h	/^      void createHistogram (float min, float max, float stepSize, int numBins)$/;"	f	class:pcl::PlaneHistogram
createLocalModel	include/pcl/models/localmodelfactory.h	/^      LocalModel<PointT> createLocalModel (bool useMinimalThreshold = false)$/;"	f	class:pcl::LocalModelFactory
createOutputCloud	include/pcl/io/globfitwriter.h	/^        typename pcl::PointCloud<PointT>::Ptr createOutputCloud ()$/;"	f	class:pcl::io::GlobfitWriter
createPlanes	include/pcl/models/edges2planesfactory.h	/^      createPlanes ()$/;"	f	class:pcl::Edges2PlanesFactory
createSteps	include/pcl/models/localmodelfactory.h	/^      StepsVector createSteps (Plane3DVector& planes, bool useMinimalThreshold = false)$/;"	f	class:pcl::LocalModelFactory
createVisualizer	tests/opencv_reproject_image_pcl.cpp	/^boost::shared_ptr<pcl::visualization::PCLVisualizer> createVisualizer (pcl::PointCloud<pcl::PointXYZRGB>::ConstPtr cloud)$/;"	f
curvature	include/pcl/common/fhg_point_types.h	/^            float curvature;$/;"	m	struct:pcl::_PointMoXYZRGBNormal::__anon12::__anon13
curvature	include/pcl/common/impl/fhg_point_types.hpp	/^          float curvature;$/;"	m	struct:_PointMoXYZRGBNormal::__anon5::__anon6
data_c	include/pcl/common/fhg_point_types.h	/^          float data_c[4];$/;"	m	union:pcl::_PointMoXYZRGBNormal::__anon12
data_c	include/pcl/common/impl/fhg_point_types.hpp	/^        float data_c[4];$/;"	m	union:_PointMoXYZRGBNormal::__anon5
degreeToRadian	include/pcl/common/math.h	/^  degreeToRadian (float angle)$/;"	f	namespace:pcl
demo	src/pcl/apps/stairdetectorlocalXtion.cpp	/^pcl::StairDetectionLocal<PointIn, PointOut> demo;$/;"	v
demo	src/pcl/apps/stairdetectorlocalpcds.cpp	/^pcl::StairDetectionLocal<PointIn, PointOut> demo;$/;"	v
demo	src/pcl/apps/stairdetectorpcds.cpp	/^pcl::StairDetectionDemo<PointIn, PointOut> demo;$/;"	v
discardedPoints	include/pcl/segmentation/planesegmentation.h	/^      PointsVector discardedPoints;$/;"	m	class:pcl::PlaneSegmentation
distCompPoint	include/pcl/utils/pointcloud_utils.h	/^    distCompPoint (const PointT& p1, const PointT& p2, int component)$/;"	f	namespace:pcl
distPointPlane	include/pcl/common/incremental_plane_fitting.h	/^  distPointPlane(const PointT& point, const Eigen::Vector4f& model_coefficients)$/;"	f	namespace:pcl
distPointPlane	include/pcl/common/incremental_plane_fitting.h	/^  distPointPlane(const PointT& point, const pcl::PlaneModel model)$/;"	f	namespace:pcl
distance	include/pcl/common/incremental_plane_fitting.h	/^      float distance;$/;"	m	class:pcl::PlaneModel
distance2D	include/pcl/common/math.h	/^    distance2D (T vec1, T vec2)$/;"	f	namespace:pcl
distance3D	include/pcl/common/math.h	/^  distance3D (Eigen::Vector3f vec1, Eigen::Vector3f vec2)$/;"	f	namespace:pcl
distance_threshold	include/pcl/types/linesegment3d.h	/^      float distance_threshold;$/;"	m	class:pcl::LineSegment3D
distance_tolerance_	include/pcl/segmentation/region_segmentation.h	/^        float distance_tolerance_;$/;"	m	class:pcl::segmentation::RegionSegmentation
div1000	include/pcl/utils/pointcloud_utils.h	/^    div1000 (pcl::PointCloud<PointT>& source)$/;"	f	namespace:pcl
divideby1000	tests/test_fpe.cpp	/^  bool ledger_update, divideby1000, rotate_all;$/;"	m	class:Test_FPE	file:
domNormal	include/pcl/histogram/linesegment3dhistogram.h	/^      Eigen::Vector3f domNormal;$/;"	m	class:pcl::LineSegment3DHistogram
dominantAngle	include/pcl/opencv/linesegment2dhistogram.h	/^    float dominantAngle;$/;"	m	class:pcl::LineSegment2DHistogram
drawColoredEdges	include/pcl/opencv/edgesdetector.h	/^        void drawColoredEdges (BinsMatrix bins, cv::Mat& color_dst)$/;"	f	class:pcl::opencv::EdgeDetector
drawEdges	include/pcl/opencv/cvutils.h	/^    void drawEdges (std::vector<LineSegment2D>& lines, cv::Mat& color_dst)$/;"	f	namespace:pcl::opencv
drawEdges	include/pcl/opencv/cvutils.h	/^    void drawEdges (std::vector<cv::Vec4i>& lines, cv::Mat& color_dst)$/;"	f	namespace:pcl::opencv
drawEdges	include/pcl/opencv/edgesdetector.h	/^        void drawEdges (LineSegment2DVector& lines, cv::Mat& color_dst)$/;"	f	class:pcl::opencv::EdgeDetector
dst	src/pcl/apps/smooth.cpp	/^Mat dst, cdst, mat_hom, mat_gauss, mat_median, mat_bi;$/;"	v
edgesfile	include/pcl/opencv/edgesdetector.h	/^        std::string edgesfile;$/;"	m	class:pcl::opencv::EdgeDetector
elapsed	src/pcl/apps/stairdetectorlocalXtion.cpp	/^    double elapsed() {$/;"	f	class:Timer
end_	src/pcl/apps/stairdetectorlocalXtion.cpp	/^    timespec beg_, end_;$/;"	m	class:Timer	file:
estimateCurvatures	include/pcl/segmentation/impl/region_segmentation.hpp	/^inline void estimateCurvatures(PointCloudPtr cloud)$/;"	f
estimateNormals	include/pcl/common/pcl_commons.h	/^    estimateNormals (typename pcl::PointCloud<PointT>::ConstPtr cloud)$/;"	f	namespace:pcl
estimateNormals	include/pcl/types/linesegment3d.h	/^      estimateNormals (typename pcl::PointCloud<PointT>::ConstPtr cloud)$/;"	f	class:pcl::LineSegment3D
estimateNormalsOMP	include/pcl/common/pcl_commons.h	/^    estimateNormalsOMP (typename pcl::PointCloud<PointT>::ConstPtr cloud)$/;"	f	namespace:pcl
extract	include/pcl/segmentation/region_segmentation.h	/^        inline void extract (VectorClusterIndices& clusters)$/;"	f	class:pcl::segmentation::RegionSegmentation
extractBordersCloud	tests/test_fpe.cpp	/^  extractBordersCloud (pcl::SmartPlane3DBuilder<XYZD> builder, pcl::PointCloud<pcl::PointXYZRGB>& out,$/;"	f	class:Test_FPE
extractClusters	include/pcl/segmentation/region_segmentation.h	/^        virtual inline void extractClusters (VectorClusterIndices& clusters)$/;"	f	class:pcl::segmentation::RegionSegmentation
extractClusters	include/pcl/segmentation/region_segmentation.h	/^        void extractClusters (VectorClusterIndices& clusters)$/;"	f	class:pcl::segmentation::PCLEuclideanRegionSegmentation
extractColoredCloud	tests/test_fpe.cpp	/^  extractColoredCloud (pcl::SmartPlane3DBuilder<XYZD> builder, pcl::PointCloud<pcl::PointXYZRGB>& cloud,$/;"	f	class:Test_FPE
extractColoredSegments2	tests/test_fpe.cpp	/^  extractColoredSegments2 (pcl::PointCloud<pcl::PointXYZRGB>& cloud, const pcl::PointCloud<XYZD>& cloudBlob,$/;"	f	class:Test_FPE
extractCorrespondancesToClouds	include/pcl/models/globalmodel.h	/^      void extractCorrespondancesToClouds (typename pcl::PointCloud<PointT>::Ptr cloud_input_target,$/;"	f	class:pcl::GlobalModel
extractEdges	tests/test_fpe.cpp	/^  extractEdges (pcl::SmartPlane3DBuilder<XYZD> builder, pcl::PointCloud<pcl::PointXYZRGB>& out, bool divideby1000)$/;"	f	class:Test_FPE
extractEdgesContours	include/pcl/opencv/edgesdetector.h	/^        void extractEdgesContours (const cv::Mat& rgbsrc, const cv::Mat& src, LineSegment3DVector& linesVector, int low,$/;"	f	class:pcl::opencv::EdgeDetector
extractEdgesfromCloud	include/pcl/common/edges_common.h	/^  void extractEdgesfromCloud (typename pcl::PointCloud<PointT>::Ptr cloud,$/;"	f	namespace:pcl
extractLeftRightBorders	tests/test_fpe.cpp	/^  extractLeftRightBorders (pcl::SmartPlane3D<XYZD> plane, pcl::PointCloud<pcl::PointXYZRGB>& cloud, bool divideby1000)$/;"	f	class:Test_FPE
extractLeftRightBorders	tests/test_fpe.cpp	/^  extractLeftRightBorders (pcl::SmartPlane3DBuilder<XYZD> builder, pcl::PointCloud<pcl::PointXYZRGB>& cloud,$/;"	f	class:Test_FPE
extractLeftRightRawBorders	tests/test_fpe.cpp	/^  extractLeftRightRawBorders (pcl::SmartPlane3D<XYZD> plane, pcl::PointCloud<pcl::PointXYZRGB>& cloud,$/;"	f	class:Test_FPE
extractLeftRightRawBorders	tests/test_fpe.cpp	/^  extractLeftRightRawBorders (pcl::SmartPlane3DBuilder<XYZD> builder, pcl::PointCloud<pcl::PointXYZRGB>& cloud,$/;"	f	class:Test_FPE
extractPlane	tests/test_fpe.cpp	/^  extractPlane (SmartPlane3D plane, bool colored, bool divideby1000, pcl::PointCloud<pcl::PointXYZRGB>& out)$/;"	f	class:Test_FPE
extractPlanes	tests/test_fpe.cpp	/^  extractPlanes (pcl::SmartPlane3DBuilder<XYZD> builder, bool colored, pcl::PointCloud<pcl::PointXYZRGB>& out,$/;"	f	class:Test_FPE
extractRawBordersCloud	tests/test_fpe.cpp	/^  extractRawBordersCloud (pcl::SmartPlane3DBuilder<XYZD> builder, pcl::PointCloud<pcl::PointXYZRGB>& out,$/;"	f	class:Test_FPE
extractReconstructMeshes	tests/test_fpe.cpp	/^  extractReconstructMeshes (pcl::SmartPlane3DBuilder<XYZD> builder, pcl::PointCloud<pcl::PointXYZRGB>& out,$/;"	f	class:Test_FPE
extractTopBottomBorder	tests/test_fpe.cpp	/^  extractTopBottomBorder (SmartPlane3D plane, float topColor, float bottomColor, pcl::PointCloud<pcl::PointXYZRGB>& out)$/;"	f	class:Test_FPE
f_name	tests/icp_vis.cpp	/^    std::string f_name;$/;"	m	struct:PCD	file:
fast_exp	include/pcl/surface/surface_functions.h	/^    inline float fast_exp (double number)$/;"	f	namespace:pcl::surface
fast_sqrt	include/pcl/surface/surface_functions.h	/^    float fast_sqrt (float number)$/;"	f	namespace:pcl::surface
featureClouds	include/pcl/models/localmodel.h	/^      std::vector<typename PointCloud<PointT>::Ptr> featureClouds;$/;"	m	class:pcl::LocalModel
fillOutPlanes	include/pcl/histogram/planehistogram.h	/^      void fillOutPlanes ()$/;"	f	class:pcl::PlaneHistogram
filterBadLines	include/pcl/opencv/edgesdetector.h	/^        void filterBadLines (LineSegment2DVector& input, LineSegment2DVector& output, float dominantOrientation,$/;"	f	class:pcl::opencv::EdgeDetector
filterInadequateOrientations	include/pcl/opencv/linesegment2dhistogram.h	/^    filterInadequateOrientations ()$/;"	f	class:pcl::LineSegment2DHistogram
filterMesh	include/pcl/surface/surface_functions.h	/^    inline void filterMesh (const pcl::PolygonMesh& input, pcl::PolygonMesh& output, const float& x_min,$/;"	f	namespace:pcl::surface
findAndSubtractLine	include/pcl/common/pcl_commons.h	/^    findAndSubtractLine (typename pcl::PointCloud<PointT>::Ptr input, float distance_threshold, float max_iterations)$/;"	f	namespace:pcl
findBin	include/pcl/histogram/linesegment3dhistogram.h	/^        findBin (std::vector<Bin<LineSegment3D<PointT> , depth> , Alloc>& __bins, float value)$/;"	f	class:pcl::LineSegment3DHistogram
findBin	include/pcl/histogram/linesegmenthistogram.h	/^      findBin (BinsVector __bins, float xValue)$/;"	f	class:pcl::LineSegmentHistogram
findBin	include/pcl/histogram/planehistogram.h	/^      int findBin (BinsVector __bins, float value)$/;"	f	class:pcl::PlaneHistogram
findBin	include/pcl/opencv/linesegment2dhistogram.h	/^    findBin (BinsMatrix __bins, float value)$/;"	f	class:pcl::LineSegment2DHistogram
findBin	include/pcl/opencv/linesegment2dhistogram.h	/^    findBin (ColumnBins __bins, float value)$/;"	f	class:pcl::LineSegment2DHistogram
findBin2	include/pcl/histogram/planehistogram.h	/^      int findBin2 (BinsVector __bins, double value)$/;"	f	class:pcl::PlaneHistogram
findCorrespondances	include/pcl/registration/icp_dirk.h	/^  pcl::CorrespondencesPtr findCorrespondances (typename PointCloud<PointT>::Ptr cloud_source,$/;"	f	namespace:pcl
findCorrespondancesIndicesInSource	include/pcl/registration/icp_dirk.h	/^  pcl::PointIndices::Ptr findCorrespondancesIndicesInSource (CorrespondencesPtr correspondances_ptr)$/;"	f	namespace:pcl
findMaxStepsIndex	include/pcl/models/globalmodel.h	/^      size_t findMaxStepsIndex ()$/;"	f	class:pcl::GlobalModel
findMaxWallsIndex	include/pcl/models/globalmodel.h	/^      size_t findMaxWallsIndex ()$/;"	f	class:pcl::GlobalModel
findMinMax	include/pcl/histogram/linesegment3dhistogram.h	/^      findMinMax (float& min, float& max)$/;"	f	class:pcl::LineSegment3DHistogram
findMinMax	include/pcl/histogram/planehistogram.h	/^      void findMinMax (float& min, float& max)$/;"	f	class:pcl::PlaneHistogram
findNearestStepMatches	include/pcl/models/globalmodel.h	/^      std::map<float, size_t> findNearestStepMatches (const LocalModel<PointT>& localModel, const Step<PointT>& step)$/;"	f	class:pcl::GlobalModel
findNeighborPointsOnAxis	include/pcl/types/plane3d.h	/^      inline std::vector<PointT, Eigen::aligned_allocator<PointT> > findNeighborPointsOnAxis ($/;"	f	class:pcl::Plane3D
findRejections	include/pcl/registration/icp_dirk.h	/^  std::vector<int> findRejections (CorrespondencesPtr correspondances_ptr)$/;"	f	namespace:pcl
findRotation	include/pcl/segmentation/planesegmentation.h	/^      inline void findRotation (const std::vector<Eigen::Vector3f>& normals, float& outAngle, Eigen::Vector3f& outAxis)$/;"	f	class:pcl::PlaneSegmentation
findTranslationBetweenModels	include/pcl/models/globalmodel.h	/^      PointT findTranslationBetweenModels (const LocalModel<PointT>& model1, const LocalModel<PointT>& model2)$/;"	f	class:pcl::GlobalModel
findVerticalLines	include/pcl/opencv/edgesdetector.h	/^        void findVerticalLines (const LineSegment3DVector& inLines)$/;"	f	class:pcl::opencv::EdgeDetector
findWalls	include/pcl/segmentation/planesegmentation.h	/^      void findWalls ()$/;"	f	class:pcl::PlaneSegmentation
findX	include/pcl/opencv/linesegment2d.h	/^      findX (int y, T theta, T rho)$/;"	f	class:pcl::LineSegment2D
findY	include/pcl/opencv/linesegment2d.h	/^      findY (int x, T theta, T rho)$/;"	f	class:pcl::LineSegment2D
first_update_flag_	include/pcl/visualization/registration_visualizer2.h	/^      bool first_update_flag_;$/;"	m	class:pcl::RegistrationVisualizer2
fitsCluster	include/pcl/segmentation/region_segmentation.h	/^        inline bool fitsCluster (const int& point_idx)$/;"	f	class:pcl::segmentation::ApproximatePlaneRegionSegmentation
fitsCluster	include/pcl/segmentation/region_segmentation.h	/^        inline bool fitsCluster (const int& point_idx)$/;"	f	class:pcl::segmentation::AverageNormalRegionSegmentation
fitsCluster	include/pcl/segmentation/region_segmentation.h	/^        inline bool fitsCluster (const int& point_idx)$/;"	f	class:pcl::segmentation::InitialNormalRegionSegmentation
fitsCluster	include/pcl/segmentation/region_segmentation.h	/^        inline bool fitsCluster (const int& point_idx)$/;"	f	class:pcl::segmentation::ProbabilisticPlaneRegionSegmentation
fitsCluster	include/pcl/segmentation/region_segmentation.h	/^        virtual inline bool fitsCluster (const int& point_idx)$/;"	f	class:pcl::segmentation::RegionSegmentation
fitsNeighbor	include/pcl/segmentation/region_segmentation.h	/^        inline bool fitsNeighbor (const int& point_idx)$/;"	f	class:pcl::segmentation::LastNormalRegionSegmentation
fitsNeighbor	include/pcl/segmentation/region_segmentation.h	/^        virtual inline bool fitsNeighbor (const int& point_idx)$/;"	f	class:pcl::segmentation::RegionSegmentation
flipNormals	include/pcl/models/localmodelfactory.h	/^      LocalModel<PointT> flipNormals (LocalModel<PointT> model)$/;"	f	class:pcl::LocalModelFactory
fpe	tests/test_fpe.cpp	/^Test_FPE fpe;$/;"	v
frame_id	src/pcl/apps/stairdetectorlocalXtion.cpp	/^                int frame_id;$/;"	m	class:SimpleOpenNIViewer	file:
fromCentroidAndCovariance	include/pcl/common/incremental_plane_fitting.h	/^      inline float fromCentroidAndCovariance(const Eigen::Vector3f& centroid, const Eigen::Matrix3f& covariance)$/;"	f	class:pcl::PlaneModel
fromNormalAndCentroid	include/pcl/common/incremental_plane_fitting.h	/^      inline void fromNormalAndCentroid(const Eigen::Vector3f& normal_arg, const Eigen::Vector3f& centroid_arg)$/;"	f	class:pcl::PlaneModel
g	include/pcl/common/fhg_point_types.h	/^                uint8_t g;$/;"	m	struct:pcl::_PointMoXYZRGBNormal::__anon12::__anon13::__anon14::__anon15
g	include/pcl/common/fhg_point_types.h	/^            uint8_t g;$/;"	m	struct:pcl::_PointMoXYZRGB::__anon9::__anon10::__anon11
g	include/pcl/common/impl/fhg_point_types.hpp	/^              uint8_t g;$/;"	m	struct:_PointMoXYZRGBNormal::__anon5::__anon6::__anon7::__anon8
g	include/pcl/common/impl/fhg_point_types.hpp	/^          uint8_t g;$/;"	m	struct:_PointMoXYZRGB::__anon2::__anon3::__anon4
generateColor	include/pcl/common/pcl_commons.h	/^  generateColor (int r, int g, int b)$/;"	f	namespace:pcl
generateColor	tests/test_fpe.cpp	/^  generateColor ()$/;"	f	class:Test_FPE
generateColor	tests/test_fpe.cpp	/^  generateColor (int r, int g, int b)$/;"	f	class:Test_FPE
getAngle	include/pcl/common/math.h	/^  getAngle (Eigen::Vector2f vec1, Eigen::Vector2f vec2)$/;"	f	namespace:pcl
getAngle	include/pcl/common/math.h	/^  getAngle (Eigen::Vector3d vec1, Eigen::Vector3d vec2)$/;"	f	namespace:pcl
getAngle	include/pcl/common/math.h	/^  getAngle (Eigen::Vector3f vec1, Eigen::Vector3f vec2)$/;"	f	namespace:pcl
getAngleTolerance	include/pcl/segmentation/region_segmentation.h	/^        inline float getAngleTolerance ()$/;"	f	class:pcl::segmentation::RegionSegmentation
getBBox	include/pcl/types/plane3d.h	/^      BoundingBox<PointT> getBBox () const$/;"	f	class:pcl::Plane3D
getBottomLine	include/pcl/types/plane3d.h	/^      LineSegment3D<PointT> getBottomLine () const$/;"	f	class:pcl::Plane3D
getBoundingBoxesCloud	include/pcl/models/localmodel.h	/^      typename pcl::PointCloud<PointT>::Ptr getBoundingBoxesCloud ()$/;"	f	class:pcl::LocalModel
getCenter	include/pcl/types/linesegment3d.h	/^      getCenter () const$/;"	f	class:pcl::LineSegment3D
getCenter	include/pcl/types/plane3d.h	/^      inline Eigen::Vector3f getCenter () const$/;"	f	class:pcl::Plane3D
getCenter	include/pcl/types/step.h	/^      Vector3f getCenter () const$/;"	f	class:pcl::Step
getCentroid	include/pcl/opencv/linesegment2d.h	/^    getCentroid () const$/;"	f	class:pcl::LineSegment2D
getCentroid	include/pcl/types/impl/linesegment3d.hpp	/^PointT pcl::LineSegment3D<PointT>::getCentroid () const$/;"	f	class:pcl::LineSegment3D
getCentroid	include/pcl/types/linesegment3d.h	/^      getCentroid () const$/;"	f	class:pcl::LineSegment3D
getClassName	include/pcl/segmentation/region_segmentation.h	/^        std::string getClassName () const$/;"	f	class:pcl::segmentation::ApproximatePlaneRegionSegmentation
getClassName	include/pcl/segmentation/region_segmentation.h	/^        std::string getClassName () const$/;"	f	class:pcl::segmentation::AverageNormalRegionSegmentation
getClassName	include/pcl/segmentation/region_segmentation.h	/^        std::string getClassName () const$/;"	f	class:pcl::segmentation::InitialNormalRegionSegmentation
getClassName	include/pcl/segmentation/region_segmentation.h	/^        std::string getClassName () const$/;"	f	class:pcl::segmentation::LastNormalRegionSegmentation
getClassName	include/pcl/segmentation/region_segmentation.h	/^        std::string getClassName () const$/;"	f	class:pcl::segmentation::PCLEuclideanRegionSegmentation
getClassName	include/pcl/segmentation/region_segmentation.h	/^        std::string getClassName () const$/;"	f	class:pcl::segmentation::ProbabilisticPlaneRegionSegmentation
getClassName	include/pcl/segmentation/region_segmentation.h	/^        virtual std::string getClassName () const$/;"	f	class:pcl::segmentation::RegionSegmentation
getCloud	include/pcl/surface/surface_functions.h	/^    template<typename PointT> inline void getCloud (const pcl::PolygonMesh& mesh, pcl::PointCloud<PointT>& cloud)$/;"	f	namespace:pcl::surface
getCloud	include/pcl/types/impl/linesegment3d.hpp	/^typename pcl::PointCloud<PointT>::Ptr pcl::LineSegment3D<PointT>::getCloud () const$/;"	f	class:pcl::LineSegment3D
getCloud	include/pcl/types/linesegment3d.h	/^      getCloud () const$/;"	f	class:pcl::LineSegment3D
getCloud	include/pcl/types/plane3d.h	/^      virtual inline typename pcl::PointCloud<PointT>::Ptr getCloud () const$/;"	f	class:pcl::Plane3D
getClusterTolerance	include/pcl/segmentation/region_segmentation.h	/^        inline float getClusterTolerance ()$/;"	f	class:pcl::segmentation::RegionSegmentation
getColorFloatFromRGB	include/pcl/common/color.h	/^    getColorFloatFromRGB(const unsigned char& r, const unsigned char& g, const unsigned char& b)$/;"	f	namespace:pcl::color
getColoredCloud	include/pcl/apps/stairdetector.h	/^      getColoredCloud ()$/;"	f	class:pcl::StairDetector
getConcaveEdges	include/pcl/models/modelsampler.h	/^      LineSegment3DVector getConcaveEdges ()$/;"	f	class:pcl::ModelSampler
getContourType	include/pcl/types/linesegment3d.h	/^      getContourType ()$/;"	f	class:pcl::LineSegment3D
getConvexEdges	include/pcl/models/modelsampler.h	/^      LineSegment3DVector getConvexEdges ()$/;"	f	class:pcl::ModelSampler
getConvexHull	include/pcl/types/plane3d.h	/^      typename PointCloud::Ptr getConvexHull () const$/;"	f	class:pcl::Plane3D
getCorrespondances	include/pcl/registration/myicp.h	/^      CorrespondencesPtr getCorrespondances ()$/;"	f	class:pcl::MyICP
getCorrespondances	include/pcl/registration/myicp.h	/^      CorrespondencesPtr getCorrespondances ()$/;"	f	class:pcl::MyICPNonLinear
getDominantNormal	include/pcl/histogram/linesegment3dhistogram.h	/^      getDominantNormal ()$/;"	f	class:pcl::LineSegment3DHistogram
getDominantOrientation	include/pcl/opencv/linesegment2dhistogram.h	/^    getDominantOrientation ()$/;"	f	class:pcl::LineSegment2DHistogram
getGlobalModel	include/pcl/apps/stairdetectiondemo.h	/^      GlobalModel<PointOut> getGlobalModel () const$/;"	f	class:pcl::StairDetectionDemo
getGlobalModel	include/pcl/apps/stairdetectionlocal.h	/^      GlobalModel<PointOut> getGlobalModel () const$/;"	f	class:pcl::StairDetectionLocal
getHeight	include/pcl/types/plane3d.h	/^      float getHeight () const$/;"	f	class:pcl::Plane3D
getHesseDistance	include/pcl/types/plane3d.h	/^      float getHesseDistance () const$/;"	f	class:pcl::Plane3D
getId	include/pcl/histogram/linesegmenthistogram.h	/^      getId ()$/;"	f	class:pcl::LineSegmentBin
getId	include/pcl/opencv/linesegment2d.h	/^    getId () const$/;"	f	class:pcl::LineSegment2D
getId	include/pcl/types/linesegment3d.h	/^      getId () const$/;"	f	class:pcl::LineSegment3D
getId	include/pcl/types/plane3d.h	/^      size_t getId () const$/;"	f	class:pcl::Plane3D
getId	include/pcl/types/step.h	/^      size_t getId () const$/;"	f	class:pcl::Step
getIndexedName	include/pcl/visualization/registration_visualizer2.h	/^      getIndexedName (std::string &root_name, size_t &id)$/;"	f	class:pcl::RegistrationVisualizer2
getInputCloud	include/pcl/types/plane3d.h	/^      virtual inline typename pcl::PointCloud<PointT>::ConstPtr getInputCloud () const$/;"	f	class:pcl::Plane3D
getIntensity	include/pcl/common/color.h	/^    getIntensity (const float& color)$/;"	f	namespace:pcl::color
getIntensity	include/pcl/common/color.h	/^    getIntensity (const float& r, const float& g, const float& b)$/;"	f	namespace:pcl::color
getIntensity	include/pcl/common/color.h	/^    getIntensity(const unsigned char& r, const unsigned char& g, const unsigned char& b)$/;"	f	namespace:pcl::color
getIntensity	include/pcl/surface/surface_functions.h	/^    template<typename PointT> inline float getIntensity (PointT& point)$/;"	f	namespace:pcl::surface
getLDEpth	include/pcl/types/plane3d.h	/^      float getLDEpth () const$/;"	f	class:pcl::Plane3D
getLastAddedPoints	include/pcl/models/globalmodel.h	/^      typename pcl::PointCloud<PointT>::Ptr getLastAddedPoints ()$/;"	f	class:pcl::GlobalModel
getLength	include/pcl/opencv/linesegment2d.h	/^    getLength ()$/;"	f	class:pcl::LineSegment2D
getLength	include/pcl/types/linesegment3d.h	/^      getLength () const$/;"	f	class:pcl::LineSegment3D
getLength	include/pcl/types/plane3d.h	/^      float getLength () const$/;"	f	class:pcl::Plane3D
getLineModel	include/pcl/opencv/linesegment2d.h	/^    getLineModel ()$/;"	f	class:pcl::LineSegment2D
getLineModel	include/pcl/types/linesegment3d.h	/^      getLineModel () const$/;"	f	class:pcl::LineSegment3D
getLines	include/pcl/histogram/linesegment3dhistogram.h	/^      getLines ()$/;"	f	class:pcl::LineSegment3DHistogram
getLines	include/pcl/histogram/linesegmenthistogram.h	/^      getLines ()$/;"	f	class:pcl::LineSegmentBin
getLines	include/pcl/histogram/linesegmenthistogram.h	/^      getLines ()$/;"	f	class:pcl::LineSegmentHistogram
getLines	include/pcl/opencv/linesegment2dhistogram.h	/^    getLines (LineVector& outLines)$/;"	f	class:pcl::LineSegment2DHistogram
getMSE	include/pcl/common/incremental_plane_fitting.h	/^      inline float getMSE(const pcl::PlaneModelIncremental& model, const pcl::PlaneModel& plane)$/;"	f	class:pcl::PlaneModelIncremental
getMatrix	include/pcl/opencv/linesegment2dhistogram.h	/^    getMatrix ()$/;"	f	class:pcl::LineSegment2DHistogram
getMaxClusterSize	include/pcl/segmentation/region_segmentation.h	/^        inline int getMaxClusterSize ()$/;"	f	class:pcl::segmentation::RegionSegmentation
getMaxDistance	include/pcl/kdtree/fixed_neighbors.h	/^	float getMaxDistance() const {$/;"	f	class:pcl::FixedNeighbors
getMaxMSE	include/pcl/segmentation/region_segmentation.h	/^        inline float getMaxMSE () const$/;"	f	class:pcl::segmentation::ProbabilisticPlaneRegionSegmentation
getMaximumDisplayedCorrespondences	include/pcl/visualization/registration_visualizer2.h	/^      getMaximumDisplayedCorrespondences()$/;"	f	class:pcl::RegistrationVisualizer2
getMesh	include/pcl/segmentation/planesegmentation.h	/^      pcl::PolygonMesh::Ptr getMesh ()$/;"	f	class:pcl::PlaneSegmentation
getMesh	include/pcl/surface/surface_utils.h	/^    pcl::PolygonMesh::Ptr getMesh (const typename pcl::PointCloud<PointT>::ConstPtr input)$/;"	f	namespace:pcl::surface
getMinClusterSize	include/pcl/segmentation/region_segmentation.h	/^        inline int getMinClusterSize ()$/;"	f	class:pcl::segmentation::RegionSegmentation
getMinMax	include/pcl/histogram/linesegmenthistogram.h	/^      getMinMax (float& minX, float& maxX)$/;"	f	class:pcl::LineSegmentHistogram
getMinMaxR	include/pcl/opencv/linesegment2dhistogram.h	/^    getMinMaxR (float& minR, float& maxR)$/;"	f	class:pcl::LineSegment2DHistogram
getModel	include/pcl/types/impl/linesegment3d.hpp	/^inline std::vector<PointT, Eigen::aligned_allocator<PointT> > pcl::LineSegment3D<PointT>::getModel () const$/;"	f	class:pcl::LineSegment3D
getModelCloud	include/pcl/models/localmodel.h	/^      typename pcl::PointCloud<PointT>::Ptr getModelCloud ()$/;"	f	class:pcl::LocalModel
getModelLines	include/pcl/models/localmodel.h	/^      LineSegment3DVector getModelLines ()$/;"	f	class:pcl::LocalModel
getName	include/pcl/kdtree/fixed_neighbors.h	/^	getName() const {$/;"	f	class:pcl::FixedNeighbors
getNeighborhood	include/pcl/kdtree/fixed_neighbors.h	/^	inline NeighborhoodVectorConstPtr const getNeighborhood() {$/;"	f	class:pcl::FixedNeighbors
getNeighbors	include/pcl/segmentation/region_segmentation.h	/^        virtual inline int getNeighbors (const int& point_idx, std::vector<int>& nn_indices,$/;"	f	class:pcl::segmentation::RegionSegmentation
getNoiseModel	include/pcl/segmentation/region_segmentation.h	/^        inline NoiseModelPtr getNoiseModel ()$/;"	f	class:pcl::segmentation::RegionSegmentation
getNormal	include/pcl/opencv/linesegment2d.h	/^    getNormal () const$/;"	f	class:pcl::LineSegment2D
getNormal	include/pcl/types/linesegment3d.h	/^      getNormal () const$/;"	f	class:pcl::LineSegment3D
getNormal	include/pcl/types/plane3d.h	/^      inline Eigen::Vector3f getNormal () const$/;"	f	class:pcl::Plane3D
getNumberOfPoints	include/pcl/common/incremental_plane_fitting.h	/^      float getNumberOfPoints() const { return nr_points_; };$/;"	f	class:pcl::PlaneModelIncremental
getOldMatrix	include/pcl/opencv/linesegment2dhistogram.h	/^    getOldMatrix ()$/;"	f	class:pcl::LineSegment2DHistogram
getOptimalPlane	include/pcl/common/incremental_plane_fitting.h	/^      inline float getOptimalPlane(const pcl::PlaneModelIncremental& model, pcl::PlaneModel& plane)$/;"	f	class:pcl::PlaneModelIncremental
getOptimalPlane	include/pcl/common/incremental_plane_fitting.h	/^      inline float getOptimalPlane(const pcl::PlaneModelIncremental& model, pcl::PlaneModel& plane, Eigen::Matrix4f& hessian)$/;"	f	class:pcl::PlaneModelIncremental
getOutplanes	include/pcl/histogram/planehistogram.h	/^      PlanesVector getOutplanes ()$/;"	f	class:pcl::PlaneHistogram
getOutputCloud	include/pcl/segmentation/planesegmentation.h	/^      inline typename pcl::PointCloud<PointOut>::Ptr getOutputCloud ()$/;"	f	class:pcl::PlaneSegmentation
getP1	include/pcl/types/types.h	/^      getP1 ()$/;"	f	class:pcl::LineSegment
getP2	include/pcl/types/types.h	/^      getP2 ()$/;"	f	class:pcl::LineSegment
getPlaneCertainty	include/pcl/common/incremental_plane_fitting.h	/^      inline void getPlaneCertainty(const pcl::PlaneModelIncremental& model, const float& lambda, Eigen::Matrix4f& hessian)$/;"	f	class:pcl::PlaneModelIncremental
getPlanes	include/pcl/segmentation/planesegmentation.h	/^      Plane3DVector getPlanes ()$/;"	f	class:pcl::PlaneSegmentation
getPlanesCloud	include/pcl/apps/stairdetectiondemo.h	/^      typename pcl::PointCloud<PointOut>::Ptr getPlanesCloud ()$/;"	f	class:pcl::StairDetectionDemo
getPlanesCloud	include/pcl/apps/stairdetectionlocal.h	/^      typename pcl::PointCloud<PointOut>::Ptr getPlanesCloud ()$/;"	f	class:pcl::StairDetectionLocal
getPoints	include/pcl/opencv/linesegment2d.h	/^    getPoints ()$/;"	f	class:pcl::LineSegment2D
getPolygons	include/pcl/segmentation/region_segmentation.h	/^        void getPolygons (PointCloudPtr cloud, const pcl::segmentation::VectorClusterIndices& clusters,$/;"	f	class:pcl::segmentation::PlanePolygonalization
getR	include/pcl/opencv/linesegment2d.h	/^    getR () const$/;"	f	class:pcl::LineSegment2D
getRDepth	include/pcl/types/plane3d.h	/^      float getRDepth () const$/;"	f	class:pcl::Plane3D
getRGBFromColorFloat	include/pcl/common/color.h	/^    getRGBFromColorFloat (const float& color, float& r, float& g, float& b)$/;"	f	namespace:pcl::color
getRGBFromColorFloat	include/pcl/common/color.h	/^    getRGBFromColorFloat(const float& color, unsigned char& r, unsigned char& g, unsigned char& b)$/;"	f	namespace:pcl::color
getRGBVector3i	include/pcl/common/fhg_point_types.h	/^      inline Eigen::Vector3i getRGBVector3i () { return (Eigen::Vector3i (r, g, b)); }$/;"	f	struct:pcl::PointMoXYZRGB
getRGBVector3i	include/pcl/common/fhg_point_types.h	/^      inline const Eigen::Vector3i getRGBVector3i () const { return (Eigen::Vector3i (r, g, b)); }$/;"	f	struct:pcl::PointMoXYZRGB
getRGBVector3i	include/pcl/common/impl/fhg_point_types.hpp	/^    inline Eigen::Vector3i getRGBVector3i () { return (Eigen::Vector3i (r, g, b)); }$/;"	f	struct:PointMoXYZRGB
getRGBVector3i	include/pcl/common/impl/fhg_point_types.hpp	/^    inline const Eigen::Vector3i getRGBVector3i () const { return (Eigen::Vector3i (r, g, b)); }$/;"	f	struct:PointMoXYZRGB
getRGBVector4i	include/pcl/common/fhg_point_types.h	/^      inline Eigen::Vector4i getRGBVector4i () { return (Eigen::Vector4i (r, g, b, 0)); }$/;"	f	struct:pcl::PointMoXYZRGB
getRGBVector4i	include/pcl/common/fhg_point_types.h	/^      inline const Eigen::Vector4i getRGBVector4i () const { return (Eigen::Vector4i (r, g, b, 0)); }$/;"	f	struct:pcl::PointMoXYZRGB
getRGBVector4i	include/pcl/common/impl/fhg_point_types.hpp	/^    inline Eigen::Vector4i getRGBVector4i () { return (Eigen::Vector4i (r, g, b, 0)); }$/;"	f	struct:PointMoXYZRGB
getRGBVector4i	include/pcl/common/impl/fhg_point_types.hpp	/^    inline const Eigen::Vector4i getRGBVector4i () const { return (Eigen::Vector4i (r, g, b, 0)); }$/;"	f	struct:PointMoXYZRGB
getRandomColor	include/pcl/common/color.h	/^    getRandomColor (float &r, float &g, float &b, float min_sum = 0.2, float max_sum = 2.8)$/;"	f	namespace:pcl::color
getRandomColor	include/pcl/common/color.h	/^    getRandomColor (float min = 0.2, float max = 2.8)$/;"	f	namespace:pcl::color
getRandomColor	include/pcl/common/color.h	/^    getRandomColor (unsigned char& r, unsigned char& g, unsigned char& b, float min = 0.2, float max = 2.8)$/;"	f	namespace:pcl::color
getRangeMax	include/pcl/histogram/linesegmenthistogram.h	/^      getRangeMax ()$/;"	f	class:pcl::LineSegmentBin
getRangeMin	include/pcl/histogram/linesegmenthistogram.h	/^      getRangeMin ()$/;"	f	class:pcl::LineSegmentBin
getRawPlanesCloud	include/pcl/apps/stairdetectiondemo.h	/^      typename pcl::PointCloud<PointOut>::Ptr getRawPlanesCloud ()$/;"	f	class:pcl::StairDetectionDemo
getRawPlanesCloud	include/pcl/apps/stairdetectionlocal.h	/^      typename pcl::PointCloud<PointOut>::Ptr getRawPlanesCloud ()$/;"	f	class:pcl::StairDetectionLocal
getRawPlanesCloud	include/pcl/segmentation/planesegmentation.h	/^      inline typename pcl::PointCloud<PointOut>::Ptr getRawPlanesCloud ()$/;"	f	class:pcl::PlaneSegmentation
getRiser	include/pcl/types/step.h	/^      getRiser () const$/;"	f	class:pcl::Step
getRisers	include/pcl/io/globfitwriter.h	/^        Plane3DVector getRisers ()$/;"	f	class:pcl::io::GlobfitWriter
getRisersConvexHulls	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getRisersConvexHulls ()$/;"	f	class:pcl::ModelSampler
getRisersPoints	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getRisersPoints ()$/;"	f	class:pcl::ModelSampler
getRotationangle	include/pcl/segmentation/planesegmentation.h	/^      float getRotationangle ()$/;"	f	class:pcl::PlaneSegmentation
getSampledBottomRiserEdges	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getSampledBottomRiserEdges (float regularity)$/;"	f	class:pcl::ModelSampler
getSampledBottomTreadEdges	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getSampledBottomTreadEdges (float regularity)$/;"	f	class:pcl::ModelSampler
getSampledConcaveEdges	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getSampledConcaveEdges (float regularity)$/;"	f	class:pcl::ModelSampler
getSampledConcaveEdges	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getSampledConcaveEdges (int numSampledPoints)$/;"	f	class:pcl::ModelSampler
getSampledConvexEdges	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getSampledConvexEdges (float regularity)$/;"	f	class:pcl::ModelSampler
getSampledConvexEdges	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getSampledConvexEdges (int numSampledPoints)$/;"	f	class:pcl::ModelSampler
getSampledLeftEdges	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getSampledLeftEdges (int numSampledPoints = 5)$/;"	f	class:pcl::ModelSampler
getSampledLeftRiserEdges	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getSampledLeftRiserEdges (int numSampledPoints = 5)$/;"	f	class:pcl::ModelSampler
getSampledLeftTreadEdges	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getSampledLeftTreadEdges (int numSampledPoints)$/;"	f	class:pcl::ModelSampler
getSampledRightEdges	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getSampledRightEdges (int numSampledPoints = 5)$/;"	f	class:pcl::ModelSampler
getSampledRightRiserEdges	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getSampledRightRiserEdges (int numSampledPoints = 5)$/;"	f	class:pcl::ModelSampler
getSampledRightTreadEdges	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getSampledRightTreadEdges (int numSampledPoints)$/;"	f	class:pcl::ModelSampler
getSampledTopRiserEdges	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getSampledTopRiserEdges (float regularity)$/;"	f	class:pcl::ModelSampler
getSampledTopTreadEdges	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getSampledTopTreadEdges (float regularity)$/;"	f	class:pcl::ModelSampler
getSearchMethod	include/pcl/segmentation/impl/region_segmentation.hpp	/^inline KdTreePtr pcl::KdTree::CurvatureEstimation::getSearchMethod()$/;"	f	class:pcl::KdTree::CurvatureEstimation
getSearchMethod	include/pcl/segmentation/region_segmentation.h	/^        inline KdTreePtr getSearchMethod ()$/;"	f	class:pcl::segmentation::RegionSegmentation
getSignedAngle	include/pcl/common/math.h	/^  getSignedAngle (Eigen::Vector2f vec1, Eigen::Vector2f vec2)$/;"	f	namespace:pcl
getStdDev	include/pcl/common/noise_model.h	/^      getStdDev(const int& index) { return 0.0f; }$/;"	f	class:pcl::NoiseModel
getStdDev	include/pcl/common/noise_model.h	/^      getStdDev(const int& index) { return standard_deviations_[index]; }$/;"	f	class:pcl::QuadraticIsotropicNoise
getSteps	include/pcl/apps/stairdetector.h	/^      getSteps ()$/;"	f	class:pcl::StairDetector
getSteps	include/pcl/models/localmodel.h	/^      StepsVector getSteps () const$/;"	f	class:pcl::LocalModel
getSumOfWeights	include/pcl/common/incremental_plane_fitting.h	/^      float getSumOfWeights () const { return sum_weights_; };$/;"	f	class:pcl::PlaneModelIncremental
getTheta	include/pcl/opencv/linesegment2d.h	/^    getTheta () const$/;"	f	class:pcl::LineSegment2D
getThetaDegree	include/pcl/opencv/linesegment2d.h	/^    getThetaDegree () const$/;"	f	class:pcl::LineSegment2D
getTime	include/pcl/common/time.h	/^      getTime()$/;"	f	class:pcl::StopWatch
getTime	include/pcl/common/time.h	/^inline double getTime ()$/;"	f	namespace:pcl
getTime	src/pcl/apps/smooth.cpp	/^getTime ()$/;"	f
getTimeMs	include/pcl/common/motime.h	/^    getTimeMs ()$/;"	f	namespace:pcl
getTimeSeconds	include/pcl/common/time.h	/^      getTimeSeconds()$/;"	f	class:pcl::StopWatch
getTopLine	include/pcl/types/plane3d.h	/^      LineSegment3D<PointT> getTopLine () const$/;"	f	class:pcl::Plane3D
getTread	include/pcl/types/step.h	/^      getTread () const$/;"	f	class:pcl::Step
getTreads	include/pcl/io/globfitwriter.h	/^        Plane3DVector getTreads ()$/;"	f	class:pcl::io::GlobfitWriter
getTreadsConvexHulls	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getTreadsConvexHulls ()$/;"	f	class:pcl::ModelSampler
getTreadsPoints	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr getTreadsPoints ()$/;"	f	class:pcl::ModelSampler
getVertexVertexList	include/pcl/common/mesh_utilities.h	/^  getVertexVertexList(const pcl::PolygonMesh& mesh, pcl::NeighborhoodVector& vertex_list, bool ignore_duplicates = true)$/;"	f	namespace:pcl
getVertexVertexList	include/pcl/common/mesh_utilities.h	/^  getVertexVertexList(const std::vector<pcl::Vertices>& polygons, const int& nr_points, pcl::NeighborhoodVector& vertex_list, bool ignore_dupilicates = true)$/;"	f	namespace:pcl
getVerticalLines	include/pcl/opencv/edgesdetector.h	/^        LineSegment3DVector getVerticalLines ()$/;"	f	class:pcl::opencv::EdgeDetector
getWalls	include/pcl/models/localmodel.h	/^      Plane3DVector getWalls () const$/;"	f	class:pcl::LocalModel
getWalls	include/pcl/segmentation/planesegmentation.h	/^      Plane3DVector getWalls ()$/;"	f	class:pcl::PlaneSegmentation
getWeight	include/pcl/common/noise_model.h	/^      getWeight(const int& index) { return weights_[index]; }$/;"	f	class:pcl::QuadraticIsotropicNoise
getWeight	include/pcl/common/noise_model.h	/^      getWeight(const int& index)$/;"	f	class:pcl::NoiseModel
globalModel	include/pcl/apps/stairdetectiondemo.h	/^      pcl::GlobalModel<PointOut> globalModel;$/;"	m	class:pcl::StairDetectionDemo
globalModel	include/pcl/apps/stairdetectionlocal.h	/^      pcl::GlobalModel<PointOut> globalModel;$/;"	m	class:pcl::StairDetectionLocal
hasRiser	include/pcl/types/step.h	/^      inline bool hasRiser () const$/;"	f	class:pcl::Step
hasTread	include/pcl/types/step.h	/^      inline bool hasTread () const$/;"	f	class:pcl::Step
height	include/pcl/types/plane3d.h	/^      float length, lDepth, rDepth, height;$/;"	m	class:pcl::Plane3D
high_thresh	src/pcl/apps/contours.cpp	/^int high_thresh  = 40;$/;"	v
horznumberOfRays	tests/test_fpe.cpp	/^  int horznumberOfRays;$/;"	m	class:Test_FPE	file:
houghP	include/pcl/opencv/cvutils.h	/^    void houghP (const cv::Mat& src, int low, int high, cv::Mat& cdst, cv::vector<cv::Vec4i>& lines,$/;"	f	namespace:pcl::opencv
hough_maxGap	src/pcl/apps/contours.cpp	/^int hough_maxGap = 10;$/;"	v
hough_minLenght	src/pcl/apps/contours.cpp	/^int hough_minLenght = 50;$/;"	v
hough_thresh	src/pcl/apps/contours.cpp	/^int hough_thresh = 80;$/;"	v
icp	include/pcl/registration/icp_dirk.h	/^  void icp (typename pcl::PointCloud<PointT>::Ptr cloud_target_ptr,$/;"	f	namespace:pcl
icp2	include/pcl/registration/icp_dirk.h	/^  void icp2 (typename pcl::PointCloud<PointT>::Ptr cloud_target_ptr,$/;"	f	namespace:pcl
icp4	include/pcl/registration/icp_dirk.h	/^  void icp4 (typename pcl::PointCloud<PointT>::Ptr cloud_target_ptr_in,$/;"	f	namespace:pcl
icp5	include/pcl/registration/icp_dirk.h	/^  void icp5 (typename pcl::PointCloud<PointT>::Ptr cloud_target_ptr_in,$/;"	f	namespace:pcl
id	include/pcl/common/fhg_point_types.h	/^        int id;$/;"	m	struct:pcl::_PointMoXYZRGBNormal
id	include/pcl/common/fhg_point_types.h	/^      int id;$/;"	m	struct:pcl::_PointMoXYZRGB
id	include/pcl/common/impl/fhg_point_types.hpp	/^      int id;$/;"	m	struct:_PointMoXYZRGBNormal
id	include/pcl/common/impl/fhg_point_types.hpp	/^    int id;$/;"	m	struct:_PointMoXYZRGB
id	include/pcl/histogram/linesegmenthistogram.h	/^      float rangeMin, rangeMax;int id;$/;"	m	class:pcl::LineSegmentBin
id	include/pcl/opencv/linesegment2d.h	/^    int id;$/;"	m	class:pcl::LineSegment2D
id	include/pcl/opencv/linesegment2dhistogram.h	/^    int id;$/;"	m	class:pcl::ColumnBin
id	include/pcl/opencv/linesegment2dhistogram.h	/^    int id;$/;"	m	class:pcl::RowBin
id	include/pcl/types/linesegment3d.h	/^      Eigen::Vector3f normal, center;int id;$/;"	m	class:pcl::LineSegment3D
id	include/pcl/types/plane3d.h	/^      size_t id;$/;"	m	class:pcl::Plane3D
id	include/pcl/types/step.h	/^      size_t id;$/;"	m	class:pcl::Step
images	include/pcl/opencv/imageconcat.h	/^        std::vector<cv::Mat> images;$/;"	m	class:pcl::opencv::ImageConcatenator
inCloud	include/pcl/apps/stairdetectiondemo.h	/^      typename pcl::PointCloud<PointIn>::ConstPtr inCloud;$/;"	m	class:pcl::StairDetectionDemo
inCloud	include/pcl/apps/stairdetectionlocal.h	/^      typename pcl::PointCloud<PointIn>::ConstPtr inCloud;$/;"	m	class:pcl::StairDetectionLocal
inCloud	src/pcl/apps/stairdetectorlocalXtion.cpp	/^                pcl::PointCloud<pcl::PointXYZRGB>::Ptr inCloud, inCloud_;$/;"	m	class:SimpleOpenNIViewer	file:
inCloud_	src/pcl/apps/stairdetectorlocalXtion.cpp	/^                pcl::PointCloud<pcl::PointXYZRGB>::Ptr inCloud, inCloud_;$/;"	m	class:SimpleOpenNIViewer	file:
inSegment	include/pcl/common/linesegment2d_common.h	/^      inSegment (T1 P, T2 S)$/;"	f	namespace:pcl::common
incrementGlobalTranslation	include/pcl/models/globalmodel.h	/^      void incrementGlobalTranslation (const PointT& localTranslation, float maxPercent = 30)$/;"	f	class:pcl::GlobalModel
incrementalTransform	include/pcl/models/globalmodel.h	/^      Eigen::Matrix4f incrementalTransform;$/;"	m	class:pcl::GlobalModel
index	include/pcl/histogram/abstract_histogram.h	/^    int index;$/;"	m	struct:pcl::_IBin
index	include/pcl/types/plane3d_utils.h	/^        int index;$/;"	m	struct:pcl::utils::Plane3DComparator
indices2Cloud	include/pcl/utils/pointcloud_utils.h	/^    indices2Cloud (const pcl::PointCloud<PointT>& inCloud, const std::vector<std::vector<int> >& indices)$/;"	f	namespace:pcl
info_arch	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_platform	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
init	include/pcl/opencv/linesegment2dhistogram.h	/^    init ()$/;"	f	class:pcl::LineSegment2DHistogram
initBins	include/pcl/histogram/linesegmenthistogram.h	/^      initBins ()$/;"	f	class:pcl::LineSegmentHistogram
initBins	include/pcl/opencv/linesegment2dhistogram.h	/^    initBins ()$/;"	f	class:pcl::LineSegment2DHistogram
initCluster	include/pcl/segmentation/region_segmentation.h	/^        inline void initCluster (const int& point_idx)$/;"	f	class:pcl::segmentation::ApproximatePlaneRegionSegmentation
initCluster	include/pcl/segmentation/region_segmentation.h	/^        inline void initCluster (const int& seed_point_idx)$/;"	f	class:pcl::segmentation::AverageNormalRegionSegmentation
initCluster	include/pcl/segmentation/region_segmentation.h	/^        inline void initCluster (const int& seed_point_idx)$/;"	f	class:pcl::segmentation::InitialNormalRegionSegmentation
initCluster	include/pcl/segmentation/region_segmentation.h	/^        inline void initCluster (const int& seed_point_idx)$/;"	f	class:pcl::segmentation::LastNormalRegionSegmentation
initCluster	include/pcl/segmentation/region_segmentation.h	/^        inline void initCluster (const int& seed_point_idx)$/;"	f	class:pcl::segmentation::ProbabilisticPlaneRegionSegmentation
initCluster	include/pcl/segmentation/region_segmentation.h	/^        virtual inline void initCluster (const int& seed_point_idx)$/;"	f	class:pcl::segmentation::RegionSegmentation
initHistogram	include/pcl/histogram/linesegment3dhistogram.h	/^      initHistogram ()$/;"	f	class:pcl::LineSegment3DHistogram
initHistogram	include/pcl/histogram/planehistogram.h	/^      void initHistogram ()$/;"	f	class:pcl::PlaneHistogram
initHistogram	include/pcl/histogram/planehistogram.h	/^      void initHistogram (float stepSize)$/;"	f	class:pcl::PlaneHistogram
initHistogram	include/pcl/histogram/planehistogram.h	/^      void initHistogram (int numBins)$/;"	f	class:pcl::PlaneHistogram
initNaNPoint	include/pcl/common/point_common.h	/^  inline PointT initNaNPoint ()$/;"	f	namespace:pcl
initZeroPoint	include/pcl/common/point_common.h	/^  inline PointT initZeroPoint ()$/;"	f	namespace:pcl
inputCloud	include/pcl/types/linesegment3d.h	/^      typename pcl::PointCloud<PointT>::Ptr cloud, inputCloud;$/;"	m	class:pcl::LineSegment3D
inputPath	tests/test_fpe.cpp	/^  string inputPath;$/;"	m	class:Test_FPE	file:
insertStep	include/pcl/models/globalmodel.h	/^      void insertStep (typename StepsVector::iterator& it, const Step<PointT>& step)$/;"	f	class:pcl::GlobalModel
intersect2D_Segments	include/pcl/common/linesegment2d_common.h	/^      intersect2D_Segments (T s1p0, T s1p1, T s2p0, T s2p1, T I0, T I1)$/;"	f	namespace:pcl::common
io	include/pcl/io/globfitwriter.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/mo_io.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/mopcd_io.h	/^  namespace io$/;"	n	namespace:pcl
isHorizontal	include/pcl/common/math.h	/^  isHorizontal (Eigen::Vector3f vec1, Eigen::Vector3f vec2, float ANGLE_THRESHHOLD = 15)$/;"	f	namespace:pcl
isHorizontal	include/pcl/opencv/linesegment2d.h	/^    isHorizontal ()$/;"	f	class:pcl::LineSegment2D
isHorizontal	include/pcl/types/plane3d.h	/^      inline bool isHorizontal () const$/;"	f	class:pcl::Plane3D
isHorizontal	include/pcl/types/plane3d.h	/^      inline bool isHorizontal (Eigen::Vector3f refVector) const$/;"	f	class:pcl::Plane3D
isINTERSECTINGPARAM	tests/test_fpe.cpp	/^  double isINTERSECTINGPARAM;$/;"	m	class:Test_FPE	file:
isLanding	include/pcl/types/step.h	/^      bool isLanding () const$/;"	f	class:pcl::Step
isLanding	include/pcl/types/tread.h	/^      isLanding () const$/;"	f	class:pcl::Tread
isLineSegmentsIntersectFinite	include/pcl/common/linesegment2d_common.h	/^    isLineSegmentsIntersectFinite (int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4)$/;"	f	namespace:pcl::common
isLineSegmentsIntersectInfinite	include/pcl/common/linesegment2d_common.h	/^    isLineSegmentsIntersectInfinite (int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4)$/;"	f	namespace:pcl::common
isLookingDownstairs	include/pcl/models/localmodel.h	/^      bool isLookingDownstairs () const$/;"	f	class:pcl::LocalModel
isLookingUpstairs	include/pcl/models/localmodel.h	/^      bool isLookingUpstairs () const$/;"	f	class:pcl::LocalModel
isMinimalSize	include/pcl/types/plane3d.h	/^      inline bool isMinimalSize () const$/;"	f	class:pcl::Plane3D
isNanPoint	include/pcl/common/point_common.h	/^  bool isNanPoint (const PointT& point)$/;"	f	namespace:pcl
isP1Set	include/pcl/types/types.h	/^      inline bool isP1Set() {$/;"	f	class:pcl::LineSegment
isP2Set	include/pcl/types/types.h	/^      inline bool isP2Set() {$/;"	f	class:pcl::LineSegment
isRiser	include/pcl/types/plane3d.h	/^      inline bool isRiser () const$/;"	f	class:pcl::Plane3D
isStandardSize	include/pcl/types/plane3d.h	/^      inline bool isStandardSize () const$/;"	f	class:pcl::Plane3D
isTread	include/pcl/types/plane3d.h	/^      inline bool isTread () const$/;"	f	class:pcl::Plane3D
isValid	include/pcl/common/noise_model.h	/^  template <typename PointT> inline bool isValid(const PointT& point)$/;"	f	namespace:pcl
isValid	include/pcl/types/types.h	/^      isValid ()$/;"	f	class:pcl::LineSegment
isVertical	include/pcl/common/math.h	/^  isVertical (Eigen::Vector3f vec1, Eigen::Vector3f vec2, float ANGLE_THRESHHOLD = 15)$/;"	f	namespace:pcl
isVertical	include/pcl/opencv/linesegment2d.h	/^    isVertical ()$/;"	f	class:pcl::LineSegment2D
isVertical	include/pcl/types/plane3d.h	/^      inline bool isVertical () const$/;"	f	class:pcl::Plane3D
isVertical	include/pcl/types/plane3d.h	/^      inline bool isVertical (Eigen::Vector3f refVector) const$/;"	f	class:pcl::Plane3D
isWall	include/pcl/types/plane3d_utils.h	/^    bool isWall (const Plane3D<PointT>& plane)$/;"	f	namespace:pcl::utils
isZeroPoint	include/pcl/common/point_common.h	/^  bool isZeroPoint (const PointT& point)$/;"	f	namespace:pcl
itnegralImageNormal	include/pcl/common/pcl_commons.h	/^    itnegralImageNormal (const pcl::PointCloud<PointT>& cloud)$/;"	f	namespace:pcl
itnegralImageNormal	src/pcl/apps/pcd_to_normalsimg.cpp	/^  itnegralImageNormal (typename pcl::PointCloud<PointT>::ConstPtr cloud, float depthChangeFactor = 0.02f, float normalSmoothSize = 10.0f)$/;"	f
lDepth	include/pcl/types/plane3d.h	/^      float length, lDepth, rDepth, height;$/;"	m	class:pcl::Plane3D
lastAddedPoints	include/pcl/types/plane3d.h	/^      std::vector<PointT, Eigen::aligned_allocator<PointT> > lastAddedPoints;$/;"	m	class:pcl::Plane3D
lastGlobalModelCloud	include/pcl/models/globalmodel.h	/^      typename pcl::PointCloud<PointT>::Ptr lastGlobalModelCloud;$/;"	m	class:pcl::GlobalModel
last_normal_	include/pcl/segmentation/region_segmentation.h	/^        Eigen::Vector3f last_normal_;$/;"	m	class:pcl::segmentation::LastNormalRegionSegmentation
ledger_update	tests/test_fpe.cpp	/^  bool ledger_update, divideby1000, rotate_all;$/;"	m	class:Test_FPE	file:
length	include/pcl/types/linesegment3d.h	/^      float length;$/;"	m	class:pcl::LineSegment3D
length	include/pcl/types/plane3d.h	/^      float length, lDepth, rDepth, height;$/;"	m	class:pcl::Plane3D
lineModel	include/pcl/opencv/linesegment2d.h	/^    cv::Vec4i lineModel;$/;"	m	class:pcl::LineSegment2D
lines	include/pcl/histogram/linesegment3dhistogram.h	/^      LineVector lines, outLines;$/;"	m	class:pcl::LineSegment3DHistogram
lines	include/pcl/histogram/linesegmenthistogram.h	/^      LineVector lines;$/;"	m	class:pcl::LineSegmentBin
lines	include/pcl/histogram/linesegmenthistogram.h	/^      LineVector lines;$/;"	m	class:pcl::LineSegmentHistogram
lines	include/pcl/models/edges2planesfactory.h	/^      std::vector<LineSegment3D<PointT> , Eigen::aligned_allocator<PointT> > lines;$/;"	m	class:pcl::Edges2PlanesFactory
lines	include/pcl/opencv/linesegment2dhistogram.h	/^    LineVector lines;$/;"	m	class:pcl::ColumnBin
lines	include/pcl/opencv/linesegment2dhistogram.h	/^    LineVector lines;$/;"	m	class:pcl::LineSegment2DHistogram
lines2Cloud	include/pcl/common/edges_common.h	/^  typename pcl::PointCloud<PointT>::Ptr lines2Cloud ($/;"	f	namespace:pcl
lines2Trails	include/pcl/models/model_utils.h	/^      lines2Trails (const std::vector<pcl::LineSegment3D<PointT>, Eigen::aligned_allocator<PointT> >& inlines)$/;"	f	namespace:pcl::model
linesModel	include/pcl/types/plane3d.h	/^      std::vector<LineSegment3D<PointT>, Eigen::aligned_allocator<PointT> > linesModel;$/;"	m	class:pcl::Plane3D
linesToCloud	include/pcl/opencv/cvutils.h	/^    void linesToCloud (const typename pcl::PointCloud<PointT>::ConstPtr inputCloud, std::vector<LineSegment2D> lines,$/;"	f	namespace:pcl::opencv
loadData	tests/icp_vis.cpp	/^void loadData (int argc, char **argv, std::vector<PCD, Eigen::aligned_allocator<PCD> > &models)$/;"	f
localModel	include/pcl/models/modelsampler.h	/^      LocalModel<PointT> localModel;$/;"	m	class:pcl::ModelSampler
localModels	include/pcl/models/globalmodel.h	/^      std::deque<LocalModel<PointT> > localModels;$/;"	m	class:pcl::GlobalModel
logBins	include/pcl/opencv/linesegment2dhistogram.h	/^    logBins ()$/;"	f	class:pcl::LineSegment2DHistogram
logContent	include/pcl/histogram/planehistogram.h	/^      void logContent ()$/;"	f	class:pcl::PlaneHistogram
logContents	include/pcl/histogram/linesegment3dhistogram.h	/^      logContents ()$/;"	f	class:pcl::LineSegment3DHistogram
logHistogramStructure	include/pcl/histogram/linesegment3dhistogram.h	/^      logHistogramStructure ()$/;"	f	class:pcl::LineSegment3DHistogram
logHistogramStructure	include/pcl/histogram/planehistogram.h	/^      void logHistogramStructure ()$/;"	f	class:pcl::PlaneHistogram
logLine	include/pcl/types/impl/linesegment3d.hpp	/^inline void pcl::LineSegment3D<PointT>::logLine () const$/;"	f	class:pcl::LineSegment3D
logLine	include/pcl/types/linesegment3d.h	/^      logLine () const$/;"	f	class:pcl::LineSegment3D
logLines	include/pcl/common/linesegment2d_common.h	/^    logLines (const std::vector<LineSegment2D>& lines)$/;"	f	namespace:pcl::common
logLines	include/pcl/common/linesegment3d_common.h	/^  logLines (const std::vector<LineSegment3D<PointT> , Eigen::aligned_allocator<PointT> >& lines)$/;"	f	namespace:pcl
logLines	include/pcl/opencv/edgesdetector.h	/^        void logLines (const LineSegment3DVector& lines)$/;"	f	class:pcl::opencv::EdgeDetector
logMatrix	include/pcl/opencv/linesegment2dhistogram.h	/^    logMatrix ()$/;"	f	class:pcl::LineSegment2DHistogram
logModel	include/pcl/apps/stairdetectiondemo.h	/^      void logModel (LocalModel<PointOut> model)$/;"	f	class:pcl::StairDetectionDemo
logModel	include/pcl/apps/stairdetectionlocal.h	/^      void logModel (LocalModel<PointOut> model)$/;"	f	class:pcl::StairDetectionLocal
logNormals	include/pcl/segmentation/planesegmentation.h	/^      void logNormals (std::vector<Eigen::Vector3f> normals)$/;"	f	class:pcl::PlaneSegmentation
logPlane	include/pcl/types/plane3d.h	/^      inline void logPlane () const$/;"	f	class:pcl::Plane3D
logPlanes	include/pcl/models/localmodelfactory.h	/^      void logPlanes ()$/;"	f	class:pcl::LocalModelFactory
logPlanes	include/pcl/segmentation/planesegmentation.h	/^      void logPlanes (Plane3DVector& planes)$/;"	f	class:pcl::PlaneSegmentation
logPlanes	include/pcl/types/plane3d_utils.h	/^    void logPlanes (const std::vector<Plane3D<PointT>, Eigen::aligned_allocator<PointT> >& planes)$/;"	f	namespace:pcl::utils
logStep	include/pcl/types/step.h	/^      void logStep () const$/;"	f	class:pcl::Step
logSteps	include/pcl/models/localmodel.h	/^      void logSteps () const$/;"	f	class:pcl::LocalModel
logSteps	include/pcl/models/localmodelfactory.h	/^      void logSteps (const StepsVector& steps) const$/;"	f	class:pcl::LocalModelFactory
logStepsModified	include/pcl/models/localmodel.h	/^      void logStepsModified ()$/;"	f	class:pcl::LocalModel
low_thresh	src/pcl/apps/contours.cpp	/^int low_thresh = 20;$/;"	v
main	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/pcl/apps/blackbg_to_white.cpp	/^int main (int argc, char **argv)$/;"	f
main	src/pcl/apps/contours.cpp	/^main (int argc, char** argv)$/;"	f
main	src/pcl/apps/normalsvis.cpp	/^int main (int argc, char **argv)$/;"	f
main	src/pcl/apps/pcd_to_normalsimg.cpp	/^main (int argc, char **argv)$/;"	f
main	src/pcl/apps/pcd_to_rgb.cpp	/^main (int argc, char **argv)$/;"	f
main	src/pcl/apps/pdd.cpp	/^int main(int argc, char **argv) {$/;"	f
main	src/pcl/apps/playground.cpp	/^int main(int argc, char **argv) {$/;"	f
main	src/pcl/apps/resultsparser.cpp	/^main (int argc, char **argv)$/;"	f
main	src/pcl/apps/smooth.cpp	/^main (int argc, char** argv)$/;"	f
main	src/pcl/apps/stairdetectorlocalXtion.cpp	/^int main (int argc, char **argv)$/;"	f
main	src/pcl/apps/stairdetectorlocalpcds.cpp	/^int main (int argc, char **argv)$/;"	f
main	src/pcl/apps/stairdetectorpcds.cpp	/^int main (int argc, char **argv)$/;"	f
main	tests/binding_test.cpp	/^int main (int argc, char** argv)$/;"	f
main	tests/icp_vis.cpp	/^int main (int argc, char** argv)$/;"	f
main	tests/opencv_reproject_image_pcl.cpp	/^int main( int argc, char** argv )$/;"	f
main	tests/playground.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tests/test_fpe.cpp	/^main (int argc, char** argv)$/;"	f
makeCompleteSegmentations	include/pcl/segmentation/region_segmentation.h	/^        inline void makeCompleteSegmentations (bool make_complete_segmentation)$/;"	f	class:pcl::segmentation::RegionSegmentation
makeNormalColors	include/pcl/surface/surface_functions.h	/^    template<typename PointT> inline void makeNormalColors (pcl::PointCloud<PointT>& cloud)$/;"	f	namespace:pcl::surface
makeShared	include/pcl/kdtree/fixed_neighbors.h	/^	inline Ptr makeShared() {$/;"	f	class:pcl::FixedNeighbors
makeShared	include/pcl/types/plane3d.h	/^      inline Ptr makeShared ()$/;"	f	class:pcl::Plane3D
makeShared	include/pcl/types/riser.h	/^      makeShared ()$/;"	f	class:pcl::Riser
makeShared	include/pcl/types/tread.h	/^      makeShared ()$/;"	f	class:pcl::Tread
make_complete_segmentation_	include/pcl/segmentation/region_segmentation.h	/^        bool make_complete_segmentation_;$/;"	m	class:pcl::segmentation::RegionSegmentation
mat_bi	src/pcl/apps/smooth.cpp	/^Mat dst, cdst, mat_hom, mat_gauss, mat_median, mat_bi;$/;"	v
mat_gauss	src/pcl/apps/smooth.cpp	/^Mat dst, cdst, mat_hom, mat_gauss, mat_median, mat_bi;$/;"	v
mat_hom	src/pcl/apps/smooth.cpp	/^Mat dst, cdst, mat_hom, mat_gauss, mat_median, mat_bi;$/;"	v
mat_median	src/pcl/apps/smooth.cpp	/^Mat dst, cdst, mat_hom, mat_gauss, mat_median, mat_bi;$/;"	v
matrix	include/pcl/histogram/linesegment3dhistogram.h	/^      Bin<LineSegment3D<PointT> , 1> matrix;$/;"	m	class:pcl::LineSegment3DHistogram
matrix	include/pcl/histogram/planehistogram.h	/^      Bin<T, 1> matrix;$/;"	m	class:pcl::PlaneHistogram
matrix	include/pcl/opencv/linesegment2dhistogram.h	/^    BinsMatrix matrix, oldMatrix;$/;"	m	class:pcl::LineSegment2DHistogram
max	include/pcl/histogram/linesegmenthistogram.h	/^      float min, max;$/;"	m	class:pcl::LineSegmentHistogram
maxAngleDeviation	tests/test_fpe.cpp	/^  double MAXPLANEDISTANCE, maxAngleDeviation;$/;"	m	class:Test_FPE	file:
maxDistLinesOnSamePlane	include/pcl/models/edges2planesfactory.h	/^      const static float maxDistLinesOnSamePlane = 0.04;$/;"	m	class:pcl::Edges2PlanesFactory
maxDistLinesOnSamePlane	include/pcl/types/plane3d.h	/^      const static float maxDistLinesOnSamePlane = 0.15;$/;"	m	class:pcl::Plane3D
maxDistanceThreshold	include/pcl/histogram/planehistogram.h	/^      float maxDistanceThreshold;$/;"	m	class:pcl::PlaneHistogram
maxPARALELLANG_DEG	tests/test_fpe.cpp	/^  double maxPARALELLANG_DEG;$/;"	m	class:Test_FPE	file:
maxR	include/pcl/opencv/linesegment2dhistogram.h	/^    float minR, maxR, minTheta, maxTheta;$/;"	m	class:pcl::LineSegment2DHistogram
maxRiserHeight	include/pcl/types/plane3d.h	/^      const static float maxRiserHeight = 0.30;$/;"	m	class:pcl::Plane3D
maxRotationDeviationBetLines	include/pcl/models/edges2planesfactory.h	/^      const static float maxRotationDeviationBetLines = 15;$/;"	m	class:pcl::Edges2PlanesFactory
maxTheta	include/pcl/opencv/linesegment2dhistogram.h	/^    float minR, maxR, minTheta, maxTheta;$/;"	m	class:pcl::LineSegment2DHistogram
maxX	include/pcl/opencv/linesegment2dhistogram.h	/^    float maxY, maxX;$/;"	m	class:pcl::LineSegment2DHistogram
maxXDist	include/pcl/apps/stairdetector.h	/^      static const float maxXDist = 0.8;$/;"	m	class:pcl::StairDetector
maxXDist	include/pcl/models/localmodelfactory.h	/^      static const float maxXDist = 0.4;$/;"	m	class:pcl::LocalModelFactory
maxY	include/pcl/opencv/linesegment2dhistogram.h	/^    float maxY, maxX;$/;"	m	class:pcl::LineSegment2DHistogram
maxYDist	include/pcl/apps/stairdetector.h	/^      static const float maxYDist = 0.4;$/;"	m	class:pcl::StairDetector
maxYDist	include/pcl/models/localmodelfactory.h	/^      static const float maxYDist = 0.8;$/;"	m	class:pcl::LocalModelFactory
maxZDist	include/pcl/apps/stairdetector.h	/^      static const float maxZDist = 0.4;$/;"	m	class:pcl::StairDetector
maxZDist	include/pcl/models/localmodelfactory.h	/^      static const float maxZDist = 0.4;$/;"	m	class:pcl::LocalModelFactory
max_distance_	include/pcl/kdtree/fixed_neighbors.h	/^	float max_distance_;$/;"	m	class:pcl::FixedNeighbors
max_distance_	include/pcl/segmentation/region_segmentation.h	/^        float max_distance_;$/;"	m	class:pcl::segmentation::ApproximatePlaneRegionSegmentation
max_distance_	include/pcl/segmentation/region_segmentation.h	/^        float max_distance_;$/;"	m	class:pcl::segmentation::ProbabilisticPlaneRegionSegmentation
max_iterations	include/pcl/types/linesegment3d.h	/^      float max_iterations;$/;"	m	class:pcl::LineSegment3D
max_mse_	include/pcl/segmentation/region_segmentation.h	/^        float max_mse_;$/;"	m	class:pcl::segmentation::ProbabilisticPlaneRegionSegmentation
max_pts_per_cluster_	include/pcl/segmentation/region_segmentation.h	/^        int max_pts_per_cluster_;$/;"	m	class:pcl::segmentation::RegionSegmentation
max_thresh	src/pcl/apps/contours.cpp	/^int max_thresh = 100;$/;"	v
maximum_displayed_correspondences_	include/pcl/visualization/registration_visualizer2.h	/^      size_t maximum_displayed_correspondences_;$/;"	m	class:pcl::RegistrationVisualizer2
merge2Lines	include/pcl/common/linesegment2d_common.h	/^    merge2Lines (LineSegment2D& line1, LineSegment2D& line2, float dominantAngle)$/;"	f	namespace:pcl::common
mergeCycles	tests/test_fpe.cpp	/^  bool planes_merge;int mergeCycles;$/;"	m	class:Test_FPE	file:
mergeLines	include/pcl/histogram/linesegment3dhistogram.h	/^      mergeLines ()$/;"	f	class:pcl::LineSegment3DHistogram
mergeLines	include/pcl/histogram/linesegment3dhistogram.h	/^      mergeLines (Bin<LineSegment3D<PointT> , 0>& bin)$/;"	f	class:pcl::LineSegment3DHistogram
mergeLines	include/pcl/histogram/linesegmenthistogram.h	/^      mergeLines (LineSegmentBin<PointT>& bin)$/;"	f	class:pcl::LineSegmentHistogram
mergeLines2	include/pcl/histogram/linesegment3dhistogram.h	/^      mergeLines2 (Bin<LineSegment3D<PointT> , 0>& bin)$/;"	f	class:pcl::LineSegment3DHistogram
mergeLines2	include/pcl/opencv/linesegment2dhistogram.h	/^    mergeLines2 (ColumnBin& bin)$/;"	f	class:pcl::LineSegment2DHistogram
mergeLinesP	include/pcl/opencv/linesegment2dhistogram.h	/^    mergeLinesP (ColumnBin& bin)$/;"	f	class:pcl::LineSegment2DHistogram
mergeLinesP	include/pcl/opencv/linesegment2dhistogram.h	/^    mergeLinesP (int row, int column)$/;"	f	class:pcl::LineSegment2DHistogram
mergeLinesP2	include/pcl/opencv/linesegment2dhistogram.h	/^    mergeLinesP2 (ColumnBin& bin)$/;"	f	class:pcl::LineSegment2DHistogram
mergeLocalToGlobalModel	include/pcl/models/globalmodel.h	/^      bool mergeLocalToGlobalModel (LocalModel<PointT>& localModel)$/;"	f	class:pcl::GlobalModel
mergeNeighboringLines	include/pcl/common/linesegment2d_common.h	/^    mergeNeighboringLines (std::vector<pcl::LineSegment2D>& lines, float dominantAngle, float angleThreshold = 20,$/;"	f	namespace:pcl::common
mergePlanes	include/pcl/histogram/planehistogram.h	/^      virtual void mergePlanes ()$/;"	f	class:pcl::PlaneHistogram
mergePlanes	include/pcl/models/localmodelfactory.h	/^      void mergePlanes ()$/;"	f	class:pcl::LocalModelFactory
mergePlanes	include/pcl/types/plane3d_utils.h	/^    std::vector<Plane3D<PointT>, Eigen::aligned_allocator<PointT> > mergePlanes ($/;"	f	namespace:pcl::utils
mergePlanes2	include/pcl/segmentation/planesegmentation.h	/^      void mergePlanes2 (Plane3DVector& planes)$/;"	f	class:pcl::PlaneSegmentation
mergeWalls	include/pcl/models/localmodelfactory.h	/^      void mergeWalls ()$/;"	f	class:pcl::LocalModelFactory
mergeWalls	include/pcl/segmentation/planesegmentation.h	/^      Plane3DVector mergeWalls (const Plane3DVector& walls)$/;"	f	class:pcl::PlaneSegmentation
mesh	include/pcl/apps/fast_meshing.h	/^      void mesh(const PointCloudConstPtr &cloud, pcl::PolygonMesh::Ptr& mesh, std::vector<int>& indices)$/;"	f	class:pcl::FastMeshing
mesh	include/pcl/segmentation/planesegmentation.h	/^      pcl::PolygonMesh::Ptr mesh;$/;"	m	class:pcl::PlaneSegmentation
migrateNeighboringBins2	include/pcl/opencv/linesegment2dhistogram.h	/^    migrateNeighboringBins2 ()$/;"	f	class:pcl::LineSegment2DHistogram
migrateNeighboringLines	include/pcl/opencv/linesegment2dhistogram.h	/^    migrateNeighboringLines (int row1, int col1, int row2, int col2, float tLowerBound, float tUpperBound,$/;"	f	class:pcl::LineSegment2DHistogram
min	include/pcl/histogram/linesegmenthistogram.h	/^      float min, max;$/;"	m	class:pcl::LineSegmentHistogram
minDistBetLines	include/pcl/models/edges2planesfactory.h	/^      const static float minDistBetLines = 0.05;$/;"	m	class:pcl::Edges2PlanesFactory
minLandingDepth	include/pcl/types/tread.h	/^      const static float minLandingDepth = 0.5f;$/;"	m	class:pcl::Tread
minLandingLength	include/pcl/types/tread.h	/^      const static float minLandingLength = 0.5f;$/;"	m	class:pcl::Tread
minR	include/pcl/opencv/linesegment2dhistogram.h	/^    float minR, maxR, minTheta, maxTheta;$/;"	m	class:pcl::LineSegment2DHistogram
minRiserHeight	include/pcl/types/plane3d.h	/^      const static float minRiserHeight = 0.05f;$/;"	m	class:pcl::Plane3D
minStepDepth	include/pcl/models/localmodelfactory.h	/^      static const float minStepDepth = 0.1;$/;"	m	class:pcl::LocalModelFactory
minStepHeight	include/pcl/models/localmodelfactory.h	/^      static const float minStepHeight = 0.1;$/;"	m	class:pcl::LocalModelFactory
minStepLength	include/pcl/models/localmodelfactory.h	/^      static const float minStepLength = 0.5;$/;"	m	class:pcl::LocalModelFactory
minStepLength	include/pcl/types/plane3d.h	/^      static const float minStepLength = 0.2f;$/;"	m	class:pcl::Plane3D
minTheta	include/pcl/opencv/linesegment2dhistogram.h	/^    float minR, maxR, minTheta, maxTheta;$/;"	m	class:pcl::LineSegment2DHistogram
minTreadDepth	include/pcl/types/plane3d.h	/^      const static float minTreadDepth = 0.1f;$/;"	m	class:pcl::Plane3D
min_pts_per_cluster_	include/pcl/segmentation/region_segmentation.h	/^        int min_pts_per_cluster_;$/;"	m	class:pcl::segmentation::RegionSegmentation
model	include/pcl/io/globfitwriter.h	/^        LocalModel<PointT> model;$/;"	m	class:pcl::io::GlobfitWriter
model	include/pcl/models/model_utils.h	/^  namespace model$/;"	n	namespace:pcl
model	include/pcl/types/linesegment3d.h	/^      std::vector<PointT, Alloc> model;$/;"	m	class:pcl::LineSegment3D
model_coefficients	include/pcl/types/linesegment3d.h	/^      Eigen::VectorXf model_coefficients;$/;"	m	class:pcl::LineSegment3D
moloadPCDFile	include/pcl/io/mopcd_io.h	/^      moloadPCDFile (char *path, pcl::PointCloud<PointOut>& outCloud)$/;"	f	namespace:pcl::io
mult1000	include/pcl/utils/pointcloud_utils.h	/^    mult1000 (pcl::PointCloud<PointT>& source)$/;"	f	namespace:pcl
nearestKSearch	include/pcl/kdtree/fixed_neighbors.h	/^	int nearestKSearch(const PointT &p_q, int k, std::vector<int> &k_indices,$/;"	f	class:pcl::FixedNeighbors
nearestKSearch	include/pcl/kdtree/fixed_neighbors.h	/^	virtual int nearestKSearch(int index, int k, std::vector<int> &k_indices,$/;"	f	class:pcl::FixedNeighbors
nearestKSearch	include/pcl/kdtree/impl/fixed_neighbors.hpp	/^pcl::FixedNeighbors<PointT>::nearestKSearch ($/;"	f	class:pcl::FixedNeighbors
neighbors_	include/pcl/kdtree/fixed_neighbors.h	/^	NeighborhoodVectorConstPtr neighbors_;$/;"	m	class:pcl::FixedNeighbors
new_dist_term	include/pcl/surface/surface_functions.h	/^    inline float new_dist_term (const PointAT& point_a, const PointBT& point_b, const float& w1, const float& w2,$/;"	f	namespace:pcl::surface
noise_model_	include/pcl/segmentation/region_segmentation.h	/^        NoiseModelPtr noise_model_;$/;"	m	class:pcl::segmentation::RegionSegmentation
normal	include/pcl/common/incremental_plane_fitting.h	/^      Eigen::Vector3f normal;$/;"	m	class:pcl::PlaneModel
normal	include/pcl/opencv/linesegment2d.h	/^    Eigen::Vector2f normal;$/;"	m	class:pcl::LineSegment2D
normal	include/pcl/types/linesegment3d.h	/^      Eigen::Vector3f normal, center;int id;$/;"	m	class:pcl::LineSegment3D
normal	include/pcl/types/plane3d.h	/^      Eigen::Vector3f center, normal;$/;"	m	class:pcl::Plane3D
normal_	include/pcl/segmentation/region_segmentation.h	/^        Eigen::Vector3f normal_;$/;"	m	class:pcl::segmentation::InitialNormalRegionSegmentation
normal_sum_	include/pcl/segmentation/region_segmentation.h	/^        Eigen::Vector3f normal_sum_;$/;"	m	class:pcl::segmentation::AverageNormalRegionSegmentation
nr_points_	include/pcl/common/incremental_plane_fitting.h	/^      int nr_points_;$/;"	m	class:pcl::PlaneModelIncremental
nr_points_	include/pcl/segmentation/region_segmentation.h	/^        int nr_points_;$/;"	m	class:pcl::segmentation::ApproximatePlaneRegionSegmentation
numBins	include/pcl/histogram/planehistogram.h	/^      int numBins;$/;"	m	class:pcl::PlaneHistogram
numIterations	include/pcl/apps/stairdetectiondemo.h	/^      int numIterations;$/;"	m	class:pcl::StairDetectionDemo
numIterations	include/pcl/apps/stairdetectionlocal.h	/^      int numIterations;$/;"	m	class:pcl::StairDetectionLocal
numIterations	include/pcl/models/globalmodel.h	/^      int numIterations;$/;"	m	class:pcl::GlobalModel
numIterations	src/pcl/apps/stairdetectorlocalXtion.cpp	/^int numIterations = 0;$/;"	v
numIterations	src/pcl/apps/stairdetectorlocalpcds.cpp	/^int numIterations = 0;$/;"	v
numIterations	src/pcl/apps/stairdetectorpcds.cpp	/^int numIterations = 0;$/;"	v
oldMatrix	include/pcl/opencv/linesegment2dhistogram.h	/^    BinsMatrix matrix, oldMatrix;$/;"	m	class:pcl::LineSegment2DHistogram
opencv	include/pcl/opencv/cvutils.h	/^  namespace opencv$/;"	n	namespace:pcl
opencv	include/pcl/opencv/edge_detection_utils.h	/^  namespace opencv$/;"	n	namespace:pcl
opencv	include/pcl/opencv/edgesdetector.h	/^  namespace opencv$/;"	n	namespace:pcl
opencv	include/pcl/opencv/imageconcat.h	/^  namespace opencv$/;"	n	namespace:pcl
operator ()	include/pcl/apps/stairdetector.h	/^        operator() (const pcl::Plane3D<PointT>& plane1, const pcl::Plane3D<PointT>& plane2)$/;"	f	struct:pcl::StairDetector::Comparator
operator ()	include/pcl/common/point_common.h	/^      bool operator() (const PointT& p1, const PointT& p2)$/;"	f	struct:pcl::PointComparator
operator ()	include/pcl/models/model_utils.h	/^      operator() (LineSegment3D<PointT> line1, LineSegment3D<PointT> line2)$/;"	f	struct:pcl::model::LinesComparator
operator ()	include/pcl/segmentation/planesegmentation.h	/^          bool operator() (const pcl::Plane3D<PointOut>& plane1, const pcl::Plane3D<PointOut>& plane2)$/;"	f	struct:pcl::PlaneSegmentation::Comparator
operator ()	include/pcl/types/plane3d_utils.h	/^        bool operator() (const pcl::Plane3D<PointT>& plane1, const pcl::Plane3D<PointT>& plane2)$/;"	f	struct:pcl::utils::Plane3DComparator
operator ()	tests/icp_vis.cpp	/^    bool operator () (const PCD& p1, const PCD& p2)$/;"	f	struct:PCDComparator
operator +=	include/pcl/types/impl/linesegment3d.hpp	/^pcl::LineSegment3D<PointT>::operator+= (LineSegment3D<PointT>& line)$/;"	f	class:pcl::LineSegment3D
operator +=	include/pcl/types/linesegment3d.h	/^      operator+= (LineSegment3D<PointT>& line)$/;"	f	class:pcl::LineSegment3D
operator +=	include/pcl/types/plane3d.h	/^      operator+= (Plane3D<PointT>& plane)$/;"	f	class:pcl::Plane3D
operator +=	include/pcl/types/riser.h	/^      operator+= (const Riser<PointT>& riser)$/;"	f	class:pcl::Riser
operator +=	include/pcl/types/step.h	/^      operator+= (const Step<PointT>& step)$/;"	f	class:pcl::Step
operator +=	include/pcl/types/tread.h	/^      operator+= (const Tread<PointT>& tread)$/;"	f	class:pcl::Tread
operator <	include/pcl/opencv/linesegment2d.h	/^    operator < (const LineSegment2D& b) const$/;"	f	class:pcl::LineSegment2D
operator <	include/pcl/types/impl/linesegment3d.hpp	/^bool pcl::LineSegment3D<PointT>::operator< (const LineSegment3D<PointT>& line) const$/;"	f	class:pcl::LineSegment3D
operator <	include/pcl/types/linesegment3d.h	/^      operator< (const LineSegment3D<PointT>& line) const$/;"	f	class:pcl::LineSegment3D
operator <	include/pcl/types/plane3d.h	/^      bool operator< (const Plane3D<PointT>& plane) const$/;"	f	class:pcl::Plane3D
operator <	include/pcl/types/step.h	/^      bool operator< (const Step<PointT>& step) const$/;"	f	class:pcl::Step
operator <<	include/pcl/common/fhg_point_types.h	/^  operator << (std::ostream& os, const PointMoXYZRGB& p)$/;"	f	namespace:pcl
operator <<	include/pcl/common/fhg_point_types.h	/^  operator << (std::ostream& os, const PointMoXYZRGBNormal& p)$/;"	f	namespace:pcl
operator <<	include/pcl/common/incremental_plane_fitting.h	/^      operator <<(std::ostream& os, const PlaneModelIncremental& model)$/;"	f	class:pcl::PlaneModelIncremental
operator <<	include/pcl/opencv/linesegment2d.h	/^    operator << (std::ostream& os, const LineSegment2D& l)$/;"	f	class:pcl::LineSegment2D
operator =	include/pcl/histogram/abstract_histogram.h	/^      operator= (const Bin<T, 0>& bin)$/;"	f	struct:pcl::Bin
operator =	include/pcl/histogram/abstract_histogram.h	/^      operator= (const Bin<T, nest>& bin)$/;"	f	struct:pcl::Bin
operator =	include/pcl/histogram/abstract_histogram.h	/^    operator= (const _IBin& bin)$/;"	f	struct:pcl::_IBin
operator =	include/pcl/histogram/linesegmenthistogram.h	/^      operator= (const LineSegmentBin<PointT>& bin)$/;"	f	class:pcl::LineSegmentBin
operator =	include/pcl/models/globalmodel.h	/^          operator= (const Match<PointT>& match)$/;"	f	struct:pcl::GlobalModel::Match
operator =	include/pcl/models/localmodel.h	/^      operator= (const LocalModel<PointT>& model)$/;"	f	class:pcl::LocalModel
operator =	include/pcl/opencv/linesegment2d.h	/^    operator= (const LineSegment2D& line)$/;"	f	class:pcl::LineSegment2D
operator =	include/pcl/opencv/linesegment2dhistogram.h	/^    operator= (const ColumnBin& bin)$/;"	f	class:pcl::ColumnBin
operator =	include/pcl/opencv/linesegment2dhistogram.h	/^    operator= (const RowBin& bin)$/;"	f	class:pcl::RowBin
operator =	include/pcl/types/boundingbox.h	/^      operator= (const BoundingBox<PointT>& bbox)$/;"	f	class:pcl::BoundingBox
operator =	include/pcl/types/impl/linesegment3d.hpp	/^pcl::LineSegment3D<PointT>::operator= (const LineSegment3D<PointT>& line)$/;"	f	class:pcl::LineSegment3D
operator =	include/pcl/types/linesegment3d.h	/^      operator= (const LineSegment3D<PointT>& line)$/;"	f	class:pcl::LineSegment3D
operator =	include/pcl/types/plane3d.h	/^      operator= (const Plane3D<PointT>& plane3d)$/;"	f	class:pcl::Plane3D
operator =	include/pcl/types/riser.h	/^      operator= (const Riser<PointT>& riser)$/;"	f	class:pcl::Riser
operator =	include/pcl/types/step.h	/^      operator= (const Step<PointT>& step)$/;"	f	class:pcl::Step
operator =	include/pcl/types/tread.h	/^      operator= (const Tread<PointT>& tread)$/;"	f	class:pcl::Tread
operator =	include/pcl/types/types.h	/^      LineSegment& operator=(const LineSegment& l) {$/;"	f	class:pcl::LineSegment
operator ==	include/pcl/types/step.h	/^      bool operator== (const Step<PointT>& step)$/;"	f	class:pcl::Step
operator []	include/pcl/histogram/abstract_histogram.h	/^      operator[] (const size_t index)$/;"	f	struct:pcl::Bin
outCloud	include/pcl/io/globfitwriter.h	/^        typename pcl::PointCloud<PointT>::Ptr outCloud;$/;"	m	class:pcl::io::GlobfitWriter
outLines	include/pcl/histogram/linesegment3dhistogram.h	/^      LineVector lines, outLines;$/;"	m	class:pcl::LineSegment3DHistogram
outPlanes	include/pcl/histogram/planehistogram.h	/^      PlanesVector planes, outPlanes;$/;"	m	class:pcl::PlaneHistogram
outputFolder	tests/test_fpe.cpp	/^  string outputFolder;int cloudSeq;$/;"	m	class:Test_FPE	file:
p	include/pcl/apps/stairdetectiondemo.h	/^      pcl::PlaneSegmentation<PointIn, PointOut> p;$/;"	m	class:pcl::StairDetectionDemo
p	include/pcl/apps/stairdetectionlocal.h	/^      pcl::PlaneSegmentation<PointIn, PointOut> p;$/;"	m	class:pcl::StairDetectionLocal
p1	include/pcl/types/types.h	/^      PointT p1, p2;$/;"	m	class:pcl::LineSegment
p1Set	include/pcl/types/types.h	/^      bool p1Set, p2Set;$/;"	m	class:pcl::LineSegment
p2	include/pcl/types/types.h	/^      PointT p1, p2;$/;"	m	class:pcl::LineSegment
p2Set	include/pcl/types/types.h	/^      bool p1Set, p2Set;$/;"	m	class:pcl::LineSegment
pairAlign	tests/icp_vis.cpp	/^void pairAlign (const PointCloud::Ptr cloud_src, const PointCloud::Ptr cloud_tgt, PointCloud::Ptr output,$/;"	f
pcl	include/pcl/apps/fast_meshing.h	/^namespace pcl$/;"	n
pcl	include/pcl/apps/stairdetectiondemo.h	/^namespace pcl$/;"	n
pcl	include/pcl/apps/stairdetectionlocal.h	/^namespace pcl$/;"	n
pcl	include/pcl/apps/stairdetector.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/color.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/commons.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/edges_common.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/fhg_point_types.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/incremental_plane_fitting.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/linesegment2d_common.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/linesegment3d_common.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/math.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/mesh_utilities.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/motime.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/noise_model.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/pcl_commons.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/point_common.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/time.h	/^namespace pcl$/;"	n
pcl	include/pcl/histogram/abstract_histogram.h	/^namespace pcl$/;"	n
pcl	include/pcl/histogram/linesegment3dhistogram.h	/^namespace pcl$/;"	n
pcl	include/pcl/histogram/linesegmenthistogram.h	/^namespace pcl$/;"	n
pcl	include/pcl/histogram/planehistogram.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/globfitwriter.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/mo_io.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/mopcd_io.h	/^namespace pcl$/;"	n
pcl	include/pcl/kdtree/fixed_neighbors.h	/^namespace pcl {$/;"	n
pcl	include/pcl/models/edges2planesfactory.h	/^namespace pcl$/;"	n
pcl	include/pcl/models/globalmodel.h	/^namespace pcl$/;"	n
pcl	include/pcl/models/localmodel.h	/^namespace pcl$/;"	n
pcl	include/pcl/models/localmodelfactory.h	/^namespace pcl$/;"	n
pcl	include/pcl/models/model_utils.h	/^namespace pcl$/;"	n
pcl	include/pcl/models/modelsampler.h	/^namespace pcl$/;"	n
pcl	include/pcl/opencv/cvutils.h	/^namespace pcl$/;"	n
pcl	include/pcl/opencv/edge_detection_utils.h	/^namespace pcl$/;"	n
pcl	include/pcl/opencv/edgesdetector.h	/^namespace pcl$/;"	n
pcl	include/pcl/opencv/imageconcat.h	/^namespace pcl$/;"	n
pcl	include/pcl/opencv/linesegment2d.h	/^namespace pcl$/;"	n
pcl	include/pcl/opencv/linesegment2dhistogram.h	/^namespace pcl$/;"	n
pcl	include/pcl/registration/icp_dirk.h	/^namespace pcl$/;"	n
pcl	include/pcl/registration/myicp.h	/^namespace pcl$/;"	n
pcl	include/pcl/registration/registration_dirk.h	/^namespace pcl$/;"	n
pcl	include/pcl/segmentation/planesegmentation.h	/^namespace pcl$/;"	n
pcl	include/pcl/segmentation/region_segmentation.h	/^namespace pcl$/;"	n
pcl	include/pcl/surface/surface_functions.h	/^namespace pcl$/;"	n
pcl	include/pcl/surface/surface_utils.h	/^namespace pcl$/;"	n
pcl	include/pcl/types/boundingbox.h	/^namespace pcl$/;"	n
pcl	include/pcl/types/linesegment3d.h	/^namespace pcl$/;"	n
pcl	include/pcl/types/plane3d.h	/^namespace pcl$/;"	n
pcl	include/pcl/types/plane3d_utils.h	/^namespace pcl$/;"	n
pcl	include/pcl/types/riser.h	/^namespace pcl$/;"	n
pcl	include/pcl/types/step.h	/^namespace pcl$/;"	n
pcl	include/pcl/types/tread.h	/^namespace pcl$/;"	n
pcl	include/pcl/types/types.h	/^namespace pcl$/;"	n
pcl	include/pcl/utils/pointcloud_utils.h	/^namespace pcl$/;"	n
pcl	include/pcl/visualization/registration_visualizer2.h	/^namespace pcl$/;"	n
perp	include/pcl/common/linesegment2d_common.h	/^      perp (T u, T v)$/;"	f	namespace:pcl::common
placementAligment	include/pcl/models/localmodelfactory.h	/^      LocalModel<PointT> placementAligment (LocalModel<PointT> model)$/;"	f	class:pcl::LocalModelFactory
planeCounter	include/pcl/models/localmodelfactory.h	/^      int planeCounter;$/;"	m	class:pcl::LocalModelFactory
plane_	include/pcl/segmentation/region_segmentation.h	/^        boost::shared_ptr<pcl::PlaneModelIncremental> plane_;$/;"	m	class:pcl::segmentation::ProbabilisticPlaneRegionSegmentation
planes	include/pcl/apps/stairdetector.h	/^      Plane3DVector planes;$/;"	m	class:pcl::StairDetector
planes	include/pcl/histogram/planehistogram.h	/^      PlanesVector planes, outPlanes;$/;"	m	class:pcl::PlaneHistogram
planes	include/pcl/models/localmodelfactory.h	/^      Plane3DVector planes;$/;"	m	class:pcl::LocalModelFactory
planes	include/pcl/segmentation/planesegmentation.h	/^      Plane3DVector planes, rawPlanes, walls;$/;"	m	class:pcl::PlaneSegmentation
planes_merge	tests/test_fpe.cpp	/^  bool planes_merge;int mergeCycles;$/;"	m	class:Test_FPE	file:
pointToVec3d	include/pcl/common/point_common.h	/^  pointToVec3d (PointT input)$/;"	f	namespace:pcl
pointcloud_to_imagenormals	include/pcl/opencv/cvutils.h	/^    void pointcloud_to_imagenormals (pcl::PointCloud<PointT> cloud, cv::Mat& outImage)$/;"	f	namespace:pcl::opencv
pointmo2PointRGB	include/pcl/common/pcl_commons.h	/^    pointmo2PointRGB (pcl::PointCloud<PointIn> input)$/;"	f	namespace:pcl
pointmo2RGB	include/pcl/utils/pointcloud_utils.h	/^    pointmo2RGB (typename pcl::PointCloud<PointIn>::Ptr input)$/;"	f	namespace:pcl
points	include/pcl/opencv/linesegment2d.h	/^    Line points;$/;"	m	class:pcl::LineSegment2D
pos	tests/test_fpe.cpp	/^  pcl::RobotPosition robotPosition;int pos;int camera_tilt;$/;"	m	class:Test_FPE	file:
projectEdges	include/pcl/opencv/edgesdetector.h	/^        std::vector<pcl::LineSegment3D<PointOut>, Eigen::aligned_allocator<PointOut> > projectEdges ($/;"	f	class:pcl::opencv::EdgeDetector
projectPoints	include/pcl/common/incremental_plane_fitting.h	/^  projectPoints(pcl::PointCloud<PointT>& cloud_in, const std::vector<int>& indices, const Eigen::Vector4f& model_coefficients)$/;"	f	namespace:pcl
pt	include/pcl/opencv/lswms.h	/^	cv::Point pt;$/;"	m	struct:_DIR_POINT
pub	tests/test_fpe.cpp	/^  ros::Publisher pub;$/;"	m	class:Test_FPE	file:
publishCloud	tests/test_fpe.cpp	/^  publishCloud (pcl::PointCloud<pcl::PointXYZRGB> cloud, ros::Publisher publisher)$/;"	f	class:Test_FPE
publishMarkers	tests/test_fpe.cpp	/^  publishMarkers (pcl::SmartPlane3DBuilder<XYZD> builder)$/;"	f	class:Test_FPE
push_back	include/pcl/histogram/abstract_histogram.h	/^      push_back (Bin<T, (nest - 1)>& bin)$/;"	f	struct:pcl::Bin
push_back	include/pcl/histogram/abstract_histogram.h	/^      push_back (T& elem)$/;"	f	struct:pcl::Bin
pushbackStep	include/pcl/models/globalmodel.h	/^      void pushbackStep (const Step<PointT>& step)$/;"	f	class:pcl::GlobalModel
r	include/pcl/common/fhg_point_types.h	/^                uint8_t r;$/;"	m	struct:pcl::_PointMoXYZRGBNormal::__anon12::__anon13::__anon14::__anon15
r	include/pcl/common/fhg_point_types.h	/^            uint8_t r;$/;"	m	struct:pcl::_PointMoXYZRGB::__anon9::__anon10::__anon11
r	include/pcl/common/impl/fhg_point_types.hpp	/^              uint8_t r;$/;"	m	struct:_PointMoXYZRGBNormal::__anon5::__anon6::__anon7::__anon8
r	include/pcl/common/impl/fhg_point_types.hpp	/^          uint8_t r;$/;"	m	struct:_PointMoXYZRGB::__anon2::__anon3::__anon4
rDepth	include/pcl/types/plane3d.h	/^      float length, lDepth, rDepth, height;$/;"	m	class:pcl::Plane3D
radianToAngle	include/pcl/common/math.h	/^  radianToAngle (float rad)$/;"	f	namespace:pcl
radiusSearch	include/pcl/kdtree/fixed_neighbors.h	/^	virtual inline int radiusSearch(int index, double radius,$/;"	f	class:pcl::FixedNeighbors
radiusSearch	include/pcl/kdtree/fixed_neighbors.h	/^	virtual int radiusSearch(const PointT &p_q, double radius,$/;"	f	class:pcl::FixedNeighbors
radiusSearch	include/pcl/kdtree/impl/fixed_neighbors.hpp	/^pcl::FixedNeighbors<PointT>::radiusSearch ($/;"	f	class:pcl::FixedNeighbors
rangeMax	include/pcl/histogram/abstract_histogram.h	/^    float rangeMin, rangeMax;$/;"	m	struct:pcl::_IBin
rangeMax	include/pcl/histogram/linesegmenthistogram.h	/^      float rangeMin, rangeMax;int id;$/;"	m	class:pcl::LineSegmentBin
rangeMax	include/pcl/opencv/linesegment2dhistogram.h	/^    float rangeMin, rangeMax;$/;"	m	class:pcl::ColumnBin
rangeMax	include/pcl/opencv/linesegment2dhistogram.h	/^    float rangeMin, rangeMax;$/;"	m	class:pcl::RowBin
rangeMin	include/pcl/histogram/abstract_histogram.h	/^    float rangeMin, rangeMax;$/;"	m	struct:pcl::_IBin
rangeMin	include/pcl/histogram/linesegmenthistogram.h	/^      float rangeMin, rangeMax;int id;$/;"	m	class:pcl::LineSegmentBin
rangeMin	include/pcl/opencv/linesegment2dhistogram.h	/^    float rangeMin, rangeMax;$/;"	m	class:pcl::ColumnBin
rangeMin	include/pcl/opencv/linesegment2dhistogram.h	/^    float rangeMin, rangeMax;$/;"	m	class:pcl::RowBin
rawPlanes	include/pcl/segmentation/planesegmentation.h	/^      Plane3DVector planes, rawPlanes, walls;$/;"	m	class:pcl::PlaneSegmentation
readFile	tests/test_fpe.cpp	/^  readFile (pcl::PointCloud<XYZD>& cloud)$/;"	f	class:Test_FPE
recalculateNormal	include/pcl/types/plane3d.h	/^      void recalculateNormal ()$/;"	f	class:pcl::Plane3D
reconstructLineSegment	include/pcl/common/edges_common.h	/^  typename pcl::PointCloud<PointT>::Ptr reconstructLineSegment (const PointT& start, const PointT& end, float stepSize)$/;"	f	namespace:pcl
reconstructLineSegment	include/pcl/common/edges_common.h	/^  typename pcl::PointCloud<PointT>::Ptr reconstructLineSegment (const PointT& start, const PointT& end, float stepSize,$/;"	f	namespace:pcl
reconstructLineSegment	include/pcl/common/edges_common.h	/^  typename pcl::PointCloud<PointT>::Ptr reconstructLineSegment (const PointT& start, const PointT& end, int numPoints)$/;"	f	namespace:pcl
reconstructLineSegment	include/pcl/common/edges_common.h	/^  typename pcl::PointCloud<PointT>::Ptr reconstructLineSegment (const PointT& start, const PointT& end, int numPoints,$/;"	f	namespace:pcl
registration	include/pcl/registration/registration_dirk.h	/^    namespace registration$/;"	n	namespace:pcl
registration_method_name_	include/pcl/visualization/registration_visualizer2.h	/^      std::string registration_method_name_;$/;"	m	class:pcl::RegistrationVisualizer2
removeBorderLines	include/pcl/opencv/edge_detection_utils.h	/^    removeBorderLines (std::vector<LineSegment2D>& lines, int width, int height, float borderDist = 30)$/;"	f	namespace:pcl::opencv
removeFarLines	include/pcl/common/edges_common.h	/^  void removeFarLines (std::vector<pcl::LineSegment3D<PointT>, Eigen::aligned_allocator<PointT> >& lines,$/;"	f	namespace:pcl
removeFarPlanes	include/pcl/models/localmodelfactory.h	/^      Plane3DVector removeFarPlanes (const Plane3DVector& planes, float xDifferenceThreshold) const$/;"	f	class:pcl::LocalModelFactory
removeGaps	include/pcl/models/localmodelfactory.h	/^      LocalModel<PointT> removeGaps (LocalModel<PointT> model)$/;"	f	class:pcl::LocalModelFactory
removeIntersectingLines	include/pcl/opencv/edgesdetector.h	/^        void removeIntersectingLines (LineSegment2DVector& lines, float dominantAngle)$/;"	f	class:pcl::opencv::EdgeDetector
removeNonHorVertPlanes	include/pcl/segmentation/planesegmentation.h	/^      void removeNonHorVertPlanes (Plane3DVector& planes)$/;"	f	class:pcl::PlaneSegmentation
removeNonHorizontalLines	include/pcl/common/edges_common.h	/^  std::vector<pcl::LineSegment3D<PointT>, Eigen::aligned_allocator<PointT> > removeNonHorizontalLines ($/;"	f	namespace:pcl
removeNonstepPlanes	include/pcl/segmentation/planesegmentation.h	/^      void removeNonstepPlanes (Plane3DVector& planes)$/;"	f	class:pcl::PlaneSegmentation
removePoint	include/pcl/common/incremental_plane_fitting.h	/^      removePoint (const PointT& point, float weight = 1.0f)$/;"	f	class:pcl::PlaneModelIncremental
removePoint	include/pcl/common/incremental_plane_fitting.h	/^      removePoint (const float& x, const float& y, const float& z, float weight = 1.0f )$/;"	f	class:pcl::PlaneModelIncremental
removeShortLines	include/pcl/opencv/edge_detection_utils.h	/^    removeShortLines (std::vector<LineSegment2D>& lines, float minLength = 10)$/;"	f	namespace:pcl::opencv
removeSmallPlanes	include/pcl/segmentation/planesegmentation.h	/^      void removeSmallPlanes (Plane3DVector& planes, int minNumPoints = 400)$/;"	f	class:pcl::PlaneSegmentation
removeSmallPlanes	include/pcl/types/plane3d_utils.h	/^    std::vector<Plane3D<PointT>, Eigen::aligned_allocator<PointT> > const removeSmallPlanes ($/;"	f	class:pcl::utils::std
removeUpperLines	include/pcl/opencv/edgesdetector.h	/^        void removeUpperLines (LineSegment2DVector& lines, float borderThreshold)$/;"	f	class:pcl::opencv::EdgeDetector
removeVerticalLines	include/pcl/opencv/edge_detection_utils.h	/^    removeVerticalLines (std::vector<LineSegment2D>& lines)$/;"	f	namespace:pcl::opencv
renderCloud	src/pcl/apps/stairdetectorlocalpcds.cpp	/^void renderCloud (std::string path)$/;"	f
renderCloud	src/pcl/apps/stairdetectorpcds.cpp	/^void renderCloud (std::string path)$/;"	f
reset	include/pcl/common/incremental_plane_fitting.h	/^      reset()$/;"	f	class:pcl::PlaneModelIncremental
reset	include/pcl/common/time.h	/^      reset()$/;"	f	class:pcl::StopWatch
reset	include/pcl/models/globalmodel.h	/^      void reset ()$/;"	f	class:pcl::GlobalModel
reset	include/pcl/types/plane3d.h	/^      virtual inline void reset ()$/;"	f	class:pcl::Plane3D
reset	src/pcl/apps/stairdetectorlocalXtion.cpp	/^    void reset() { clock_gettime(CLOCK_REALTIME, &beg_); }$/;"	f	class:Timer
reverseSteps	include/pcl/models/localmodel.h	/^      void reverseSteps ()$/;"	f	class:pcl::LocalModel
rgb	include/pcl/common/fhg_point_types.h	/^              float rgb;$/;"	m	union:pcl::_PointMoXYZRGBNormal::__anon12::__anon13::__anon14
rgb	include/pcl/common/fhg_point_types.h	/^          float rgb;$/;"	m	union:pcl::_PointMoXYZRGB::__anon9::__anon10
rgb	include/pcl/common/impl/fhg_point_types.hpp	/^            float rgb;$/;"	m	union:_PointMoXYZRGBNormal::__anon5::__anon6::__anon7
rgb	include/pcl/common/impl/fhg_point_types.hpp	/^        float rgb;$/;"	m	union:_PointMoXYZRGB::__anon2::__anon3
rgba	include/pcl/common/fhg_point_types.h	/^              uint32_t rgba;$/;"	m	union:pcl::_PointMoXYZRGBNormal::__anon12::__anon13::__anon14
rgba	include/pcl/common/fhg_point_types.h	/^        uint32_t rgba;$/;"	m	union:pcl::_PointMoXYZRGB::__anon9
rgba	include/pcl/common/impl/fhg_point_types.hpp	/^            uint32_t rgba;$/;"	m	union:_PointMoXYZRGBNormal::__anon5::__anon6::__anon7
rgba	include/pcl/common/impl/fhg_point_types.hpp	/^      uint32_t rgba;$/;"	m	union:_PointMoXYZRGB::__anon2
rho	include/pcl/opencv/linesegment2d.h	/^    float rho, theta;$/;"	m	class:pcl::LineSegment2D
rhoWeight	include/pcl/opencv/linesegment2d.h	/^    float rhoWeight;$/;"	m	class:pcl::LineSegment2D
riser	include/pcl/types/step.h	/^      Riser<PointT> riser;$/;"	m	class:pcl::Step
riserExist	include/pcl/types/step.h	/^      bool riserExist, treadExist;$/;"	m	class:pcl::Step
robotPosition	tests/test_fpe.cpp	/^  pcl::RobotPosition robotPosition;int pos;int camera_tilt;$/;"	m	class:Test_FPE	file:
rotQuaternion	include/pcl/segmentation/planesegmentation.h	/^      Quaternion<float> rotQuaternion;$/;"	m	class:pcl::PlaneSegmentation
rotateEverything2	include/pcl/segmentation/planesegmentation.h	/^      inline void rotateEverything2 (Plane3DVector& planes)$/;"	f	class:pcl::PlaneSegmentation
rotateLine	include/pcl/types/impl/linesegment3d.hpp	/^void pcl::LineSegment3D<PointT>::rotateLine (Eigen::Quaternion<float> q)$/;"	f	class:pcl::LineSegment3D
rotateLine	include/pcl/types/linesegment3d.h	/^      rotateLine (Eigen::Quaternion<float> q)$/;"	f	class:pcl::LineSegment3D
rotateNormals	include/pcl/segmentation/planesegmentation.h	/^      inline void rotateNormals (std::vector<Eigen::Vector3f>& normals, const float angle, const Eigen::Vector3f axis)$/;"	f	class:pcl::PlaneSegmentation
rotatePlane	include/pcl/types/plane3d_utils.h	/^    void rotatePlane (Plane3D<PointT>& plane, double angle, Eigen::Vector3f axis)$/;"	f	namespace:pcl::utils
rotatePlanes	include/pcl/segmentation/planesegmentation.h	/^      inline void rotatePlanes (Plane3DVector& planes, Quaternion<float> q)$/;"	f	class:pcl::PlaneSegmentation
rotatePlanes	include/pcl/segmentation/planesegmentation.h	/^      inline void rotatePlanes (Plane3DVector& planes, double angle, Eigen::Vector3f axis)$/;"	f	class:pcl::PlaneSegmentation
rotatePlanes	include/pcl/types/plane3d_utils.h	/^    void rotatePlanes (std::vector<Plane3D<PointT>, Eigen::aligned_allocator<PointT> >& planes, double angle,$/;"	f	namespace:pcl::utils
rotatePoint	include/pcl/common/point_common.h	/^  inline PointT rotatePoint (const PointT& point, Eigen::Quaternion<float> q)$/;"	f	namespace:pcl
rotatePointCloud	include/pcl/utils/pointcloud_utils.h	/^    rotatePointCloud (pcl::PointCloud<PointT>& cloud, Eigen::Quaternion<float> q)$/;"	f	namespace:pcl
rotatePointCloud	include/pcl/utils/pointcloud_utils.h	/^    rotatePointCloud (pcl::PointCloud<PointT>& cloud, double angle, Eigen::Vector3f axis)$/;"	f	namespace:pcl
rotate_all	tests/test_fpe.cpp	/^  bool ledger_update, divideby1000, rotate_all;$/;"	m	class:Test_FPE	file:
run	src/pcl/apps/stairdetectorlocalXtion.cpp	/^                void run ()$/;"	f	class:SimpleOpenNIViewer
runDisplay	include/pcl/visualization/impl/registration_visualizer2.hpp	/^  pcl::RegistrationVisualizer2<PointSource, PointTarget>::runDisplay ()$/;"	f	class:pcl::RegistrationVisualizer2
samePoint	include/pcl/common/point_common.h	/^  inline bool samePoint (const PointT& p1, const PointT& p2)$/;"	f	namespace:pcl
sampleBoundingBox	include/pcl/types/plane3d_utils.h	/^    typename pcl::PointCloud<PointT>::Ptr sampleBoundingBox ($/;"	f	namespace:pcl::utils
sampleBoundingBox	include/pcl/types/plane3d_utils.h	/^    typename pcl::PointCloud<PointT>::Ptr sampleBoundingBox (pcl::Plane3D<PointT> plane)$/;"	f	namespace:pcl::utils
sampleBoundingBoxes	include/pcl/types/plane3d_utils.h	/^    typename pcl::PointCloud<PointT>::Ptr sampleBoundingBoxes ($/;"	f	namespace:pcl::utils
sampleLines	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr sampleLines (const LineSegment3DVector& lines, float regularity)$/;"	f	class:pcl::ModelSampler
sampleLines	include/pcl/models/modelsampler.h	/^      typename PointCloud<PointT>::Ptr sampleLines (const LineSegment3DVector& lines, int numSampledPoints)$/;"	f	class:pcl::ModelSampler
saveColoredLinesPCD	include/pcl/opencv/edgesdetector.h	/^        void saveColoredLinesPCD (const LineSegment3DVector& lines, std::string filename)$/;"	f	class:pcl::opencv::EdgeDetector
saveImg	include/pcl/opencv/cvutils.h	/^    void saveImg (const cv::Mat& img, long prefix, std::string suffix)$/;"	f	namespace:pcl::opencv
saveImg	include/pcl/opencv/cvutils.h	/^    void saveImg (const cv::Mat& img, std::string outputPath)$/;"	f	namespace:pcl::opencv
saveImg	include/pcl/opencv/cvutils.h	/^    void saveImg (const cv::Mat& img, std::string prefix, long suffix)$/;"	f	namespace:pcl::opencv
saveImg	include/pcl/opencv/imageconcat.h	/^        inline void saveImg (std::string prefix, long suffix)$/;"	f	class:pcl::opencv::ImageConcatenator
saveLinesPCD	include/pcl/opencv/edgesdetector.h	/^        void saveLinesPCD (const LineSegment3DVector& lines, std::string filename)$/;"	f	class:pcl::opencv::EdgeDetector
saveMoPcd	include/pcl/io/impl/mo_io.hpp	/^void pcl::io::saveMoPcd (const char* name, pcl::PointCloud<PointT> cloud)$/;"	f	class:pcl::io
saveModel	include/pcl/io/impl/mo_io.hpp	/^void pcl::io::saveModel (const std::string file_name, const LocalModel<PointT>& model)$/;"	f	class:pcl::io
savePlanes	include/pcl/segmentation/planesegmentation.h	/^      void savePlanes (Plane3DVector& planes)$/;"	f	class:pcl::PlaneSegmentation
saveSingleImages	include/pcl/opencv/imageconcat.h	/^        inline void saveSingleImages (std::string prefix)$/;"	f	class:pcl::opencv::ImageConcatenator
segmentation	include/pcl/segmentation/region_segmentation.h	/^  namespace segmentation$/;"	n	namespace:pcl
separateLanding	include/pcl/models/globalmodel.h	/^      void separateLanding ()$/;"	f	class:pcl::GlobalModel
setAngleTolerance	include/pcl/segmentation/region_segmentation.h	/^        inline void setAngleTolerance (float tolerance)$/;"	f	class:pcl::segmentation::RegionSegmentation
setBBox	include/pcl/types/plane3d.h	/^      void setBBox (LineSegment3D<PointT> topLine, LineSegment3D<PointT> bottomLine)$/;"	f	class:pcl::Plane3D
setCenter	include/pcl/types/plane3d.h	/^      void setCenter (Eigen::Vector3f center)$/;"	f	class:pcl::Plane3D
setCenter	include/pcl/types/step.h	/^      void setCenter (Vector3f center)$/;"	f	class:pcl::Step
setCloud	include/pcl/types/impl/linesegment3d.hpp	/^void pcl::LineSegment3D<PointT>::setCloud (typename pcl::PointCloud<PointT>::Ptr cloud)$/;"	f	class:pcl::LineSegment3D
setCloud	include/pcl/types/linesegment3d.h	/^      setCloud (typename pcl::PointCloud<PointT>::Ptr cloud)$/;"	f	class:pcl::LineSegment3D
setCloudName	include/pcl/apps/stairdetectiondemo.h	/^      void setCloudName (std::string cloudName)$/;"	f	class:pcl::StairDetectionDemo
setCloudName	include/pcl/apps/stairdetectionlocal.h	/^      void setCloudName (std::string cloudName)$/;"	f	class:pcl::StairDetectionLocal
setCloudName	include/pcl/models/globalmodel.h	/^      void setCloudName (std::string cloudName)$/;"	f	class:pcl::GlobalModel
setClusterTolerance	include/pcl/segmentation/region_segmentation.h	/^        inline void setClusterTolerance (float tolerance)$/;"	f	class:pcl::segmentation::RegionSegmentation
setContourType	include/pcl/types/linesegment3d.h	/^      setContourType (ContourForm form)$/;"	f	class:pcl::LineSegment3D
setEdges	include/pcl/models/edges2planesfactory.h	/^      setEdges (const std::vector<LineSegment3D<PointT> , Eigen::aligned_allocator<PointT> >& lines)$/;"	f	class:pcl::Edges2PlanesFactory
setHeight	include/pcl/types/plane3d.h	/^      void setHeight (float height)$/;"	f	class:pcl::Plane3D
setId	include/pcl/types/linesegment3d.h	/^      setId (int id)$/;"	f	class:pcl::LineSegment3D
setId	include/pcl/types/plane3d.h	/^      void setId (size_t id)$/;"	f	class:pcl::Plane3D
setId	include/pcl/types/step.h	/^      void setId (size_t id)$/;"	f	class:pcl::Step
setInputCloud	include/pcl/apps/stairdetectiondemo.h	/^      void setInputCloud (const typename pcl::PointCloud<PointIn>::ConstPtr inCloud)$/;"	f	class:pcl::StairDetectionDemo
setInputCloud	include/pcl/apps/stairdetectionlocal.h	/^      void setInputCloud (const typename pcl::PointCloud<PointIn>::ConstPtr inCloud)$/;"	f	class:pcl::StairDetectionLocal
setInputCloud	include/pcl/common/noise_model.h	/^      setInputCloud (const PointCloudConstPtr& cloud, const IndicesConstPtr& indices = IndicesConstPtr ()) {}$/;"	f	class:pcl::NoiseModel
setInputCloud	include/pcl/common/noise_model.h	/^      setInputCloud (const PointCloudConstPtr& cloud, const IndicesConstPtr& indices = IndicesConstPtr ())$/;"	f	class:pcl::QuadraticIsotropicNoise
setInputCloud	include/pcl/kdtree/impl/fixed_neighbors.hpp	/^pcl::FixedNeighbors<PointT>::setInputCloud (const PointCloudConstPtr &cloud, const IndicesConstPtr &indices)$/;"	f	class:pcl::FixedNeighbors
setInputCloud	include/pcl/opencv/edgesdetector.h	/^        virtual inline void setInputCloud (const PointCloudConstPtr &cloud)$/;"	f	class:pcl::opencv::EdgeDetector
setInputCloud	include/pcl/segmentation/planesegmentation.h	/^      virtual inline void setInputCloud (const PointCloudConstPtr &cloud)$/;"	f	class:pcl::PlaneSegmentation
setInputCloud	include/pcl/types/impl/linesegment3d.hpp	/^void pcl::LineSegment3D<PointT>::setInputCloud (typename pcl::PointCloud<PointT>::Ptr cloud)$/;"	f	class:pcl::LineSegment3D
setInputCloud	include/pcl/types/linesegment3d.h	/^      setInputCloud (typename pcl::PointCloud<PointT>::Ptr cloud)$/;"	f	class:pcl::LineSegment3D
setInputCloud	include/pcl/types/plane3d.h	/^      virtual inline void setInputCloud (const PointCloudConstPtr &cloud, bool calculateCenterNormal = true,$/;"	f	class:pcl::Plane3D
setLDepth	include/pcl/types/plane3d.h	/^      void setLDepth (float lDepth)$/;"	f	class:pcl::Plane3D
setLength	include/pcl/types/plane3d.h	/^      void setLength (float length)$/;"	f	class:pcl::Plane3D
setLineModel	include/pcl/opencv/linesegment2d.h	/^    setLineModel (cv::Vec4i model)$/;"	f	class:pcl::LineSegment2D
setLineModel	include/pcl/opencv/linesegment2d.h	/^    setLineModel (float rho, float theta)$/;"	f	class:pcl::LineSegment2D
setLineModel	include/pcl/opencv/linesegment2d.h	/^    setLineModel (float rho, float theta, cv::Vec4i model)$/;"	f	class:pcl::LineSegment2D
setLineModel	include/pcl/types/impl/linesegment3d.hpp	/^void pcl::LineSegment3D<PointT>::setLineModel (PointT p1, PointT p2)$/;"	f	class:pcl::LineSegment3D
setLineModel	include/pcl/types/impl/linesegment3d.hpp	/^void pcl::LineSegment3D<PointT>::setLineModel (std::vector<PointT, Eigen::aligned_allocator<PointT> > model)$/;"	f	class:pcl::LineSegment3D
setLineModel	include/pcl/types/linesegment3d.h	/^      setLineModel (PointT p1, PointT p2)$/;"	f	class:pcl::LineSegment3D
setLineModel	include/pcl/types/linesegment3d.h	/^      setLineModel (std::vector<PointT, Alloc> model)$/;"	f	class:pcl::LineSegment3D
setMaxClusterSize	include/pcl/segmentation/region_segmentation.h	/^        inline void setMaxClusterSize (int max_cluster_size)$/;"	f	class:pcl::segmentation::RegionSegmentation
setMaxDistance	include/pcl/kdtree/fixed_neighbors.h	/^	void setMaxDistance(float max_dist) {$/;"	f	class:pcl::FixedNeighbors
setMaxMSE	include/pcl/segmentation/region_segmentation.h	/^        inline void setMaxMSE (float max_mse)$/;"	f	class:pcl::segmentation::ProbabilisticPlaneRegionSegmentation
setMaximumDisplayedCorrespondences	include/pcl/visualization/registration_visualizer2.h	/^      setMaximumDisplayedCorrespondences (const int maximum_displayed_correspondences)$/;"	f	class:pcl::RegistrationVisualizer2
setMinClusterSize	include/pcl/segmentation/region_segmentation.h	/^        inline void setMinClusterSize (int min_cluster_size)$/;"	f	class:pcl::segmentation::RegionSegmentation
setModel	include/pcl/io/globfitwriter.h	/^        void setModel (const LocalModel<PointT>& model)$/;"	f	class:pcl::io::GlobfitWriter
setModel	include/pcl/models/modelsampler.h	/^      inline void setModel (const LocalModel<PointT>& localModel)$/;"	f	class:pcl::ModelSampler
setModelAnderson	include/pcl/common/noise_model.h	/^      inline void setModelAnderson()$/;"	f	class:pcl::QuadraticIsotropicNoise
setModelBremen	include/pcl/common/noise_model.h	/^    inline void setModelBremen()$/;"	f	class:pcl::QuadraticIsotropicNoise
setModelHolz	include/pcl/common/noise_model.h	/^      inline void setModelHolz()$/;"	f	class:pcl::QuadraticIsotropicNoise
setModelSegComp	include/pcl/common/noise_model.h	/^      inline void setModelSegComp()$/;"	f	class:pcl::QuadraticIsotropicNoise
setModelWall	include/pcl/types/plane3d.h	/^      virtual inline void setModelWall (const LineSegment3D<PointT>& topLine, const LineSegment3D<PointT>& bottomLine)$/;"	f	class:pcl::Plane3D
setNeighborhood	include/pcl/kdtree/fixed_neighbors.h	/^	virtual inline void setNeighborhood($/;"	f	class:pcl::FixedNeighbors
setNoiseModel	include/pcl/segmentation/region_segmentation.h	/^        inline void setNoiseModel (const NoiseModelPtr& noise_model)$/;"	f	class:pcl::segmentation::RegionSegmentation
setNormal	include/pcl/types/plane3d.h	/^      void setNormal (Eigen::Vector3f normal)$/;"	f	class:pcl::Plane3D
setNumBins	include/pcl/histogram/planehistogram.h	/^      void setNumBins (int numBins)$/;"	f	class:pcl::PlaneHistogram
setP1	include/pcl/types/types.h	/^      setP1 (PointT p1)$/;"	f	class:pcl::LineSegment
setP2	include/pcl/types/types.h	/^      setP2 (PointT p2)$/;"	f	class:pcl::LineSegment
setPlaneModel	include/pcl/types/plane3d.h	/^      virtual inline void setPlaneModel (const LineSegment3D<PointT>& topLine, const LineSegment3D<PointT>& bottomLine)$/;"	f	class:pcl::Plane3D
setPlaneModel	include/pcl/types/plane3d.h	/^      virtual inline void setPlaneModel (const PointT& topLeft, const PointT& topRight, const PointT& bottomLeft,$/;"	f	class:pcl::Plane3D
setPlanes	include/pcl/models/localmodelfactory.h	/^      inline void setPlanes (const Plane3DVector& planes)$/;"	f	class:pcl::LocalModelFactory
setPointNormal	include/pcl/common/point_common.h	/^  inline PointT setPointNormal (const PointT& point, Eigen::Vector3f normal)$/;"	f	namespace:pcl
setRDepth	include/pcl/types/plane3d.h	/^      void setRDepth (float rDepth)$/;"	f	class:pcl::Plane3D
setRegistration	include/pcl/visualization/registration_visualizer2.h	/^      setRegistration (pcl::Registration<PointSource, PointTarget> &registration)$/;"	f	class:pcl::RegistrationVisualizer2
setRiser	include/pcl/types/step.h	/^      inline bool setRiser (Riser<PointT> riser)$/;"	f	class:pcl::Step
setSearchMethod	include/pcl/segmentation/impl/region_segmentation.hpp	/^inline void pcl::KdTree::CurvatureEstimation::setSearchMethod(const KdTreePtr &tree)$/;"	f	class:pcl::KdTree::CurvatureEstimation
setSearchMethod	include/pcl/segmentation/region_segmentation.h	/^        inline void setSearchMethod (const KdTreePtr &tree)$/;"	f	class:pcl::segmentation::RegionSegmentation
setState	include/pcl/common/incremental_plane_fitting.h	/^      setState (const Eigen::Vector3f& sum_points, const Eigen::Matrix3f& sum_covs, const float& sum_weights, const int& nr_points = 1)$/;"	f	class:pcl::PlaneModelIncremental
setSteps	include/pcl/models/localmodel.h	/^      void setSteps (const StepsVector& steps)$/;"	f	class:pcl::LocalModel
setStepsize	include/pcl/histogram/planehistogram.h	/^      void setStepsize (float stepSize)$/;"	f	class:pcl::PlaneHistogram
setTread	include/pcl/types/step.h	/^      inline bool setTread (Tread<PointT> tread)$/;"	f	class:pcl::Step
setWalls	include/pcl/models/localmodel.h	/^      void setWalls (const Plane3DVector& walls)$/;"	f	class:pcl::LocalModel
size	include/pcl/histogram/abstract_histogram.h	/^      size ()$/;"	f	struct:pcl::Bin
smallMinimalDepth	include/pcl/types/plane3d.h	/^      const static float smallMinimalDepth = 0.05;$/;"	m	class:pcl::Plane3D
smoothBilateral	include/pcl/surface/surface_functions.h	/^    template<typename PointInT, typename PointOutT> inline void smoothBilateral (const pcl::PointCloud<PointInT>& input,$/;"	f	namespace:pcl::surface
smoothBilateralNEW	include/pcl/surface/surface_functions.h	/^    template<typename PointInT, typename PointOutT> inline void smoothBilateralNEW ($/;"	f	namespace:pcl::surface
sortPlanes	include/pcl/segmentation/planesegmentation.h	/^      void sortPlanes (Plane3DVector& planes)$/;"	f	class:pcl::PlaneSegmentation
sortPlanes	include/pcl/types/plane3d_utils.h	/^    void sortPlanes (std::vector<Plane3D<PointT>, Eigen::aligned_allocator<PointT> >& planes, int index)$/;"	f	namespace:pcl::utils
sortPoints	include/pcl/common/point_common.h	/^  inline std::vector<PointT, Eigen::aligned_allocator<PointT> > sortPoints (const std::vector<PointT, Eigen::aligned_allocator<PointT> >& points, int axis)$/;"	f	namespace:pcl
split	src/pcl/apps/resultsparser.cpp	/^split (const std::string &s, char delim)$/;"	f
split	src/pcl/apps/resultsparser.cpp	/^split (const std::string &s, char delim, std::vector<std::string> &elems)$/;"	f
src	src/pcl/apps/smooth.cpp	/^Mat src;$/;"	v
src_gray	src/pcl/apps/contours.cpp	/^Mat src_gray;$/;"	v
standard_deviations_	include/pcl/common/noise_model.h	/^      std::vector<float> standard_deviations_;$/;"	m	class:pcl::QuadraticIsotropicNoise
startDisplay	include/pcl/visualization/impl/registration_visualizer2.hpp	/^  pcl::RegistrationVisualizer2<PointSource, PointTarget>::startDisplay ()$/;"	f	class:pcl::RegistrationVisualizer2
start_time_	include/pcl/common/time.h	/^      boost::posix_time::ptime start_time_;$/;"	m	class:pcl::StopWatch
step1	include/pcl/models/globalmodel.h	/^          size_t step1, step2;$/;"	m	struct:pcl::GlobalModel::Match
step2	include/pcl/models/globalmodel.h	/^          size_t step1, step2;$/;"	m	struct:pcl::GlobalModel::Match
stepSize	include/pcl/histogram/planehistogram.h	/^      float stepSize;$/;"	m	class:pcl::PlaneHistogram
steps	include/pcl/apps/stairdetector.h	/^      StepsVector steps;$/;"	m	class:pcl::StairDetector
steps	include/pcl/models/localmodel.h	/^      StepsVector steps;$/;"	m	class:pcl::LocalModel
stepsIndex	include/pcl/models/globalmodel.h	/^      size_t stepsIndex, wallsIndex;$/;"	m	class:pcl::GlobalModel
stichCloud	include/pcl/types/plane3d.h	/^      void stichCloud (typename pcl::PointCloud<PointT>::Ptr otherCloud)$/;"	f	class:pcl::Plane3D
stopDisplay	include/pcl/visualization/impl/registration_visualizer2.hpp	/^  pcl::RegistrationVisualizer2<PointSource, PointTarget>::stopDisplay ()$/;"	f	class:pcl::RegistrationVisualizer2
subtractPoints	include/pcl/common/point_common.h	/^  PointT subtractPoints (const PointT p1, const PointT p2)$/;"	f	namespace:pcl
sumPoints	include/pcl/common/point_common.h	/^  PointT sumPoints (const PointT p1, const PointT p2)$/;"	f	namespace:pcl
sum_covs_	include/pcl/common/incremental_plane_fitting.h	/^      Eigen::Matrix3f sum_covs_;$/;"	m	class:pcl::PlaneModelIncremental
sum_normal_	include/pcl/segmentation/region_segmentation.h	/^        Eigen::Vector3f sum_normal_;$/;"	m	class:pcl::segmentation::ApproximatePlaneRegionSegmentation
sum_points_	include/pcl/common/incremental_plane_fitting.h	/^      Eigen::Vector3f sum_points_;$/;"	m	class:pcl::PlaneModelIncremental
sum_square_error_	include/pcl/segmentation/region_segmentation.h	/^        float sum_square_error_;$/;"	m	class:pcl::segmentation::ApproximatePlaneRegionSegmentation
sum_weights_	include/pcl/common/incremental_plane_fitting.h	/^      float sum_weights_;$/;"	m	class:pcl::PlaneModelIncremental
sum_xyz_	include/pcl/segmentation/region_segmentation.h	/^        Eigen::Vector3f sum_xyz_;$/;"	m	class:pcl::segmentation::ApproximatePlaneRegionSegmentation
surface	include/pcl/surface/surface_functions.h	/^  namespace surface$/;"	n	namespace:pcl
surface	include/pcl/surface/surface_utils.h	/^  namespace surface$/;"	n	namespace:pcl
temp_dist_term	include/pcl/surface/surface_functions.h	/^    inline float temp_dist_term (const PointAT& point_a, const PointBT& point_b, const float& w1, const float& w2,$/;"	f	namespace:pcl::surface
tests	tests/test_fpe.cpp	/^  tests (pcl::SmartPlane3DBuilder<XYZD> builder)$/;"	f	class:Test_FPE
theta	include/pcl/opencv/linesegment2d.h	/^    float rho, theta;$/;"	m	class:pcl::LineSegment2D
thetaWeight	include/pcl/opencv/linesegment2d.h	/^    float thetaWeight;$/;"	m	class:pcl::LineSegment2D
thresh_callback	src/pcl/apps/contours.cpp	/^thresh_callback (int, void*)$/;"	f
title_	include/pcl/common/time.h	/^      std::string title_;$/;"	m	class:pcl::ScopeTime
tmr	src/pcl/apps/stairdetectorlocalXtion.cpp	/^                Timer tmr;$/;"	m	class:SimpleOpenNIViewer	file:
topLeft	include/pcl/types/boundingbox.h	/^      PointT topLeft, topRight, bottomLeft, bottomRight;$/;"	m	class:pcl::BoundingBox
topRight	include/pcl/types/boundingbox.h	/^      PointT topLeft, topRight, bottomLeft, bottomRight;$/;"	m	class:pcl::BoundingBox
transform	include/pcl/models/localmodel.h	/^      void transform (Eigen::Matrix4f transformation)$/;"	f	class:pcl::LocalModel
transform	include/pcl/types/plane3d.h	/^      void transform (Eigen::Matrix4f transformation)$/;"	f	class:pcl::Plane3D
transform	include/pcl/types/step.h	/^      void transform (Eigen::Matrix4f transformation)$/;"	f	class:pcl::Step
translate	include/pcl/types/plane3d.h	/^      void translate (PointT translation)$/;"	f	class:pcl::Plane3D
translateNumberRange	include/pcl/common/math.h	/^    translateNumberRange (T OldValue, T OldMin, T OldMax, T NewMin, T NewMax)$/;"	f	namespace:pcl
translation	include/pcl/models/globalmodel.h	/^          PointT translation;$/;"	m	struct:pcl::GlobalModel::Match
translation	include/pcl/models/globalmodel.h	/^      PointT translation;$/;"	m	class:pcl::GlobalModel
tread	include/pcl/types/step.h	/^      Tread<PointT> tread;$/;"	m	class:pcl::Step
treadExist	include/pcl/types/step.h	/^      bool riserExist, treadExist;$/;"	m	class:pcl::Step
updateBBox	include/pcl/types/plane3d.h	/^      inline void updateBBox (const BoundingBox<PointT>& bbox)$/;"	f	class:pcl::Plane3D
updateCenter	include/pcl/types/plane3d.h	/^      void updateCenter (Eigen::Vector3f center)$/;"	f	class:pcl::Plane3D
updateCluster	include/pcl/segmentation/region_segmentation.h	/^        inline void updateCluster (const int& point_idx)$/;"	f	class:pcl::segmentation::ApproximatePlaneRegionSegmentation
updateCluster	include/pcl/segmentation/region_segmentation.h	/^        inline void updateCluster (const int& point_idx)$/;"	f	class:pcl::segmentation::AverageNormalRegionSegmentation
updateCluster	include/pcl/segmentation/region_segmentation.h	/^        inline void updateCluster (const int& point_idx)$/;"	f	class:pcl::segmentation::LastNormalRegionSegmentation
updateCluster	include/pcl/segmentation/region_segmentation.h	/^        virtual inline void updateCluster (const int& point_idx)$/;"	f	class:pcl::segmentation::RegionSegmentation
updateIntermediateCloud	include/pcl/visualization/impl/registration_visualizer2.hpp	/^  pcl::RegistrationVisualizer2<PointSource, PointTarget>::updateIntermediateCloud ($/;"	f	class:pcl::RegistrationVisualizer2
updateNormal	include/pcl/types/plane3d.h	/^      void updateNormal (Eigen::Vector3f normal)$/;"	f	class:pcl::Plane3D
update_visualizer_	include/pcl/visualization/registration_visualizer2.h	/^          PointTarget> &cloud_tgt, const std::vector<int> &indices_tgt)> update_visualizer_;$/;"	m	class:pcl::RegistrationVisualizer2
used_	include/pcl/kdtree/fixed_neighbors.h	/^	std::vector<bool> used_;$/;"	m	class:pcl::FixedNeighbors
utils	include/pcl/types/plane3d_utils.h	/^  namespace utils$/;"	n	namespace:pcl
validInput	include/pcl/segmentation/planesegmentation.h	/^      bool validInput;$/;"	m	class:pcl::PlaneSegmentation
vectorToPoint	include/pcl/common/point_common.h	/^  inline PointT vectorToPoint (Eigen::Vector3f input)$/;"	f	namespace:pcl
verticalLines	include/pcl/opencv/edgesdetector.h	/^        LineSegment3DVector verticalLines;$/;"	m	class:pcl::opencv::EdgeDetector
viewer	src/pcl/apps/stairdetectorlocalXtion.cpp	/^                pcl::visualization::CloudViewer viewer;$/;"	m	class:SimpleOpenNIViewer	file:
viewer_	include/pcl/visualization/registration_visualizer2.h	/^      boost::shared_ptr<pcl::visualization::PCLVisualizer> viewer_;$/;"	m	class:pcl::RegistrationVisualizer2
viewer_thread_	include/pcl/visualization/registration_visualizer2.h	/^      boost::thread viewer_thread_;$/;"	m	class:pcl::RegistrationVisualizer2
visualizer_updating_mutex_	include/pcl/visualization/registration_visualizer2.h	/^      boost::mutex visualizer_updating_mutex_;$/;"	m	class:pcl::RegistrationVisualizer2
vp_1	tests/icp_vis.cpp	/^int vp_1, vp_2;$/;"	v
vp_2	tests/icp_vis.cpp	/^int vp_1, vp_2;$/;"	v
vx	include/pcl/opencv/lswms.h	/^	float vx;$/;"	m	struct:_DIR_POINT
vy	include/pcl/opencv/lswms.h	/^	float vy;$/;"	m	struct:_DIR_POINT
walls	include/pcl/models/localmodel.h	/^      Plane3DVector walls;$/;"	m	class:pcl::LocalModel
walls	include/pcl/models/localmodelfactory.h	/^      Plane3DVector walls;$/;"	m	class:pcl::LocalModelFactory
walls	include/pcl/segmentation/planesegmentation.h	/^      Plane3DVector planes, rawPlanes, walls;$/;"	m	class:pcl::PlaneSegmentation
wallsIndex	include/pcl/models/globalmodel.h	/^      size_t stepsIndex, wallsIndex;$/;"	m	class:pcl::GlobalModel
weights_	include/pcl/common/noise_model.h	/^      std::vector<float> weights_;$/;"	m	class:pcl::QuadraticIsotropicNoise
window_name	src/pcl/apps/smooth.cpp	/^char window_name[] = "Filter Demo 1";$/;"	v
worldToCamera	include/pcl/utils/pointcloud_utils.h	/^    worldToCamera (pcl::PointCloud<PointT>& cloud)$/;"	f	namespace:pcl
writeAllPlanes	tests/test_fpe.cpp	/^  writeAllPlanes (pcl::SmartPlane3DBuilder<XYZD> builder, bool divideby1000)$/;"	f	class:Test_FPE
writeCloud	include/pcl/io/globfitwriter.h	/^        void writeCloud (typename PointCloud<PointT>::Ptr cloud, std::ofstream& myfile)$/;"	f	class:pcl::io::GlobfitWriter
writeCloud	tests/test_fpe.cpp	/^  writeCloud (pcl::PointCloud<pcl::PointXYZRGB> cloudBlob, string prefixFileName)$/;"	f	class:Test_FPE
writeGlobfitModel	include/pcl/io/globfitwriter.h	/^        void writeGlobfitModel (char* outPath)$/;"	f	class:pcl::io::GlobfitWriter
writeHistogramPlanes	tests/test_fpe.cpp	/^  writeHistogramPlanes (pcl::SmartPlane3DBuilder<XYZD> builder)$/;"	f	class:Test_FPE
writePlane	include/pcl/io/globfitwriter.h	/^        void writePlane (pcl::Plane3D<PointT> plane, std::ofstream& myfile)$/;"	f	class:pcl::io::GlobfitWriter
writePlane	tests/test_fpe.cpp	/^  writePlane (SmartPlane3D plane, string path)$/;"	f	class:Test_FPE
writePlanes	include/pcl/io/globfitwriter.h	/^        void writePlanes (const Plane3DVector& planes, std::ofstream& myfile)$/;"	f	class:pcl::io::GlobfitWriter
writeSteps	tests/test_fpe.cpp	/^  writeSteps (pcl::SmartPlane3DBuilder<XYZD> builder)$/;"	f	class:Test_FPE
xDeviationBetStepsThreshold	include/pcl/models/localmodelfactory.h	/^      static const float xDeviationBetStepsThreshold = 0.4;$/;"	m	class:pcl::LocalModelFactory
xDifferenceThreshold	include/pcl/models/localmodelfactory.h	/^      static const float xDifferenceThreshold = 0.8;$/;"	m	class:pcl::LocalModelFactory
zDeviationBetStepsThreshold	include/pcl/models/localmodelfactory.h	/^      static const float zDeviationBetStepsThreshold = 0.3;$/;"	m	class:pcl::LocalModelFactory
~FastMeshing	include/pcl/apps/fast_meshing.h	/^      ~FastMeshing(){};$/;"	f	class:pcl::FastMeshing
~PlanePolygonalization	include/pcl/segmentation/region_segmentation.h	/^        virtual ~PlanePolygonalization ()$/;"	f	class:pcl::segmentation::PlanePolygonalization
~RegionSegmentation	include/pcl/segmentation/region_segmentation.h	/^        virtual ~RegionSegmentation ()$/;"	f	class:pcl::segmentation::RegionSegmentation
~ScopeTime	include/pcl/common/time.h	/^      inline ~ScopeTime ()$/;"	f	class:pcl::ScopeTime
